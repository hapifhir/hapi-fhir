{
	"resourceType": "Bundle",
	"id": "bundle-measure-library-ontario",
	"type": "transaction",
	"entry": [
		{
	"resource": {
		"resourceType": "Library",
		"id": "immunizationCQLLibrary",
		"name": "immunizationCQLLibrary",
		"status": "active",
		"relatedArtifact": [
			{
				"type": "depends-on",
				"resource": "http://hl7.org/fhir/Library/FHIRHelpers|4.0.1"
			}
		],
		"type": {
			"coding": [
				{
					"system": "http://terminology.hl7.org/CodeSystem/library-type",
					"code": "logic-library"
				}
			]
		},
		"parameter": [
			{
				"name": "InitialPopulation",
				"use": "out",
				"min": 0,
				"max": "*",
				"type": "Patient"
			},
			{
				"name": "Denominator",
				"use": "out",
				"min": 0,
				"max": "*",
				"type": "Patient"
			},
			{
				"name": "Numerator",
				"use": "out",
				"min": 0,
				"max": "*",
				"type": "Patient"
			}
		],
		"dataRequirement": [
			{
				"type": "Patient",
				"profile": [
					"http://hl7.org/fhir/StructureDefinition/Patient"
				]
			}
		],
		"content": [
			{
				"contentType": "text/cql",
				"data": "CmxpYnJhcnkgSW1tdW5pemF0aW9uU3RhdHVzCgp1c2luZyBGSElSIHZlcnNpb24gJzQuMC4xJwoKaW5jbHVkZSBGSElSSGVscGVycyB2ZXJzaW9uICc0LjAuMScgY2FsbGVkIEZISVJIZWxwZXJzCmluY2x1ZGUgRkhJUkNvbW1vbiBjYWxsZWQgRkMKCmNvZGVzeXN0ZW0gIk9ic2VydmF0aW9uQ2F0ZWdvcnlDb2RlcyI6ICdodHRwOi8vdGVybWlub2xvZ3kuaGw3Lm9yZy9Db2RlU3lzdGVtL29ic2VydmF0aW9uLWNhdGVnb3J5Jwpjb2Rlc3lzdGVtICJMT0lOQyI6ICdodHRwOi8vbG9pbmMub3JnJwoKdmFsdWVzZXQgIkRUYVBfSVBWX0hpYiBWYWNjaW5lIjogJ2h0dHA6Ly9jdHMubmxtLm5paC5nb3YvZmhpci9WYWx1ZVNldC8yLjE2Ljg0MC4xLjExMzg4My4zLjQ2NC4xMDAzLjE5Ni4xMS4xMjEyJwp2YWx1ZXNldCAiUG5ldV9DXzEzIFZhY2NpbmUiOiAnaHR0cDovL2N0cy5ubG0ubmloLmdvdi9maGlyL1ZhbHVlU2V0LzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDMuMTE1OCcKdmFsdWVzZXQgIlJvdF8xIFZhY2NpbmUiOiAnaHR0cDovL2N0cy5ubG0ubmloLmdvdi9maGlyL1ZhbHVlU2V0LzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDMuMTk2LjExLjEyMzInCnZhbHVlc2V0ICJNZW5fQ19DIFZhY2NpbmUiOiAnaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC92YWNjaW5lLU1lbi1DLUMnCnZhbHVlc2V0ICJNTVIgVmFjY2luZSI6ICdodHRwOi8vY3RzLm5sbS5uaWguZ292L2ZoaXIvVmFsdWVTZXQvMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwMy4xOTYuMTEuMTIzNScKdmFsdWVzZXQgIlZhciBWYWNjaW5lIjogJ2h0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvdmFjY2luZS1WYXInCnZhbHVlc2V0ICJNTVJWIFZhY2NpbmUiOiAnaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC92YWNjaW5lLU1NUlYnCnZhbHVlc2V0ICJUZGFwX0lQViBWYWNjaW5lIjogJ2h0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvdmFjY2luZS1UZGFwLUlQVicKdmFsdWVzZXQgIkhCIFZhY2NpbmUiOiAnaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC92YWNjaW5lLUhCJwp2YWx1ZXNldCAiTWVuX0NfQUNZVyBWYWNjaW5lIjogJ2h0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvdmFjY2luZS1NZW4tQy1BQ1lXJwp2YWx1ZXNldCAiSFBWXzkgVmFjY2luZSI6ICdodHRwOi8vaGw3Lm9yZy9maGlyL1ZhbHVlU2V0L3ZhY2NpbmUtSFBWLTknCnZhbHVlc2V0ICJUZGFwIFZhY2NpbmUiOiAnaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC92YWNjaW5lLVRkYXAnCnZhbHVlc2V0ICJUZCBWYWNjaW5lIjogJ2h0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvdmFjY2luZS1UZCcKdmFsdWVzZXQgIlBuZXVfUF8yMyBWYWNjaW5lIjogJ2h0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvdmFjY2luZS1QbmV1LVAtMjMnCnZhbHVlc2V0ICJIWiBWYWNjaW5lIjogJ2h0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvdmFjY2luZS1IWicKdmFsdWVzZXQgIkluZiBWYWNjaW5lIjogJ2h0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvdmFjY2luZS1JbmYnCnZhbHVlc2V0ICJQcmVnbmFuY3kgU3RhdHVzIjogJ2h0dHA6Ly9obDcub3JnL2ZoaXIvVmFsdWVTZXQvdmFsdWVzZXRzLXByZWduYW5jeS1zdGF0dXMnCnZhbHVlc2V0ICJXZWVrcyBvZiBHZXN0YXRpb24iOiAnaHR0cDovL2hsNy5vcmcvZmhpci9WYWx1ZVNldC92YWx1ZXNldHMtd2Vla3Mtb2YtZ2VzdGF0aW9uJwoKY29kZSAibGFib3JhdG9yeSI6ICdsYWJvcmF0b3J5JyBmcm9tICJPYnNlcnZhdGlvbkNhdGVnb3J5Q29kZXMiIGRpc3BsYXkgJ0xhYm9yYXRvcnknCmNvZGUgIlByZWduYW50IjogJ0xBMTUxNzMtMCcgZnJvbSAiTE9JTkMiIGRpc3BsYXkgJ1ByZWduYW50JwoKcGFyYW1ldGVyICJNZWFzdXJlbWVudCBQZXJpb2QiIGRlZmF1bHQgSW50ZXJ2YWxbQDE5MjMtMDEtMDFUMDA6MDA6MDAuMDAwLCBAMjAyMi0wOS0xNlQwMDowMDowMC4wMDBdCnBhcmFtZXRlciAiRmFsbCBQZXJpb2QiIGRlZmF1bHQgSW50ZXJ2YWxbQDIwMjItMDktMDFUMDA6MDA6MDAuMDAwLCBAMjAyMi0xMi0zMVQwMDowMDowMC4wMDBdCnBhcmFtZXRlciBBIEludGVnZXIgZGVmYXVsdCAxCnBhcmFtZXRlciBCIEludGVnZXIgZGVmYXVsdCAwCgpjb250ZXh0IFBhdGllbnQKCmRlZmluZSAiRXJyb3JNZXNzYWdlIjoKCU1lc3NhZ2UoJ0RpdmlkZSBieSB6ZXJvIGVycm9yIScsIEEgPSAwLCAnVW5kZWZpbmVkJywgJ0Vycm9yJywgJ1RoZSBCIHBhcmFtZXRlciBpcyB6ZXJvJykKCmRlZmluZSAiU3RhcnQgb2YgTWVhc3VyZW1lbnQgUGVyaW9kIjoKCWRhdGUgZnJvbSBzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIgoKZGVmaW5lICJFbmQgb2YgTWVhc3VyZW1lbnQgUGVyaW9kIjoKCQlkYXRlIGZyb20gZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiCgpkZWZpbmUgIkJpcnRoIERhdGUiOgoJW1BhdGllbnRdIHAKCQlyZXR1cm4gRkhJUkhlbHBlcnMuVG9EYXRlKHAuYmlydGhEYXRlKQoKZGVmaW5lICJBZ2UgaW4gV2Vla3MgaW4gdGhlIGVuZCBvZiBNZWFzdXJlbWVudCBQZXJpb2QiOgoJQWdlSW5XZWVrc0F0KGRhdGUgZnJvbSBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpCgpkZWZpbmUgIkFnZSBpbiBNb250aHMgaW4gdGhlIGVuZCBvZiBNZWFzdXJlbWVudCBQZXJpb2QiOgoJQWdlSW5Nb250aHNBdChkYXRlIGZyb20gZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiKQoKZGVmaW5lICJBZ2UgaW4gWWVhcnMgaW4gdGhlIGVuZCBvZiBNZWFzdXJlbWVudCBQZXJpb2QiOgoJCUFnZUluWWVhcnNBdChkYXRlIGZyb20gZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiKQoKZGVmaW5lICJJbml0aWFsUG9wdWxhdGlvbiI6Cgl0cnVlCgpkZWZpbmUgIkRlbm9taW5hdG9yIjoKCSJJbml0aWFsUG9wdWxhdGlvbiIKCmRlZmluZSAiUXVhbGlmeWluZyBFbmNvdW50ZXJzIER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiOgoJW0VuY291bnRlcl0gVmFsaWRFbmNvdW50ZXIKCSAgIAl3aGVyZSBWYWxpZEVuY291bnRlci5zdGF0dXMgID0gJ2ZpbmlzaGVkJwoJICAgCQlhbmQgVmFsaWRFbmNvdW50ZXIucGVyaW9kIGR1cmluZyAiTWVhc3VyZW1lbnQgUGVyaW9kIgoJCQkJYW5kIEFnZUluTW9udGhzQXQoZGF0ZSBmcm9tIHN0YXJ0IG9mIFZhbGlkRW5jb3VudGVyLnBlcmlvZCkgPj0gMgoKZGVmaW5lICJFbmNvdW50ZXIgRGF0ZShzKSI6CgkiUXVhbGlmeWluZyBFbmNvdW50ZXJzIER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiIEUKCQlyZXR1cm4gKGRhdGUgZnJvbSBzdGFydCBvZiBFLnBlcmlvZCkKCmRlZmluZSAiTGFzdCBFbmNvdW50ZXIgRGF0ZSI6CglMYXN0KCJRdWFsaWZ5aW5nIEVuY291bnRlcnMgRHVyaW5nIE1lYXN1cmVtZW50IFBlcmlvZCIgRQoJCXJldHVybiAoZGF0ZSBmcm9tIHN0YXJ0IG9mIEUucGVyaW9kKSkKCmRlZmluZSAiQWdlIGluIFdlZWtzIGluIHRoZSBzdGFydCBvZiBMYXN0IEVuY291bnRlciBQZXJpb2QiOgoJTGFzdCgiUXVhbGlmeWluZyBFbmNvdW50ZXJzIER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiIEUKCQlyZXR1cm4gKEFnZUluV2Vla3NBdChkYXRlIGZyb20gc3RhcnQgb2YgRS5wZXJpb2QpKSkKCmRlZmluZSAiQWdlIGluIE1vbnRocyBpbiB0aGUgc3RhcnQgb2YgTGFzdCBFbmNvdW50ZXIgUGVyaW9kIjoKCUxhc3QoIlF1YWxpZnlpbmcgRW5jb3VudGVycyBEdXJpbmcgTWVhc3VyZW1lbnQgUGVyaW9kIiBFCgkJcmV0dXJuIChBZ2VJbk1vbnRoc0F0KGRhdGUgZnJvbSBzdGFydCBvZiBFLnBlcmlvZCkpKQoKZGVmaW5lICJBZ2UgaW4gWWVhcnMgaW4gdGhlIHN0YXJ0IG9mIExhc3QgRW5jb3VudGVyIFBlcmlvZCI6CglMYXN0KCJRdWFsaWZ5aW5nIEVuY291bnRlcnMgRHVyaW5nIE1lYXN1cmVtZW50IFBlcmlvZCIgRQoJCXJldHVybiAoQWdlSW5ZZWFyc0F0KGRhdGUgZnJvbSBzdGFydCBvZiBFLnBlcmlvZCkpKQoKZGVmaW5lICJOdW1lcmF0b3IiOgoJIk1hbGUgRnVsbHkgVmFjY2luYXRlZCIKCW9yCgkiTm9ucHJlZ25hbnQgRmVtYWxlIEZ1bGx5IFZhY2NpbmF0ZWQiCglvcgoJIlByZWduYW50IEZlbWFsZSBJZGVhbGx5IEZ1bGx5IFZhY2NpbmF0ZWQiCgpkZWZpbmUgIkZ1bGx5IFJvdXRpbmUgVmFjY2luYXRlZCI6CgkiRm91ciBEVGFQX0lQVl9IaWIgVmFjY2luYXRpb25zIgoJYW5kCgkiVGhyZWUgUG5ldV9DXzEzIFZhY2NpbmF0aW9ucyIKCWFuZAoJIlR3byBSb3RfMSBWYWNjaW5hdGlvbnMiCglhbmQKCSJPbmUgTWVuX0NfQyBWYWNjaW5hdGlvbiIKCWFuZAoJIk9uZSBNTVIgVmFjY2luYXRpb24iCglhbmQKCSJPbmUgVmFyIFZhY2NpbmF0aW9uIgoJYW5kCgkiT25lIE1NUlYgVmFjY2luYXRpb24iCglhbmQKCSJPbmUgVGRhcF9JUFYgVmFjY2luYXRpb24iCglhbmQKCSJPbmUgSEIgVmFjY2luYXRpb24iCglhbmQKCSJPbmUgTWVuX0NfQUNZVyBWYWNjaW5hdGlvbiIKCWFuZAoJIk9uZSBIUFZfOSBWYWNjaW5hdGlvbiIKCWFuZAoJIk9uZSBIWiBWYWNjaW5hdGlvbiIKCWFuZAoJIk9uZSBQbmV1X1BfMjMgVmFjY2luYXRpb24iCglhbmQKCSJUd28gVGRhcCBWYWNjaW5hdGlvbnMiCglhbmQKCSJPbmUgVGQgVmFjY2luYXRpb24iCgpkZWZpbmUgIk1hbGUgRnVsbHkgVmFjY2luYXRlZCI6CglpZiAoVG9kYXkoKSBkdXJpbmcgIkZhbGwgUGVyaW9kIikgdGhlbgoJCShQYXRpZW50LmdlbmRlciA9ICdtYWxlJykgYW5kICJGdWxseSBSb3V0aW5lIFZhY2NpbmF0ZWQiIGFuZCAiU2Vhc29uYWwgSW5mIFZhY2NpbmF0ZWQiCgllbHNlCgkJKFBhdGllbnQuZ2VuZGVyID0gJ21hbGUnKSBhbmQgIkZ1bGx5IFJvdXRpbmUgVmFjY2luYXRlZCIKCmRlZmluZSAiTm9ucHJlZ25hbnQgRmVtYWxlIEZ1bGx5IFZhY2NpbmF0ZWQiOgoJaWYgKFRvZGF5KCkgZHVyaW5nICJGYWxsIFBlcmlvZCIpIHRoZW4KCQkoUGF0aWVudC5nZW5kZXIgPSAnZmVtYWxlJykgYW5kIG5vdCBleGlzdHMoIlByZWduYW50RmVtYWxlIikgYW5kICJGdWxseSBSb3V0aW5lIFZhY2NpbmF0ZWQiIGFuZCAiU2Vhc29uYWwgSW5mIFZhY2NpbmF0ZWQiCgllbHNlCgkJKFBhdGllbnQuZ2VuZGVyID0gJ2ZlbWFsZScpIGFuZCBub3QgZXhpc3RzKCJQcmVnbmFudEZlbWFsZSIpIGFuZCAiRnVsbHkgUm91dGluZSBWYWNjaW5hdGVkIgoKZGVmaW5lICJQcmVnbmFudCBGZW1hbGUgSWRlYWxseSBGdWxseSBWYWNjaW5hdGVkIjoKCWlmIChUb2RheSgpIGR1cmluZyAiRmFsbCBQZXJpb2QiKSB0aGVuCgkJKFBhdGllbnQuZ2VuZGVyID0gJ2ZlbWFsZScpIGFuZCBleGlzdHMoIlByZWduYW50RmVtYWxlIikgYW5kICJGdWxseSBSb3V0aW5lIFZhY2NpbmF0ZWQiIGFuZCAiT25lIGRvc2UgVGRhcCBpbiBjdXJyZW50IHByZWduYW5jeSIgYW5kICJTZWFzb25hbCBJbmYgVmFjY2luYXRlZCIKCWVsc2UKCQkoUGF0aWVudC5nZW5kZXIgPSAnZmVtYWxlJykgYW5kIGV4aXN0cygiUHJlZ25hbnRGZW1hbGUiKSBhbmQgIkZ1bGx5IFJvdXRpbmUgVmFjY2luYXRlZCIgYW5kICJPbmUgZG9zZSBUZGFwIGluIGN1cnJlbnQgcHJlZ25hbmN5IgoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgovLyB0ZXN0IHBhdGllbnQgYXQgbWluaW11bSgxKToKZGVmaW5lICJEVGFQX0lQVl9IaWIgVmFjY2luYXRpb24gMiBNb250aHMiOgoJW0ltbXVuaXphdGlvbjogIkRUYVBfSVBWX0hpYiBWYWNjaW5lIl0gRFRhUF9JUFZfSGliVmFjY2luYXRpb24KIAkJd2l0aCAiUXVhbGlmeWluZyBFbmNvdW50ZXJzIER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiIFF1YWxpZnlpbmdFbmNvdW50ZXIKICAgICAgCQlzdWNoIHRoYXQgKAoJCQkJCQlBZ2VJbk1vbnRoc0F0KEZISVJIZWxwZXJzLlRvRGF0ZVRpbWUoRFRhUF9JUFZfSGliVmFjY2luYXRpb24ub2NjdXJyZW5jZSkpIDw9IDIKCQkJCQkpCgkJd2hlcmUgRFRhUF9JUFZfSGliVmFjY2luYXRpb24uc3RhdHVzICA9ICdjb21wbGV0ZWQnCgovLyB0ZXN0IHBhdGllbnQgYXQgbWluaW11bSgyKToKZGVmaW5lICJEVGFQX0lQVl9IaWIgVmFjY2luYXRpb24gNCBNb250aHMiOgoJW0ltbXVuaXphdGlvbjogIkRUYVBfSVBWX0hpYiBWYWNjaW5lIl0gRFRhUF9JUFZfSGliVmFjY2luYXRpb24KIAkJd2l0aCAiUXVhbGlmeWluZyBFbmNvdW50ZXJzIER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiIFF1YWxpZnlpbmdFbmNvdW50ZXIKICAgICAgCQlzdWNoIHRoYXQgKAoJCQkJCQkoQWdlSW5Nb250aHNBdChGSElSSGVscGVycy5Ub0RhdGVUaW1lKERUYVBfSVBWX0hpYlZhY2NpbmF0aW9uLm9jY3VycmVuY2UpKSA+IDIpCgkJCQkJCWFuZAoJCQkJCQkoQWdlSW5Nb250aHNBdChGSElSSGVscGVycy5Ub0RhdGVUaW1lKERUYVBfSVBWX0hpYlZhY2NpbmF0aW9uLm9jY3VycmVuY2UpKSA8PSA0KQoJCQkJCSkKCQl3aGVyZSBEVGFQX0lQVl9IaWJWYWNjaW5hdGlvbi5zdGF0dXMgID0gJ2NvbXBsZXRlZCcKCi8vIHRlc3QgcGF0aWVudCBhdCBtaW5pbXVtKDMpOgpkZWZpbmUgIkRUYVBfSVBWX0hpYiBWYWNjaW5hdGlvbiA2IE1vbnRocyI6CglbSW1tdW5pemF0aW9uOiAiRFRhUF9JUFZfSGliIFZhY2NpbmUiXSBEVGFQX0lQVl9IaWJWYWNjaW5hdGlvbgogCQl3aXRoICJRdWFsaWZ5aW5nIEVuY291bnRlcnMgRHVyaW5nIE1lYXN1cmVtZW50IFBlcmlvZCIgUXVhbGlmeWluZ0VuY291bnRlcgogICAgICAJCXN1Y2ggdGhhdCAoCgkJCQkJCShBZ2VJbk1vbnRoc0F0KEZISVJIZWxwZXJzLlRvRGF0ZVRpbWUoRFRhUF9JUFZfSGliVmFjY2luYXRpb24ub2NjdXJyZW5jZSkpID4gNCkKCQkJCQkJCWFuZAoJCQkJCQkoQWdlSW5Nb250aHNBdChGSElSSGVscGVycy5Ub0RhdGVUaW1lKERUYVBfSVBWX0hpYlZhY2NpbmF0aW9uLm9jY3VycmVuY2UpKSA8PSA2KQoJCQkJCSkKCQl3aGVyZSBEVGFQX0lQVl9IaWJWYWNjaW5hdGlvbi5zdGF0dXMgID0gJ2NvbXBsZXRlZCcKCi8vIHRlc3QgcGF0aWVudCBhdCBtaW5pbXVtKDQpOgpkZWZpbmUgIkRUYVBfSVBWX0hpYiBWYWNjaW5hdGlvbiAxOCBNb250aHMiOgoJW0ltbXVuaXphdGlvbjogIkRUYVBfSVBWX0hpYiBWYWNjaW5lIl0gRFRhUF9JUFZfSGliVmFjY2luYXRpb24KIAkJd2l0aCAiUXVhbGlmeWluZyBFbmNvdW50ZXJzIER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiIFF1YWxpZnlpbmdFbmNvdW50ZXIKICAgICAgCQlzdWNoIHRoYXQgKAoJCQkJCQkoQWdlSW5Nb250aHNBdChGSElSSGVscGVycy5Ub0RhdGVUaW1lKERUYVBfSVBWX0hpYlZhY2NpbmF0aW9uLm9jY3VycmVuY2UpKSA+IDYpCgkJCQkJCWFuZAoJCQkJCQkoQWdlSW5Nb250aHNBdChGSElSSGVscGVycy5Ub0RhdGVUaW1lKERUYVBfSVBWX0hpYlZhY2NpbmF0aW9uLm9jY3VycmVuY2UpKSA8PSAxOCkKCQkJCQkpCgkJd2hlcmUgRFRhUF9JUFZfSGliVmFjY2luYXRpb24uc3RhdHVzICA9ICdjb21wbGV0ZWQnCgovLyB0ZXN0IHBhdGllbnQgYXQgbWluaW11bSg1KToKZGVmaW5lICJGb3VyIERUYVBfSVBWX0hpYiBWYWNjaW5hdGlvbnMiOgoJKGV4aXN0cygiRFRhUF9JUFZfSGliIFZhY2NpbmF0aW9uIDIgTW9udGhzIikgb3IgKEFnZUluTW9udGhzQXQoZGF0ZSBmcm9tIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPCAyKSkKCWFuZAoJKGV4aXN0cygiRFRhUF9JUFZfSGliIFZhY2NpbmF0aW9uIDQgTW9udGhzIikgb3IgKEFnZUluTW9udGhzQXQoZGF0ZSBmcm9tIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPCA0KSkKCWFuZAoJKGV4aXN0cygiRFRhUF9JUFZfSGliIFZhY2NpbmF0aW9uIDYgTW9udGhzIikgb3IgKEFnZUluTW9udGhzQXQoZGF0ZSBmcm9tIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPCA2KSkKCWFuZAoJKGV4aXN0cygiRFRhUF9JUFZfSGliIFZhY2NpbmF0aW9uIDE4IE1vbnRocyIpIG9yIChBZ2VJbk1vbnRoc0F0KGRhdGUgZnJvbSBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDwgMTgpKQoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgovLyB0ZXN0IHBhdGllbnQgYXQgbWluaW11bSg2KToKZGVmaW5lICJQbmV1X0NfMTMgVmFjY2luYXRpb24gMiBNb250aHMiOgoJW0ltbXVuaXphdGlvbjogIlBuZXVfQ18xMyBWYWNjaW5lIl0gUG5ldV9DXzEzVmFjY2luYXRpb24KIAkJd2l0aCAiUXVhbGlmeWluZyBFbmNvdW50ZXJzIER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiIFF1YWxpZnlpbmdFbmNvdW50ZXIKICAgICAgCQlzdWNoIHRoYXQgKAoJCQkJCQlBZ2VJbk1vbnRoc0F0KEZISVJIZWxwZXJzLlRvRGF0ZVRpbWUoUG5ldV9DXzEzVmFjY2luYXRpb24ub2NjdXJyZW5jZSkpIDw9IDIKCQkJCQkpCgkJd2hlcmUgUG5ldV9DXzEzVmFjY2luYXRpb24uc3RhdHVzICA9ICdjb21wbGV0ZWQnCgovLyB0ZXN0IHBhdGllbnQgYXQgbWluaW11bSg3KToKZGVmaW5lICJQbmV1X0NfMTMgVmFjY2luYXRpb24gNCBNb250aHMiOgoJW0ltbXVuaXphdGlvbjogIlBuZXVfQ18xMyBWYWNjaW5lIl0gUG5ldV9DXzEzVmFjY2luYXRpb24KIAkJd2l0aCAiUXVhbGlmeWluZyBFbmNvdW50ZXJzIER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiIFF1YWxpZnlpbmdFbmNvdW50ZXIKICAgICAgCQlzdWNoIHRoYXQgKAoJCQkJCQkoQWdlSW5Nb250aHNBdChGSElSSGVscGVycy5Ub0RhdGVUaW1lKFBuZXVfQ18xM1ZhY2NpbmF0aW9uLm9jY3VycmVuY2UpKSA+IDIpCgkJCQkJCWFuZAoJCQkJCQkoQWdlSW5Nb250aHNBdChGSElSSGVscGVycy5Ub0RhdGVUaW1lKFBuZXVfQ18xM1ZhY2NpbmF0aW9uLm9jY3VycmVuY2UpKSA8PSA0KQoJCQkJCSkKCQl3aGVyZSBQbmV1X0NfMTNWYWNjaW5hdGlvbi5zdGF0dXMgID0gJ2NvbXBsZXRlZCcKCi8vIHRlc3QgcGF0aWVudCBhdCBtaW5pbXVtKDgpOgpkZWZpbmUgIlBuZXVfQ18xMyBWYWNjaW5hdGlvbiAxMiBNb250aHMiOgoJW0ltbXVuaXphdGlvbjogIlBuZXVfQ18xMyBWYWNjaW5lIl0gUG5ldV9DXzEzVmFjY2luYXRpb24KIAkJd2l0aCAiUXVhbGlmeWluZyBFbmNvdW50ZXJzIER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiIFF1YWxpZnlpbmdFbmNvdW50ZXIKICAgICAgCQlzdWNoIHRoYXQgKAoJCQkJCQkoQWdlSW5Nb250aHNBdChGSElSSGVscGVycy5Ub0RhdGVUaW1lKFBuZXVfQ18xM1ZhY2NpbmF0aW9uLm9jY3VycmVuY2UpKSA+IDQpCgkJCQkJCWFuZAoJCQkJCQkoQWdlSW5ZZWFyc0F0KEZISVJIZWxwZXJzLlRvRGF0ZVRpbWUoUG5ldV9DXzEzVmFjY2luYXRpb24ub2NjdXJyZW5jZSkpIDw9IDEpCgkJCQkJKQoJCXdoZXJlIFBuZXVfQ18xM1ZhY2NpbmF0aW9uLnN0YXR1cyAgPSAnY29tcGxldGVkJwoKCi8vIHRlc3QgcGF0aWVudCBhdCBtaW5pbXVtKDkpOgpkZWZpbmUgIlRocmVlIFBuZXVfQ18xMyBWYWNjaW5hdGlvbnMiOgoJKGV4aXN0cygiUG5ldV9DXzEzIFZhY2NpbmF0aW9uIDIgTW9udGhzIikgb3IgQWdlSW5Nb250aHNBdChkYXRlIGZyb20gZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiKSA8IDIpCglhbmQKCShleGlzdHMoIlBuZXVfQ18xMyBWYWNjaW5hdGlvbiA0IE1vbnRocyIpIG9yIChBZ2VJbk1vbnRoc0F0KGRhdGUgZnJvbSBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDwgNCkpCglhbmQKCShleGlzdHMoIlBuZXVfQ18xMyBWYWNjaW5hdGlvbiAxMiBNb250aHMiKSBvciAoQWdlSW5Nb250aHNBdChkYXRlIGZyb20gZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiKSA8IDEyKSkKCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKLy8gdGVzdCBwYXRpZW50IGF0IG1pbmltdW0oMTApOgpkZWZpbmUgIlJvdF8xIFZhY2NpbmF0aW9uIDIgTW9udGhzIjoKCVtJbW11bml6YXRpb246ICJSb3RfMSBWYWNjaW5lIl0gUm90XzFWYWNjaW5hdGlvbgogCQl3aXRoICJRdWFsaWZ5aW5nIEVuY291bnRlcnMgRHVyaW5nIE1lYXN1cmVtZW50IFBlcmlvZCIgUXVhbGlmeWluZ0VuY291bnRlcgogICAgICAJCXN1Y2ggdGhhdCAoCgkJCQkJCUFnZUluTW9udGhzQXQoRkhJUkhlbHBlcnMuVG9EYXRlVGltZShSb3RfMVZhY2NpbmF0aW9uLm9jY3VycmVuY2UpKSA8PSAyCgkJCQkJKQoJCXdoZXJlIFJvdF8xVmFjY2luYXRpb24uc3RhdHVzICA9ICdjb21wbGV0ZWQnCgovLyB0ZXN0IHBhdGllbnQgYXQgbWluaW11bSgxMSk6CmRlZmluZSAiUm90XzEgVmFjY2luYXRpb24gNCBNb250aHMiOgoJW0ltbXVuaXphdGlvbjogIlJvdF8xIFZhY2NpbmUiXSBSb3RfMVZhY2NpbmF0aW9uCiAJCXdpdGggIlF1YWxpZnlpbmcgRW5jb3VudGVycyBEdXJpbmcgTWVhc3VyZW1lbnQgUGVyaW9kIiBRdWFsaWZ5aW5nRW5jb3VudGVyCiAgICAgIAkJc3VjaCB0aGF0ICgKCQkJCQkJKEFnZUluTW9udGhzQXQoRkhJUkhlbHBlcnMuVG9EYXRlVGltZShSb3RfMVZhY2NpbmF0aW9uLm9jY3VycmVuY2UpKSA+IDIpCgkJCQkJCQlhbmQgKEFnZUluTW9udGhzQXQoRkhJUkhlbHBlcnMuVG9EYXRlVGltZShSb3RfMVZhY2NpbmF0aW9uLm9jY3VycmVuY2UpKSA8PSA0KQoJCQkJCSkKCQl3aGVyZSBSb3RfMVZhY2NpbmF0aW9uLnN0YXR1cyAgPSAnY29tcGxldGVkJwoKCi8vIHRlc3QgcGF0aWVudCBhdCBtaW5pbXVtKDEyKToKZGVmaW5lICJUd28gUm90XzEgVmFjY2luYXRpb25zIjoKCShleGlzdHMoIlJvdF8xIFZhY2NpbmF0aW9uIDIgTW9udGhzIikgb3IgQWdlSW5Nb250aHNBdChkYXRlIGZyb20gZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiKSA8IDIpCglhbmQKCShleGlzdHMoIlJvdF8xIFZhY2NpbmF0aW9uIDQgTW9udGhzIikgb3IgKEFnZUluTW9udGhzQXQoZGF0ZSBmcm9tIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPCA0KSkKCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKLy8gdGVzdCBwYXRpZW50IGF0IG1pbmltdW0oMTMpOgpkZWZpbmUgIk1lbl9DX0MgVmFjY2luYXRpb24gMSBZZWFyIjoKCVtJbW11bml6YXRpb246ICJNZW5fQ19DIFZhY2NpbmUiXSBNZW5fQ19DVmFjY2luYXRpb24KIAkJd2l0aCAiUXVhbGlmeWluZyBFbmNvdW50ZXJzIER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiIFF1YWxpZnlpbmdFbmNvdW50ZXIKICAgICAgCQlzdWNoIHRoYXQgKAoJCQkJCQlBZ2VJblllYXJzQXQoRkhJUkhlbHBlcnMuVG9EYXRlVGltZShNZW5fQ19DVmFjY2luYXRpb24ub2NjdXJyZW5jZSkpIDw9IDEKCQkJCQkpCgkJd2hlcmUJTWVuX0NfQ1ZhY2NpbmF0aW9uLnN0YXR1cyAgPSAnY29tcGxldGVkJwoKLy8gdGVzdCBwYXRpZW50IGF0IG1pbmltdW06CmRlZmluZSAiT25lIE1lbl9DX0MgVmFjY2luYXRpb24iOgoJKGV4aXN0cygiTWVuX0NfQyBWYWNjaW5hdGlvbiAxIFllYXIiKSBvciAoQWdlSW5ZZWFyc0F0KGRhdGUgZnJvbSBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpICA8IDEpKQoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgovLyB0ZXN0IHBhdGllbnQgYXQgbWluaW11bSgxNCk6CmRlZmluZSAiTU1SIFZhY2NpbmF0aW9uIDEgWWVhciI6CglbSW1tdW5pemF0aW9uOiAiTU1SIFZhY2NpbmUiXSBNTVJWYWNjaW5hdGlvbgogCQl3aXRoICJRdWFsaWZ5aW5nIEVuY291bnRlcnMgRHVyaW5nIE1lYXN1cmVtZW50IFBlcmlvZCIgUXVhbGlmeWluZ0VuY291bnRlcgogICAgICAJCXN1Y2ggdGhhdCAoCgkJCQkJCUFnZUluWWVhcnNBdChGSElSSGVscGVycy5Ub0RhdGVUaW1lKE1NUlZhY2NpbmF0aW9uLm9jY3VycmVuY2UpKSA8PSAxCgkJCQkJKQoJCQl3aGVyZSBNTVJWYWNjaW5hdGlvbi5zdGF0dXMgID0gJ2NvbXBsZXRlZCcKCmRlZmluZSAiT25lIE1NUiBWYWNjaW5hdGlvbiI6CgkoZXhpc3RzKCJNTVIgVmFjY2luYXRpb24gMSBZZWFyIikgb3IgKEFnZUluWWVhcnNBdChkYXRlIGZyb20gZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiKSAgPCAxKSkKCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKLy8gdGVzdCBwYXRpZW50IGF0IG1pbmltdW0oMTUpOgpkZWZpbmUgIlZhciBWYWNjaW5hdGlvbiAxNSBNb250aHMiOgoJW0ltbXVuaXphdGlvbjogIlZhciBWYWNjaW5lIl0gVmFyVmFjY2luYXRpb24KIAkJd2l0aCAiUXVhbGlmeWluZyBFbmNvdW50ZXJzIER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiIFF1YWxpZnlpbmdFbmNvdW50ZXIKICAgICAgCQlzdWNoIHRoYXQgKAoJCQkJCQlBZ2VJbk1vbnRoc0F0KEZISVJIZWxwZXJzLlRvRGF0ZVRpbWUoVmFyVmFjY2luYXRpb24ub2NjdXJyZW5jZSkpIDw9IDE1CgkJCQkJKQoJCXdoZXJlIFZhclZhY2NpbmF0aW9uLnN0YXR1cyAgPSAnY29tcGxldGVkJwoKLy8gdGVzdCBwYXRpZW50IGF0IG1pbmltdW0oMTYpOgpkZWZpbmUgIk9uZSBWYXIgVmFjY2luYXRpb24iOgoJKGV4aXN0cygiVmFyIFZhY2NpbmF0aW9uIDE1IE1vbnRocyIpIG9yIChBZ2VJbk1vbnRoc0F0KGRhdGUgZnJvbSBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDwgMTUpKQoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgovLyB0ZXN0IHBhdGllbnQgYXQgbWluaW11bSgxNyk6CmRlZmluZSAiTU1SViBWYWNjaW5hdGlvbiA0IFllYXJzIjoKCVtJbW11bml6YXRpb246ICJNTVJWIFZhY2NpbmUiXSBNTVJWVmFjY2luYXRpb24KIAkJd2l0aCAiUXVhbGlmeWluZyBFbmNvdW50ZXJzIER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiIFF1YWxpZnlpbmdFbmNvdW50ZXIKICAgICAgCQlzdWNoIHRoYXQgKAoJCQkJCQlBZ2VJblllYXJzQXQoRkhJUkhlbHBlcnMuVG9EYXRlVGltZShNTVJWVmFjY2luYXRpb24ub2NjdXJyZW5jZSkpIDw9IDQKCQkJCQkpCgkJCXdoZXJlIE1NUlZWYWNjaW5hdGlvbi5zdGF0dXMgID0gJ2NvbXBsZXRlZCcKCi8vIHRlc3QgcGF0aWVudCBhdCBtaW5pbXVtKDE4KToKZGVmaW5lICJPbmUgTU1SViBWYWNjaW5hdGlvbiI6CgkoZXhpc3RzKCJNTVJWIFZhY2NpbmF0aW9uIDQgWWVhcnMiKSBvciAoQWdlSW5ZZWFyc0F0KGRhdGUgZnJvbSBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDwgNCkpCgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCi8vIHRlc3QgcGF0aWVudCBhdCBtaW5pbXVtKDE5KToKZGVmaW5lICJUZGFwX0lQViBWYWNjaW5hdGlvbiA0IFllYXJzIjoKCVtJbW11bml6YXRpb246ICJUZGFwX0lQViBWYWNjaW5lIl0gVGRhcF9JUFZWYWNjaW5hdGlvbgogCQl3aXRoICJRdWFsaWZ5aW5nIEVuY291bnRlcnMgRHVyaW5nIE1lYXN1cmVtZW50IFBlcmlvZCIgUXVhbGlmeWluZ0VuY291bnRlcgogICAgICAJCXN1Y2ggdGhhdCAoCgkJCQkJCUFnZUluWWVhcnNBdChGSElSSGVscGVycy5Ub0RhdGVUaW1lKFRkYXBfSVBWVmFjY2luYXRpb24ub2NjdXJyZW5jZSkpIDw9IDQKCQkJCQkpCgkJd2hlcmUJVGRhcF9JUFZWYWNjaW5hdGlvbi5zdGF0dXMgID0gJ2NvbXBsZXRlZCcKCi8vIHRlc3QgcGF0aWVudCBhdCBtaW5pbXVtKDIwKToKZGVmaW5lICJPbmUgVGRhcF9JUFYgVmFjY2luYXRpb24iOgoJKGV4aXN0cygiVGRhcF9JUFYgVmFjY2luYXRpb24gNCBZZWFycyIpIG9yIChBZ2VJblllYXJzQXQoZGF0ZSBmcm9tIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPCA0KSkKCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKLy8gdGVzdCBwYXRpZW50IGF0IG1pbmltdW0oMjEpOgpkZWZpbmUgIkhCIFZhY2NpbmF0aW9uIEdyYWRlIDciOgoJW0ltbXVuaXphdGlvbjogIkhCIFZhY2NpbmUiXSBIQlZhY2NpbmF0aW9uCiAJCXdpdGggIlF1YWxpZnlpbmcgRW5jb3VudGVycyBEdXJpbmcgTWVhc3VyZW1lbnQgUGVyaW9kIiBRdWFsaWZ5aW5nRW5jb3VudGVyCiAgICAgIAkJc3VjaCB0aGF0ICgKCQkJCQkJQWdlSW5ZZWFyc0F0KEZISVJIZWxwZXJzLlRvRGF0ZVRpbWUoSEJWYWNjaW5hdGlvbi5vY2N1cnJlbmNlKSkgPD0gMTIKCQkJCQkpCgkJd2hlcmUgSEJWYWNjaW5hdGlvbi5zdGF0dXMgID0gJ2NvbXBsZXRlZCcKCi8vIHRlc3QgcGF0aWVudCBhdCBtaW5pbXVtKDIyKToKZGVmaW5lICJPbmUgSEIgVmFjY2luYXRpb24iOgoJKGV4aXN0cygiSEIgVmFjY2luYXRpb24gR3JhZGUgNyIpIG9yIChBZ2VJblllYXJzQXQoZGF0ZSBmcm9tIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPCAxMikpCgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCgovLyB0ZXN0IHBhdGllbnQgYXQgbWluaW11bSgyMyk6CmRlZmluZSAiTWVuX0NfQUNZVyBWYWNjaW5hdGlvbiBHcmFkZSA3IjoKCVtJbW11bml6YXRpb246ICJNZW5fQ19BQ1lXIFZhY2NpbmUiXSBNZW5fQ19BQ1lXVmFjY2luYXRpb24KIAkJd2l0aCAiUXVhbGlmeWluZyBFbmNvdW50ZXJzIER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiIFF1YWxpZnlpbmdFbmNvdW50ZXIKICAgICAgCQlzdWNoIHRoYXQgKAoJCQkJCQlBZ2VJblllYXJzQXQoRkhJUkhlbHBlcnMuVG9EYXRlVGltZShNZW5fQ19BQ1lXVmFjY2luYXRpb24ub2NjdXJyZW5jZSkpIDw9IDEyCgkJCQkJKQoJCXdoZXJlCU1lbl9DX0FDWVdWYWNjaW5hdGlvbi5zdGF0dXMgID0gJ2NvbXBsZXRlZCcKCi8vIHRlc3QgcGF0aWVudCBhdCBtaW5pbXVtKDI0KToKZGVmaW5lICJPbmUgTWVuX0NfQUNZVyBWYWNjaW5hdGlvbiI6CgkoZXhpc3RzKCJNZW5fQ19BQ1lXIFZhY2NpbmF0aW9uIEdyYWRlIDciKSBvciAoQWdlSW5ZZWFyc0F0KGRhdGUgZnJvbSBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDwgMTIpKQoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgoKLy8gdGVzdCBwYXRpZW50IGF0IG1pbmltdW0oMjUpOgpkZWZpbmUgIkhQVl85IFZhY2NpbmF0aW9uIEdyYWRlIDciOgoJW0ltbXVuaXphdGlvbjogIkhQVl85IFZhY2NpbmUiXSBIUFZfOVZhY2NpbmF0aW9uCiAJCXdpdGggIlF1YWxpZnlpbmcgRW5jb3VudGVycyBEdXJpbmcgTWVhc3VyZW1lbnQgUGVyaW9kIiBRdWFsaWZ5aW5nRW5jb3VudGVyCiAgICAgIAkJc3VjaCB0aGF0ICgKCQkJCQkJQWdlSW5ZZWFyc0F0KEZISVJIZWxwZXJzLlRvRGF0ZVRpbWUoSFBWXzlWYWNjaW5hdGlvbi5vY2N1cnJlbmNlKSkgPD0gMTIKCQkJCQkpCgkJd2hlcmUJSFBWXzlWYWNjaW5hdGlvbi5zdGF0dXMgID0gJ2NvbXBsZXRlZCcKCi8vIHRlc3QgcGF0aWVudCBhdCBtaW5pbXVtKDI2KToKZGVmaW5lICJPbmUgSFBWXzkgVmFjY2luYXRpb24iOgoJKGV4aXN0cygiSFBWXzkgVmFjY2luYXRpb24gR3JhZGUgNyIpIG9yIChBZ2VJblllYXJzQXQoZGF0ZSBmcm9tIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPCAxMikpCgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCi8vLyB0ZXN0IHBhdGllbnQgYXQgbWluaW11bSgyNyk6CmRlZmluZSAiVGRhcCBWYWNjaW5hdGlvbiAxNCBZZWFycyI6CglbSW1tdW5pemF0aW9uOiAiVGRhcCBWYWNjaW5lIl0gVGRhcFZhY2NpbmF0aW9uCiAJCXdpdGggIlF1YWxpZnlpbmcgRW5jb3VudGVycyBEdXJpbmcgTWVhc3VyZW1lbnQgUGVyaW9kIiBRdWFsaWZ5aW5nRW5jb3VudGVyCiAgICAgIAkJc3VjaCB0aGF0ICgKCQkJCQkJKEFnZUluWWVhcnNBdChGSElSSGVscGVycy5Ub0RhdGVUaW1lKFRkYXBWYWNjaW5hdGlvbi5vY2N1cnJlbmNlKSkgPj0gMTQpCgkJCQkJCQlhbmQgKEFnZUluWWVhcnNBdChGSElSSGVscGVycy5Ub0RhdGVUaW1lKFRkYXBWYWNjaW5hdGlvbi5vY2N1cnJlbmNlKSkgPCAyNCkKCQkJCQkpCgkJd2hlcmUgVGRhcFZhY2NpbmF0aW9uLnN0YXR1cyAgPSAnY29tcGxldGVkJwoKCi8vIHRlc3QgcGF0aWVudCBhdCBtaW5pbXVtKDI4KToKZGVmaW5lICJUZGFwIFZhY2NpbmF0aW9uIDI0IFllYXJzIjoKCVtJbW11bml6YXRpb246ICJUZGFwIFZhY2NpbmUiXSBUZGFwVmFjY2luYXRpb24KIAkJd2l0aCAiUXVhbGlmeWluZyBFbmNvdW50ZXJzIER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiIFF1YWxpZnlpbmdFbmNvdW50ZXIKICAgICAgCQlzdWNoIHRoYXQgKAoJCQkJCQkJKEFnZUluWWVhcnNBdChGSElSSGVscGVycy5Ub0RhdGVUaW1lKFRkYXBWYWNjaW5hdGlvbi5vY2N1cnJlbmNlKSkgPj0gMjQpCgkJCQkJKQoJCXdoZXJlCVRkYXBWYWNjaW5hdGlvbi5zdGF0dXMgID0gJ2NvbXBsZXRlZCcKCgovLyB0ZXN0IHBhdGllbnQgYXQgbWluaW11bSgyOSk6CmRlZmluZSAiVHdvIFRkYXAgVmFjY2luYXRpb25zIjoKCShleGlzdHMoIlRkYXAgVmFjY2luYXRpb24gMTQgWWVhcnMiKSBvciBBZ2VJblllYXJzQXQoZGF0ZSBmcm9tIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPCAxNCkKCWFuZAoJKGV4aXN0cygiVGRhcCBWYWNjaW5hdGlvbiAyNCBZZWFycyIpIG9yIChBZ2VJblllYXJzQXQoZGF0ZSBmcm9tIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPCAyNCkpCgovKgpkZWZpbmUgIlRkYXAgVmFjY2luYXRpb24gaW4gcHJlZ25hbmN5IjoKCVtPYnNlcnZhdGlvbjogIlByZWduYW5jeSBTdGF0dXMiXSBQcmVnbmFuY3lWYWxpZGF0aW9uCgkJd2l0aCAiUXVhbGlmeWluZyBFbmNvdW50ZXJzIER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiIFF1YWxpZnlpbmdFbmNvdW50ZXIKCQkJc3VjaCB0aGF0ICgKCQkJCUdsb2JhbC4iTGF0ZXN0IihQcmVnbmFuY3lWYWxpZGF0aW9uLmVmZmVjdGl2ZSkgOSBtb250aHMgb3IgbGVzcyBvbiBvciBiZWZvcmUgZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiCgkJCQlhbmQKCQkJCSJQcmVnbmFudCIgaW4gRkhJUkhlbHBlcnMuVG9Db25jZXB0KFByZWduYW5jeVZhbGlkYXRpb24udmFsdWUpLmNvZGVzCgkJCSkKCQl3aGVyZSBQcmVnbmFuY3lWYWxpZGF0aW9uLnN0YXR1cyBpbiB7ICdmaW5hbCcsICdhbWVuZGVkJywgJ2NvcnJlY3RlZCcgfQoJCSAJYW5kIGV4aXN0cyhbSW1tdW5pemF0aW9uOiAiVGRhcCBWYWNjaW5lIl0gVGRhcFZhY2NpbmF0aW9uCiAJCQkJCXdpdGggIlF1YWxpZnlpbmcgRW5jb3VudGVycyBEdXJpbmcgTWVhc3VyZW1lbnQgUGVyaW9kIiBRdWFsaWZ5aW5nRW5jb3VuY2gKCQkJCQkJc3VjaCB0aGF0ICgKCQkJCQkJCUZISVJIZWxwZXJzLlRvRGF0ZVRpbWUoVGRhcFZhY2NpbmF0aW9uLm9jY3VycmVuY2UpIDkgbW9udGhzIG9yIGxlc3Mgb24gb3IgYmVmb3JlIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIgoJCQkJCQkpCgkJCQkJd2hlcmUgVGRhcFZhY2NpbmF0aW9uLnN0YXR1cyAgPSAnY29tcGxldGVkJwoJCQkpCiovCgovLyB0ZXN0IHBhdGllbnQgYXQgbWluaW11bSgzMCk6Ci8qCmRlZmluZSAiUHJlZ25hbnRGZW1hbGUiOgoJW09ic2VydmF0aW9uOiAiUHJlZ25hbmN5IFN0YXR1cyJdIFByZWduYW5jeVZhbGlkYXRpb24KCQl3aXRoICJRdWFsaWZ5aW5nIEVuY291bnRlcnMgRHVyaW5nIE1lYXN1cmVtZW50IFBlcmlvZCIgUXVhbGlmeWluZ0VuY291bnRlcgoJCQlzdWNoIHRoYXQgKAoJCQkJKEdsb2JhbC4iTGF0ZXN0IihQcmVnbmFuY3lWYWxpZGF0aW9uLmVmZmVjdGl2ZSkgOSBtb250aHMgb3IgbGVzcyBvbiBvciBiZWZvcmUgZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiKQoJCQkJYW5kCgkJCQkoIlByZWduYW50IiBpbiBGSElSSGVscGVycy5Ub0NvbmNlcHQoUHJlZ25hbmN5VmFsaWRhdGlvbi52YWx1ZSkuY29kZXMpCgkJCSkKCQl3aGVyZSBQcmVnbmFuY3lWYWxpZGF0aW9uLnN0YXR1cyBpbiB7ICdmaW5hbCcsICdhbWVuZGVkJywgJ2NvcnJlY3RlZCcgfQoqLwoKZGVmaW5lICJQcmVnbmFudEZlbWFsZSI6CglbT2JzZXJ2YXRpb246ICJQcmVnbmFuY3kgU3RhdHVzIl0gUHJlZ25hbmN5VmFsaWRhdGlvbgoJCQl3aGVyZSBQcmVnbmFuY3lWYWxpZGF0aW9uLnN0YXR1cyBpbiB7ICdmaW5hbCcsICdhbWVuZGVkJywgJ2NvcnJlY3RlZCcgfQoJCQkJYW5kIFByZWduYW5jeVZhbGlkYXRpb24udmFsdWUgaXMgbm90IG51bGwKICAgICAgICBhbmQgKCJMYXRlc3QiKFByZWduYW5jeVZhbGlkYXRpb24uZWZmZWN0aXZlKSA5IG1vbnRocyBvciBsZXNzIG9uIG9yIGJlZm9yZSBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpCgkJCQlhbmQJKCJQcmVnbmFudCIgaW4gRkhJUkhlbHBlcnMuVG9Db25jZXB0KFByZWduYW5jeVZhbGlkYXRpb24udmFsdWUpLmNvZGVzKQovKgpkZWZpbmUgIlRkYXAgVmFjY2luYXRpb24gaW4gcHJlZ25hbmN5IjoKCVtJbW11bml6YXRpb246ICJUZGFwIFZhY2NpbmUiXSBUZGFwVmFjY2luYXRpb24KIAkJd2l0aCAiUXVhbGlmeWluZyBFbmNvdW50ZXJzIER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiIFF1YWxpZnlpbmdFbmNvdW5jaAoJCQkJc3VjaCB0aGF0ICgKCQkJCQlGSElSSGVscGVycy5Ub0RhdGVUaW1lKFRkYXBWYWNjaW5hdGlvbi5vY2N1cnJlbmNlKSA5IG1vbnRocyBvciBsZXNzIG9uIG9yIGJlZm9yZSBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIKCQkJCSkKCXdoZXJlIFRkYXBWYWNjaW5hdGlvbi5zdGF0dXMgID0gJ2NvbXBsZXRlZCcKKi8KCmRlZmluZSAiVEVTVCI6CgkvL1tPYnNlcnZhdGlvbjogIlByZWduYW5jeSBTdGF0dXMiXSBQcmVnbmFuY3lWYWxpZGF0aW9uCglbT2JzZXJ2YXRpb246ICJXZWVrcyBvZiBHZXN0YXRpb24iXSBHZXN0YXRpb25WYWxpZGF0aW9uCgkJd2hlcmUgRkhJUkhlbHBlcnMuVG9RdWFudGl0eShHZXN0YXRpb25WYWxpZGF0aW9uLnZhbHVlKSBiZXR3ZWVuIDI3ICd3ZWVrJyBhbmQgMzIgJ3dlZWsnCgkJLy9yZXR1cm4gRkhJUkhlbHBlcnMuVG9RdWFudGl0eShHZXN0YXRpb25WYWxpZGF0aW9uLnZhbHVlKQoKLy8gdGVzdCBwYXRpZW50IGF0IG1pbmltdW0oMzEpOgovKgpkZWZpbmUgIlRkYXAgVmFjY2luYXRpb24gaW4gcHJlZ25hbmN5IjoKCVtPYnNlcnZhdGlvbjogIldlZWtzIG9mIEdlc3RhdGlvbiJdIEdlc3RhdGlvblZhbGlkYXRpb24KCQl3aXRoICJRdWFsaWZ5aW5nIEVuY291bnRlcnMgRHVyaW5nIE1lYXN1cmVtZW50IFBlcmlvZCIgUXVhbGlmeWluZ0VuY291bnRlcgoJCQlzdWNoIHRoYXQgKAoJCQkJRkhJUkhlbHBlcnMuVG9RdWFudGl0eShHZXN0YXRpb25WYWxpZGF0aW9uLnZhbHVlKSBiZXR3ZWVuIDI3ICd3ZWVrJyBhbmQgMzIgJ3dlZWsnCgkJCSkKCQl3aGVyZQoJCQlHZXN0YXRpb25WYWxpZGF0aW9uLnN0YXR1cyBpbiB7ICdmaW5hbCcsICdhbWVuZGVkJywgJ2NvcnJlY3RlZCcgfQoJCSAJYW5kIGV4aXN0cyhbSW1tdW5pemF0aW9uOiAiVGRhcCBWYWNjaW5lIl0gVGRhcFZhY2NpbmF0aW9uCgkJCQl3aXRoICJRdWFsaWZ5aW5nIEVuY291bnRlcnMgRHVyaW5nIE1lYXN1cmVtZW50IFBlcmlvZCIgUXVhbGlmeWluZ0VuY291bmNoCgkJCQkJc3VjaCB0aGF0ICgKCQkJCQkJRkhJUkhlbHBlcnMuVG9EYXRlVGltZShUZGFwVmFjY2luYXRpb24ub2NjdXJyZW5jZSkgOSBtb250aHMgb3IgbGVzcyBvbiBvciBiZWZvcmUgZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiCgkJCQkJKQoJCQkJd2hlcmUgVGRhcFZhY2NpbmF0aW9uLnN0YXR1cyAgPSAnY29tcGxldGVkJwoJCQkpCiovCgpkZWZpbmUgIklkZWFsIEdlc3RhdGlvbiBpbiBwcmVnbmFuY3kiOgoJW09ic2VydmF0aW9uOiAiV2Vla3Mgb2YgR2VzdGF0aW9uIl0gR2VzdGF0aW9uVmFsaWRhdGlvbgoJCXdoZXJlCUdlc3RhdGlvblZhbGlkYXRpb24uc3RhdHVzIGluIHsgJ2ZpbmFsJywgJ2FtZW5kZWQnLCAnY29ycmVjdGVkJyB9CgkJCWFuZCBHZXN0YXRpb25WYWxpZGF0aW9uLnZhbHVlIGlzIG5vdCBudWxsCgkJCWFuZCAoIkxhdGVzdCIoR2VzdGF0aW9uVmFsaWRhdGlvbi5lZmZlY3RpdmUpIDkgbW9udGhzIG9yIGxlc3Mgb24gb3IgYmVmb3JlIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikKCQkJYW5kIEZISVJIZWxwZXJzLlRvUXVhbnRpdHkoR2VzdGF0aW9uVmFsaWRhdGlvbi52YWx1ZSkudmFsdWUgYmV0d2VlbiAyNyBhbmQgMzIKCgpkZWZpbmUgIlRkYXAgVmFjY2luYXRpb24gaW4gcHJlZ25hbmN5IjoKCVtJbW11bml6YXRpb246ICJUZGFwIFZhY2NpbmUiXSBUZGFwVmFjY2luYXRpb24KCQl3aGVyZQlUZGFwVmFjY2luYXRpb24uc3RhdHVzICA9ICdjb21wbGV0ZWQnCgkJCQlhbmQJVGRhcFZhY2NpbmF0aW9uLnZhY2NpbmVDb2RlIGlzIG5vdCBudWxsCgkJCQlhbmQgKCJMYXRlc3QiKFRkYXBWYWNjaW5hdGlvbi5vY2N1cnJlbmNlKSA5IG1vbnRocyBvciBsZXNzIG9uIG9yIGJlZm9yZSBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpCgovLyB0ZXN0IHBhdGllbnQgYXQgbWluaW11bSgzMik6CmRlZmluZSAiT25lIGRvc2UgVGRhcCBpbiBjdXJyZW50IHByZWduYW5jeSI6CglleGlzdHMoIklkZWFsIEdlc3RhdGlvbiBpbiBwcmVnbmFuY3kiKQoJYW5kCglleGlzdHMoIlRkYXAgVmFjY2luYXRpb24gaW4gcHJlZ25hbmN5IikKCi8vIHRlc3QgcGF0aWVudCBhdCBtaW5pbXVtKDMzKToKZGVmaW5lICJUZCBWYWNjaW5hdGlvbiAzNCBZZWFycyI6CglbSW1tdW5pemF0aW9uOiAiVGQgVmFjY2luZSJdIFRkVmFjY2luYXRpb24KIAkJd2l0aCAiUXVhbGlmeWluZyBFbmNvdW50ZXJzIER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiIFF1YWxpZnlpbmdFbmNvdW50ZXIKICAgICAgCQlzdWNoIHRoYXQgKAoJCQkJCQkoQWdlSW5ZZWFyc0F0KEZISVJIZWxwZXJzLlRvRGF0ZVRpbWUoVGRWYWNjaW5hdGlvbi5vY2N1cnJlbmNlKSkgPj0gMzQpCgkJCQkJCQlhbmQKCQkJCQkJKEZISVJIZWxwZXJzLlRvRGF0ZVRpbWUoVGRWYWNjaW5hdGlvbi5vY2N1cnJlbmNlKSBkdXJpbmcgSW50ZXJ2YWxbVG9kYXkoKSAtIDEwIHllYXJzLCBUb2RheSgpXSkKCQkJCQkpCgkJd2hlcmUgVGRWYWNjaW5hdGlvbi5zdGF0dXMgID0gJ2NvbXBsZXRlZCcKCi8vIHRlc3QgcGF0aWVudCBhdCBtaW5pbXVtKDM0KToKZGVmaW5lICJPbmUgVGQgVmFjY2luYXRpb24iOgoJKGV4aXN0cygiVGQgVmFjY2luYXRpb24gMzQgWWVhcnMiKSBvciAoQWdlSW5ZZWFyc0F0KGRhdGUgZnJvbSBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDwgMzQpKQoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgovLyB0ZXN0IHBhdGllbnQgYXQgbWluaW11bSgzNSk6CmRlZmluZSAiSFogVmFjY2luYXRpb24gWWVhciA2NSI6CglbSW1tdW5pemF0aW9uOiAiSFogVmFjY2luZSJdIEhaVmFjY2luYXRpb24KIAkJd2l0aCAiUXVhbGlmeWluZyBFbmNvdW50ZXJzIER1cmluZyBNZWFzdXJlbWVudCBQZXJpb2QiIFF1YWxpZnlpbmdFbmNvdW50ZXIKICAgICAgCQlzdWNoIHRoYXQgKAoJCQkJCQlBZ2VJblllYXJzQXQoRkhJUkhlbHBlcnMuVG9EYXRlVGltZShIWlZhY2NpbmF0aW9uLm9jY3VycmVuY2UpKSA+PSA2NQoJCQkJCSkKCQl3aGVyZSBIWlZhY2NpbmF0aW9uLnN0YXR1cyAgPSAnY29tcGxldGVkJwoKLy8gdGVzdCBwYXRpZW50IGF0IG1pbmltdW0oMzYpOgpkZWZpbmUgIk9uZSBIWiBWYWNjaW5hdGlvbiI6CgkoZXhpc3RzKCJIWiBWYWNjaW5hdGlvbiBZZWFyIDY1Iikgb3IgKEFnZUluWWVhcnNBdChkYXRlIGZyb20gZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiKSA8IDY1KSkKCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKLy9QbmV1X1BfMjMKLy8gdGVzdCBwYXRpZW50IGF0IG1pbmltdW0oMzcpOgpkZWZpbmUgIlBuZXVfUF8yMyBWYWNjaW5hdGlvbiBZZWFyIDY1IjoKCVtJbW11bml6YXRpb246ICJQbmV1X1BfMjMgVmFjY2luZSJdIFBuZXVfUF8yM1ZhY2NpbmF0aW9uCiAJCXdpdGggIlF1YWxpZnlpbmcgRW5jb3VudGVycyBEdXJpbmcgTWVhc3VyZW1lbnQgUGVyaW9kIiBRdWFsaWZ5aW5nRW5jb3VudGVyCiAgICAgIAkJc3VjaCB0aGF0ICgKCQkJCQkJQWdlSW5ZZWFyc0F0KEZISVJIZWxwZXJzLlRvRGF0ZVRpbWUoUG5ldV9QXzIzVmFjY2luYXRpb24ub2NjdXJyZW5jZSkpID49IDY1CgkJCQkJKQoJCXdoZXJlIFBuZXVfUF8yM1ZhY2NpbmF0aW9uLnN0YXR1cyAgPSAnY29tcGxldGVkJwoKLy8gdGVzdCBwYXRpZW50IGF0IG1pbmltdW0oMzgpOgpkZWZpbmUgIk9uZSBQbmV1X1BfMjMgVmFjY2luYXRpb24iOgoJKGV4aXN0cygiUG5ldV9QXzIzIFZhY2NpbmF0aW9uIFllYXIgNjUiKSBvciAoQWdlSW5ZZWFyc0F0KGRhdGUgZnJvbSBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIDwgNjUpKQoKLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCgovLyB0ZXN0IHBhdGllbnQgYXQgbWluaW11bSgzOSk6CmRlZmluZSAiSW5mIFZhY2NpbmF0aW9uIjoKCVtJbW11bml6YXRpb246ICJJbmYgVmFjY2luZSJdIEluZlZhY2NpbmF0aW9uCiAJCXdpdGggIlF1YWxpZnlpbmcgRW5jb3VudGVycyBEdXJpbmcgTWVhc3VyZW1lbnQgUGVyaW9kIiBRdWFsaWZ5aW5nRW5jb3VudGVyCiAgICAgIAkJc3VjaCB0aGF0ICgKCQkJCQkJRkhJUkhlbHBlcnMuVG9EYXRlVGltZShJbmZWYWNjaW5hdGlvbi5vY2N1cnJlbmNlKSBkdXJpbmcgIkZhbGwgUGVyaW9kIgoJCQkJCSkKCQl3aGVyZSBJbmZWYWNjaW5hdGlvbi5zdGF0dXMgID0gJ2NvbXBsZXRlZCcKCi8vIHRlc3QgcGF0aWVudCBhdCBtaW5pbXVtKDQwKToKZGVmaW5lICJTZWFzb25hbCBJbmYgVmFjY2luYXRlZCI6CgkoZXhpc3RzKCJJbmYgVmFjY2luYXRpb24iKSBvciAoQWdlSW5Nb250aHNBdChkYXRlIGZyb20gZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiKSA8IDYpKQovLwovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwovKgpkZWZpbmUgZnVuY3Rpb24gRmFsbEludGVydmFsKG0xIEludGVnZXIsZDEgSW50ZWdlcixtMiBJbnRlZ2VyLGQyIEludGVnZXIpOgovLwlpZiBUb2RheSgpID4gRGF0ZSAoeWVhciBmcm8sIG0gVG9kYXkoKSwgOSwgMjIpIHRoZW4KCQlJbnRlcnZhbFsgRGF0ZSggeWVhciBmcm9tIFRvZGF5KCksIG0xLCBkMSksIERhdGUoeWVhciBmcm9tIFRvZGF5KCksIG0yLCBkMikpCi8vCWVsc2UKLy8JCUludGVydmFsWyBEYXRlKHllYXIgZnJvbSBUb2RheSgpIC0gMSwgOSwgMjIpLCBEYXRlKHllYXIgZnJvbSBUb2RheSgpIC0gMSwgMTIsIDIyKSkKKi8KCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KZGVmaW5lIGZ1bmN0aW9uICJOb3JtYWxpemUgSW50ZXJ2YWwiKGNob2ljZSBDaG9pY2U8RkhJUi5kYXRlVGltZSwgRkhJUi5QZXJpb2QsIEZISVIuVGltaW5nLCBGSElSLmluc3RhbnQsIEZISVIuc3RyaW5nLCBGSElSLkFnZSwgRkhJUi5SYW5nZT4gKToKICBjYXNlCiAgCSAgd2hlbiBjaG9pY2UgaXMgRkhJUi5kYXRlVGltZSB0aGVuCiAgCUludGVydmFsW0ZISVJIZWxwZXJzLlRvRGF0ZVRpbWUoY2hvaWNlIGFzIEZISVIuZGF0ZVRpbWUpLCBGSElSSGVscGVycy5Ub0RhdGVUaW1lKGNob2ljZSBhcyBGSElSLmRhdGVUaW1lKV0KICAJCXdoZW4gY2hvaWNlIGlzIEZISVIuUGVyaW9kIHRoZW4KICAJCUZISVJIZWxwZXJzLlRvSW50ZXJ2YWwoY2hvaWNlIGFzIEZISVIuUGVyaW9kKQogIAkJd2hlbiBjaG9pY2UgaXMgRkhJUi5pbnN0YW50IHRoZW4KICAJCQlJbnRlcnZhbFtGSElSSGVscGVycy5Ub0RhdGVUaW1lKGNob2ljZSBhcyBGSElSLmluc3RhbnQpLCBGSElSSGVscGVycy5Ub0RhdGVUaW1lKGNob2ljZSBhcyBGSElSLmluc3RhbnQpXQogIAkJd2hlbiBjaG9pY2UgaXMgRkhJUi5BZ2UgdGhlbgogIAkJICBJbnRlcnZhbFtGSElSSGVscGVycy5Ub0RhdGUoUGF0aWVudC5iaXJ0aERhdGUpICsgRkhJUkhlbHBlcnMuVG9RdWFudGl0eShjaG9pY2UgYXMgRkhJUi5BZ2UpLAogIAkJCSAgRkhJUkhlbHBlcnMuVG9EYXRlKFBhdGllbnQuYmlydGhEYXRlKSArIEZISVJIZWxwZXJzLlRvUXVhbnRpdHkoY2hvaWNlIGFzIEZISVIuQWdlKSArIDEgeWVhcikKICAJCXdoZW4gY2hvaWNlIGlzIEZISVIuUmFuZ2UgdGhlbgogIAkJICBJbnRlcnZhbFtGSElSSGVscGVycy5Ub0RhdGUoUGF0aWVudC5iaXJ0aERhdGUpICsgRkhJUkhlbHBlcnMuVG9RdWFudGl0eSgoY2hvaWNlIGFzIEZISVIuUmFuZ2UpLmxvdyksCiAgCQkJICBGSElSSGVscGVycy5Ub0RhdGUoUGF0aWVudC5iaXJ0aERhdGUpICsgRkhJUkhlbHBlcnMuVG9RdWFudGl0eSgoY2hvaWNlIGFzIEZISVIuUmFuZ2UpLmhpZ2gpICsgMSB5ZWFyKQogIAkJd2hlbiBjaG9pY2UgaXMgRkhJUi5UaW1pbmcgdGhlbgogIAkJICBNZXNzYWdlKG51bGwgYXMgSW50ZXJ2YWw8RGF0ZVRpbWU+LCB0cnVlLCAnMScsICdFcnJvcicsICdDYW5ub3QgY29tcHV0ZSBhIHNpbmdsZSBpbnRlcnZhbCBmcm9tIGEgVGltaW5nIHR5cGUnKQogICAgd2hlbiBjaG9pY2UgaXMgRkhJUi5zdHJpbmcgdGhlbgogICAgICBNZXNzYWdlKG51bGwgYXMgSW50ZXJ2YWw8RGF0ZVRpbWU+LCB0cnVlLCAnMScsICdFcnJvcicsICdDYW5ub3QgY29tcHV0ZSBhbiBpbnRlcnZhbCBmcm9tIGEgU3RyaW5nIHZhbHVlJykKICAJCWVsc2UKICAJCQludWxsIGFzIEludGVydmFsPERhdGVUaW1lPgogIAllbmQKCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KCmRlZmluZSBmdW5jdGlvbiAiSGFzRW5kIihwZXJpb2QgSW50ZXJ2YWw8RGF0ZVRpbWU+ICk6CiAgbm90ICgKICAgIGVuZCBvZiBwZXJpb2QgaXMgbnVsbAogICAgICBvcgogICAgICBlbmQgb2YgcGVyaW9kID0gbWF4aW11bSBEYXRlVGltZQogICkKCi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLwoKZGVmaW5lIGZ1bmN0aW9uICJMYXRlc3QiKGNob2ljZSBDaG9pY2U8RkhJUi5kYXRlVGltZSwgRkhJUi5QZXJpb2QsIEZISVIuVGltaW5nLCBGSElSLmluc3RhbnQsIEZISVIuc3RyaW5nLCBGSElSLkFnZSwgRkhJUi5SYW5nZT4gKToKICAoIk5vcm1hbGl6ZSBJbnRlcnZhbCIoY2hvaWNlKSkgcGVyaW9kCiAgICByZXR1cm4KICAgICAgaWYgKCBIYXNFbmQocGVyaW9kKSkgdGhlbiBlbmQgb2YgcGVyaW9kCiAgICAgIGVsc2Ugc3RhcnQgb2YgcGVyaW9kCgovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vCg=="
			}
		]
	},
	"request": {
		"method": "PUT",
		"url": "Library/immunizationCQLLibrary"
	}
		},
		{
			"resource": {
				"resourceType": "Measure",
				"id": "immunizationMeasure",
				"name": "immunizationMeasure",
				"title": "Is immunized according to Ontario's routine immunization schedule",
				"status": "active",
				"group": [
					{
						"id": "group-1",
						"population": [
							{
								"code": {
									"coding": [
										{
											"system": "http://terminology.hl7.org/CodeSystem/measure-population",
											"code": "initial-population",
											"display": "Initial Population"
										}
									]
								},
								"criteria": {
									"language": "text/cql",
									"expression": "InitialPopulation"
								}
							},
							{
								"code": {
									"coding": [
										{
											"system": "http://terminology.hl7.org/CodeSystem/measure-population",
											"code": "numerator",
											"display": "Numerator"
										}
									]
								},
								"criteria": {
									"language": "text/cql",
									"expression": "Numerator"
								}
							},
							{
								"code": {
									"coding": [
										{
											"system": "http://terminology.hl7.org/CodeSystem/measure-population",
											"code": "denominator",
											"display": "Denominator"
										}
									]
								},
								"criteria": {
									"language": "text/cql",
									"expression": "Denominator"
								}
							}
						]
					}
				],
				"relatedArtifact": [
					{
						"type": "depends-on",
						"resource": "Library/library-FHIRHelpers-4.0.1"
					}
				],
				"scoring": {
					"coding": [
						{
							"code": "proportion"
						}
					]
				},
				"library": [
					"Library/immunizationCQLLibrary"
				]
			},
			"request": {
				"method": "PUT",
				"url": "Measure/immunizationMeasure"
			}
		}
	]
}
