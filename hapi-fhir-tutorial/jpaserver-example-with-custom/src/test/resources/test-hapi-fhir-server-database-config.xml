<beans xmlns="http://www.springframework.org/schema/beans" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<!-- 
	This file configures the database connection for the HAPI JPA Server.
	-->

	<!--
	The following bean configures the database connection. The 'url' property value
	of "jdbc:derby:directory:jpaserver_derby_files;create=true" indicates that the
	server should save resources in a directory called "jpaserver_derby_files".
	
	A URL to a remote database could also be placed here, along with login credentials
	and other properties supported by BasicDataSource.
	-->
	<bean id="myPersistenceDataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<property name="url" value="jdbc:derby:directory:jpaserver_derby_files;create=true" />
		<property name="driverClassName" value="org.apache.derby.jdbc.EmbeddedDriver"></property>
		<property name="username" value=""/>
		<property name="password" value=""/>
	</bean>
	
	<!--
	Hibernate can be configured with other dialects if you wish to connect to another
	database (e.g. Postgres). Consult the Hibernate documentation to see a list of
	available dialects. 
	-->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="myPersistenceDataSource" />
		<!-- 
		<property name="persistenceXmlLocation" value="classpath:META-INF/fhirtest_persistence.xml" />
		<property name="persistenceUnitName" value="FHIR_UT" />
		-->
		<property name="packagesToScan">
			<array>
				<value type="java.lang.String">ca.uhn.fhir.jpa.entity</value>
				<value type="java.lang.String">ca.uhn.fhir.jpa.demo.entity</value>
			</array>
		</property>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="false" />
				<property name="generateDdl" value="true" />
				<property name="databasePlatform" value="org.hibernate.dialect.DerbyTenSevenDialect" />
			</bean>
		</property>
	</bean>

</beans>
