<?xml version="1.0"?>
<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/changes/1.0.0"
	xsi:schemaLocation="http://maven.apache.org/changes/1.0.0 ./changes.xsd">
	<properties>
		<author>James Agnew</author>
		<title>HAPI FHIR Changelog</title>
	</properties>
	<body>
		<release version="3.3.0" date="TBD">
			<action type="add">
				This release corrects an inefficiency in the JPA Server, but requires a schema
				change in order to update. Prior to this version of HAPI FHIR, a CLOB column
				containing the complete resource body was stored in two
				tables: HFJ_RESOURCE and HFJ_RES_VER. Because the same content was stored in two
				places, the database consumed more space than is needed to.
				<![CDATA[<br/><br/>]]>
				In order to reduce this duplication, two columns have been removed from the
				HFJ_RESOURCE table. This means that on any database that is being upgraded
				to HAPI FHIR 3.3.0+, you will need to remove the columns
				<![CDATA[<code>RES_TEXT</code> and <code>RES_ENCODING</code>]]> (or
				set them to nullable if you want an easy means of rolling back). Naturally
				you should back your database up prior to making this change.
			</action>
			<action type="fix">
				The validation module has been refactored to use the R4 (currently maintained)
				validator even for DSTU3 validation. This is done by using an automatic
				converter which converts StructureDefinition/ValueSet/CodeSystem resources
				which are used as inputs to the validator. This change should fix a number
				of known issues with the validator, as they have been fixed in R4 but
				not in DSTU3. This also makes our validator much more maintainable
				since it is now one codebase.
			</action>
			<action type="add">
				The version of a few dependencies have been bumped to the
				latest versions (dependent HAPI modules listed in brackets):
				<![CDATA[
					<ul>
						<li>Hibernate (JPA): 5.2.10.Final -&gt; 5.2.12.Final</li>
						<li>Spring (JPA): 5.0.0 -&gt; 5.0.3</li>
						<li>Thymeleaf (Web Tespage Overlay): 3.0.7.RELEASE -&gt; 3.0.9.RELEASE</li>
					</ul>
				]]>
			</action>
			<action type="fix">
				Fix a crash in the JSON parser when parsing extensions on repeatable
				elements (e.g. Patient.address.line) where there is an extension on the
				first repetition but not on subsequent repetitions of the
				repeatable primitive. Thanks to Igor Sirkovich for providing a
				test case!
			</action>
			<action type="fix" issue="832">
				Fix an issue where the JPA server crashed while attempting to normalize string values
				containing Korean text. Thanks to GitHub user @JoonggeonLee for reporting!
			</action>
			<action type="fix">
				An issue was solved where it was possible for server interceptors
				to have both processingCompletedNormally and handleException called
				if the stream.close() method threw an exception. Thanks to Carlos
				Eduardo Lara Augusto for investigating!
			</action>
			<action type="remove" issue="831">
				The <![CDATA[<code>@TagListParam</code>]]> annotation has been removed. This
				annotation had no use after DSTU1 but never got deleted and was misleading. Thanks
				to Angelo Kastroulis for reporting!
			</action>
			<action type="add">
				A new method overload has been added to IServerInterceptor:
				<![CDATA[
				<code>outgoingResponse(RequestDetails, ResponseDetails, HttpServletRequest, HttpServletResponse)
				]]>. This new method allows an interceptor to completely replace
				the resource being returned with a different resource instance, or
				to modify the HTTP Status Code being returned. All other "outgoingResponse"
				methods have been deprecated and are recommended to be migrated
				to the new method. This new method (with its RequestDetails and ResponseDetails
				parameters) should be flexible enough to
				accommodate future needs which means that this should be the last
				time we have to change it.
			</action>
			<action type="fix" issue="838">
				The HAPI-FHIR-CLI now explicitly includes JAXB dependencies in its combined JAR
				file. These were not neccesary prior to Java 9, but the JDK (mercifully) does
				not include JAXB in the default classpath as of Java 9. This means that
				it is possible to perform Schematron validation on Java 9. Thanks to
				John Grimes for reporting and suggesting a fix!
			</action>
			<action type="add">
				An experimental interceptor called VersionedApiConverterInterceptor has been added,
				which automaticaly converts response payloads to a client-specified version
				according to transforms built into FHIR.
			</action>
			<action type="fix" issue="822">
				Searches which were embedded in a Bundle as a transaction or batch operation did
				not respect any chained method parameters (e.g. MedicationRequest?medication.code=123).
				Thanks to @manjusampath for reporting!
			</action>
			<action type="fix">
				A few fixes went into the build which should now allow HAPI FHIR
				to build correctly on JDK 9.0. Currently building is supported on
				JDK 8.x and 9.x only.
			</action>
			<action type="fix" issue="837">
				Client requests with an
				<![CDATA[<code>Accept</code>]]>
				header value of
				<![CDATA[<code>application/json</code>]]>
				will now be served with the non-legacy content type of
				<![CDATA[<code>application/fhir+json</code>]]>
				instead of the legacy
				<![CDATA[<code>application/json+fhir</code>]]>.
				Thanks to John Grimes for reporting!
			</action>
			<action type="fix">
				Fixed a regression in server where a count parameter in the form
				<![CDATA[<code>@Count IntegerType theCount</code>]]>
				caused an exception if the client made a request with
				no count parameter included. Thanks to Viviana Sanz for reporting!
			</action>
			<action type="fix">
				A bug in the JPA server was fixed where a Subscription incorrectly created 
				without a status or with invalid criteria would cause a crash during 
				startup.
			</action>
			<action type="add">
				ResponseHighlightingInterceptor now properly parses _format 
				parameters that include additional content (e.g.
				<![CDATA[<code>_format=html/json;fhirVersion=1.0</code>]]>)
			</action>
			<action type="add">
				Stale search deleting routine on JPA server has been adjusted
				to delete one search per transaction instead of batching 1000
				searches per transaction. This should make the deletion logic
				more tolerant of deleting very large search result sets.
			</action>
			<action type="add">
				Avoid refreshing the search parameter cache from an incoming client 
				request thread, which caused unneccesary delays for clients.
			</action>
		</release>
		<release version="3.2.0" date="2018-01-13">
			<action type="add">
				Support for custom search parameters has been backported in the JPA server
				from DSTU3 back to DSTU2. As of this release of HAPI, full support for custom
				search parameters exists in all supported versions of FHIR.
			</action>
			<action type="add">
				A new set of methods have been added to
				<![CDATA[<code>IServerOperationInterceptor</code>]]>
				called
				<![CDATA[<code>resourcePreCreate</code>]]>,
				<![CDATA[<code>resourcePreUpdate</code>]]>, and
				<![CDATA[<code>resourcePreDelete</code>]]>. These
				methods are called within the database transaction
				(just as the existing methods were) but are invoked
				prior to the contents being saved to the database. This
				can be useful in order to allow interceptors to
				change payload contents being saved.
			</action>
			<action type="remove">
				A few redundant and no longer useful methods have been marked as
				deprecated in
				<![CDATA[<code>IServerInterceptor</code>]]>. If you have implemented
				custom interceptors you are recommended to migrate to the recommended
				methods.
			</action>
			<action type="add">
				A new method has been added to RequestDetails called
				<![CDATA[<code>setRequestContents()]]> which can be used
				by interceptors to modify the request body before it
				is parsed by the server.
			</action>
			<action type="fix">
				Fix a crash in JPA server when performing a recursive
				<![CDATA[<code>_include</code>]]> which doesn't actually find any matches.
			</action>
			<action type="fix" issue="796">
				When encoding URL parameter values, HAPI FHIR would incorrectly escape
				a space (" ") as a plus ("+") insetad of as "%20" as required by 
				RFC 3986. This affects client calls, as well as URLs generated by
				the server (e.g. REST HOOK calls). Thanks to James Daily for reporting!
			</action>
			<action type="fix">
				Searching in JPA server using a combination of _content and _id parameters
				failed. Thanks to Jeff Weyer for reporting!
			</action>
			<action type="add">
				A new configuration option has been added to DaoConfig which allows newly created
				resources to be assigned a UUID by the server instead of a sequential ID
			</action>
			<action type="fix">
				An unneccesary column called "MYHASHCODE" was added to the
				HFJ_TAG_DEF table in the JPA server schema
			</action>
			<action type="fix">
				A few log entries emitted by the JPA server suring every search have been reduced
				from INFO to DEBUG in order to reduce log noise
			</action>
			<action type="fix" issue="810">
				Fix an issue in JPA server where updating a resource sometimes caused date search indexes to 
				be incorrectly deleted. Thanks to Kyle Meadows for the pull request!
			</action>
			<action type="fix" issue="808">
				Servers did not return an ETag if the version was provided on a
				DSTU3/R4 structure in the getMeta() version field instead of in the
				getIdElement() ID. Thanks to GitHub user @Chrisjobling for reporting!
			</action>
			<action type="fix">
				A bug was fixed in the JPA server when performing a validate operation with a mode
				of DELETE on a server with referential integrity disabled, the validate operation would delete
				resource reference indexes as though the delete was actually happening, which negatively
				affected searching for the resource being validated.
			</action>
			<action type="add">
				The HAPI FHIR Server framework now has initial support for
				multitenancy. At this time the support is limited to the server
				framework (not the client, JPA, or JAX-RS frameworks). See
				<![CDATA[
				<a href="http://hapifhir.io/doc_rest_server.html">Server Documentation</a>
				]]>
				for more information.
			</action>
		</release>
		<release version="3.1.0" date="2017-11-23">
			<action type="add">
				The version of a few dependencies have been bumped to the
				latest versions (dependent HAPI modules listed in brackets):
				<![CDATA[
					<ul>
						<li>Spring (JPA): 4.3.10 -&gt; 5.0.0</li>
						<li>Jackson (JPA): 2.8.1 -&gt; 2.9.2</li>
					</ul>
				]]>
			</action>
			<action type="fix">
				The Android client module has been restored to working order, and no longer
				requires a special classifier or an XML parser to be present in order to
				work. This means that the hapi-fhir-android library is much less likely
				to cause conflicts with other libraries imported into an Android application
				via Gradle.
				<![CDATA[<br/><br/>]]>
				See the
				<![CDATA[<a href="http://hapifhir.io/doc_android.html">HAPI FHIR Android Documentation</a>]]>
				for more information. As a part of this fix, all dependencies on 
				the StAX API have been removed in environments where StAX is not 
				present (such as Android). The client will now detect this case, and
				explicitly request JSON payloads from servers, meaning that Android clients
				no longer need to include two parser stacks
			</action>
			<action type="add">
				A performance to the JPA server has been made which reduces the number
				of writes to index tables when updating a resource with contents that
				only make minor changes to the resource content. In many cases this can
				noticeably improve update performance.
			</action>
			<action type="fix">
				In FHIR DSTU3 the
				<![CDATA[<code>ValueSet/$expand?identifier=foo</code>]]>
				and
				<![CDATA[<code>ValueSet/$validate-code?identifier=foo</code>]]>
				parameters were changed to
				<![CDATA[<code>ValueSet/$expand?url=foo</code>]]>
				and
				<![CDATA[<code>ValueSet/$validate-code?url=foo</code>]]>
				respectively, but the JPA server had not caught up. The
				JPA DSTU3 server has been adjusted to accept either "identifier"
				or "url" (with "url" taking precedence), and the JPA R4 server
				has been changed to only accept "url".
				Thanks to Avinash Shanbhag for reporting!
			</action>
			<action type="fix" issue="744">
				Fix an error in JPA server when using Derby Database, where search queries with
				a search URL longer than 255 characters caused a mysterious failure. Thanks to
				Chris Schuler and Bryn Rhodes for all of their help in reproducing this issue.
			</action>
			<action type="add">
				JPA server now supports the use of the
				<![CDATA[<code>Cache-Control</code>]]>
				header in order to allow the client to selectively disable the
				search result cache. This directive can also be used to disable result paging
				and return results faster when only a small number of results is needed.
				See the
				<![CDATA[<a href="http://hapifhir.io/doc_jpa.html">JPA Page</a>]]>
				for more information.
			</action>
			<action type="fix">
				In certain cases in the JPA server, if multiple threads all attempted to 
				update the same resource simultaneously, the optimistic lock failure caused
				a "gap" in the history numbers to occur. This would then cause a mysterious
				failure when trying to update this resource further. This has been 
				resolved.
			</action>
			<action type="add">
				JPA Server search/history results now set the ID of the returned Bundle to
				the ID of the search, meaning that if a search returns results from the Query
				cache, it will reuse the ID of the previously returned Bundle
			</action>
			<action type="fix">
				Fix a NullPointerException when validating a Bundle (in DSTU3/R4) with no
				<![CDATA[<code>Bundle.type</code>]]> value
			</action>
			<action type="add">
				The JPA server transaction operation (DSTU3/R4) did not correctly process the
				If-Match header when passed in via 
				<![CDATA[<code>Bundle.entry.request.ifMatch</code>]]> value
			</action>
			<action type="add">
				In Apache client, remove a log message at WARN level when the response does not
				specify a charset. This log line often showed up any time a server was not supplying
				a response, making client logs quite noisy
			</action>
			<action type="add">
				A new configuration item has been added to the JPA server DaoConfig
				called
				<![CDATA[<code>getCountSearchResultsUpTo()</code>]]>.
				This setting governs how many search results the search
				coordinator should try to find before returning an initial
				search response	to the user, which has an effect on whether
				the
				<![CDATA[<code>Bundle.total</code>]]>
				field is always populated in search responses. This has now
				been set to 20000 on out public server (fhirtest.uhn.ca)
				so most search results should now include a total.
			</action>
			<action type="fix">
				Remove a bunch of exceptions in the org.hl7.fhir.exception package from the
				hapi-fhir-base module, as they were also duplicated in the
				hapi-fhir-utilities module.
			</action>
			<action type="add">
				The DSTU2 XhtmlDt type has been modified so that it no longer uses
				the StAX XMLEvent type as its internal model, and instead simply uses
				a String. New methods called "parse" and "encode" have been added
				to HAPI FHIR's XmlUtil class, which can be used to convert
				between a String and an XML representation. This should allow
				HAPI FHIR to run in environments where StAX is not available, such
				as Android phones.
			</action>
			<action type="add" issue="761">
				Restored the 
				<![CDATA[<code>org.hl7.fhir.r4.model.codesystem.*</code>]]>
				classes (which are Java Enums for the various FHIR codesystems).
				These were accidentally removed in HAPI FHIR 3.0.0. Thanks to
				GitHub user @CarthageKing for reporting!
			</action>
			<action type="fix">
				The resource Profile Validator has been enhanced to not try to validate
				bound fields where the binding strength is "example", and a crash was
				resolved when validating QuestionnaireResponse answers with a type
				of "choice" where the choice was bound to a ValueSet.
			</action>
			<action type="fix">
				Remove the fake "Test" resource from DSTU2 structures. This was not
				a real resource type, and caused conflicts with the .NET client. Thanks to
				Vlad Ignatov for reporting!
			</action>
			<action type="fix" issue="720">
				Parsing a DSTU3/R4 custom structure which contained a field of
				a custom type caused a crash during parsing. Thanks to 
				GitHub user @mosaic-hgw for reporting!
			</action>
			<action type="add" issue="711">
				Client logic for checking the version of the connected
				server to ensure it is for the correct version of FHIR now
				includes a check for R4 servers. Thanks to Clayton Bodendein
				for the pull request, including a number of great tests!
			</action>
			<action type="add" issue="714">
				JAX-RS client framework now supports the ability to
				register your own JAX-RS Component Classes against the client,
				as well as better documentation about thread safety. Thanks
				to SÃ©bastien RiviÃ¨re for the pull request!
			</action>
			<action type="fix" issue="717">
				Processing of the If-Modified-Since header on FHIR read operations was reversed,
				returning a 304 when the resource had been modified recently. Thanks to
				Michael Lawley for the pull request!
			</action>
			<action type="add">
				Add <![CDATA[<code>Prefer</code> and <code>Cache-Control</code>]]> to the list of headers which are declared as
				being acceptable for CORS requests in CorsInterceptor, CLI, and JPA Example.
				Thanks to Patrick Werner for the pull request!
			</action>
			<action type="fix" issue="725">
				DSTU2-hl7org and DSTU2.1 structures did not copy resource IDs when invoking 
				copyValues(). Thanks to Clayton Bodendein for the pull request!
			</action>
			<action type="fix" issue="734">
				When encoding a Binary resource, the Binary.securityContext field
				was not encoded correctly. Thanks to Malcolm McRoberts for the pull
				request with fix and test case!
			</action>
			<action type="add">
				Bundle resources did not have their version encoded when serializing
				in FHIR resource (XML/JSON) format.
			</action>
			<action type="add">
				The Binary resource endpoint now supports the `X-Security-Context` header when
				reading or writing Binary contents using their native Content-Type (i.e exchanging
				the raw binary with the server, as opposed to exchanging a FHIR resource).
			</action>
			<action type="fix">
				When paging through multiple pages of search results, if the 
				client had requested a subset of resources to be returned using the
				<![CDATA[<code>_elements</code>]]> parameter, the elements list
				was lost after the first page of results.
				In addition, elements will not remove elements from
				search/history Bundles (i.e. elements from the Bundle itself, as opposed
				to elements in the entry resources) unless the Bundle elements are
				explicitly listed, e.g. <![CDATA[<code>_include=Bundle.total</code>]]>.
				Thanks to @parisni for reporting!
			</action>
			<action type="add" issue="743">
				Add support for Spring Boot for initializing a number of parts of the library,
				as well as several examples.
				See the
				<![CDATA[<a href="https://github.com/jamesagnew/hapi-fhir/tree/master/hapi-fhir-spring-boot/hapi-fhir-spring-boot-samples">Spring Boot samples</a>]]>
				for examples of how this works.
				Thanks to Mathieu Ouellet for the contribution!
			</action>
			<action type="add" issue="747">
				JPA server now has lucene index support moved to separate classes from the entity
				classes in order to facilitate support for ElasticSearch. Thanks to Jiang Liang
				for the pull request!
				<![CDATA[
				Note that any existing JPA projects will need to add an additional property in their Spring config called <code>hibernate.search.model_mapping</code>. See <a href="https://github.com/jamesagnew/hapi-fhir/blob/master/hapi-fhir-jpaserver-example/src/main/java/ca/uhn/fhir/jpa/demo/FhirServerConfig.java#L84">this line</a> in the example project.
				]]>
			</action>
			<action type="add" issue="755">
				A new client interceptor has been added called
				AdditionalRequestHeadersInterceptor, which allows 
				a developer to add additional custom headers to a 
				client requests.
				Thanks to Clayton Bodendein for the pull request!
			</action>
			<action type="fix">
				An issue was fixed in JPA server where extensions on primitives which
				are nestedt several layers deep are lost when resources are retrieved
			</action>
			<action type="fix" issue="756">
				Conditional deletes in JPA server were incorrectly denied by AuthorizationInterceptor
				if the delete was permitted via a compartment rule. Thanks to Alvin Leonard for the
				pull request!
			</action>
			<action type="add" issue="767">
				JAX-RS server module was not able to generate server CapabilityStatement for
				some versions of FHIR (DSTU2_HL7ORG, DSTU2_1, or R4). Thanks to Clayton Bodendein for the Pull Request!
			</action>
			<action type="add" issue="769">
				When a server method throws a DataFormatException, the error will now be converted into
				an HTTP 400 instead of an HTTP 500 when returned to the client (and a stack 
				trace will now be returned to the client for JAX-RS server if configured to
				do so). Thanks to Clayton Bodendein for the pull request!
			</action>
			<action type="fix" issue="770">
				JAX-RS server conformance provider in the example module passed in the
				server description, server name, and server version in the incorrect order.
				Thanks to Clayton Bodendein for the pull request!
			</action>
			<action type="fix" issue="774">
				The learn more links on the website home page had broken links. Thanks to
				James Daily for the pull request to fix this!
			</action>
			<action type="add" issue="762">
				Prevent a crash in AuthorizationInterceptor when processing transactions
				if the interceptor has rules declared which allow resources to be read/written
				by "any ID of a given type". Thanks to GitHub user @dconlan for the pull
				request!
			</action>
		</release>
		<release version="3.0.0" date="2017-09-27">
			<action type="add">
				Support for FHIR R4 (current working draft) has been <![CDATA[<b>added</b>]]>
				(in a new module called <![CDATA[<code>hapi-fhir-structures-r4</code>]]>)
				and
				support for FHIR DSTU1 (<![CDATA[<code>hapi-fhir-structures-dstu</code>]]>)
				has been <![CDATA[<b>removed</b>]]>. Removing support for the legacy
				DSTU1 FHIR version was a difficult decision, but it allows us the
				opportunitity to clean up the codebase quite a bit, and remove some
				confusing legacy parts of the API (such as the legacy Atom Bundle class).
				<![CDATA[<br/><br/>]]>
				A new redesigned table of HAPI FHIR versions to FHIR version support has been
				added to the <![CDATA[<a href="http://hapifhir.io/download.html">Download Page</a>]]>
			</action>
			<action type="add">
				HAPI FHIR's modules have been restructured for more consistency and less coupling
				between unrelated parts of the API.
				<![CDATA[<br/><br/>]]>
				A new complete list of HAPI FHIR modules has been added to the
				<![CDATA[<a href="http://hapifhir.io/download.html">Download Page</a>]]>. Key changes
				include:
				<![CDATA[
				<ul>
					<li>
						HAPI FHIR's <b>client</b> codebase has been moved out of <code>hapi-fhir-base</code>
						and in to a new module called <code>hapi-fhir-client</code>. Client users now need
						to explicitly add this JAR to their project (and non-client users now no longer
						need to depend on it)
					</li>
					<li>
						HAPI FHIR's <b>server</b> codebase has been moved out of <code>hapi-fhir-base</code>
						and in to a new module called <code>hapi-fhir-server</code>. Server users now need
						to explicitly add this JAR to their project (and non-server users now no longer
						need to depend on it)
					</li>
					<li>
						As a result of the client and server changes above, we no longer need to produce
						a special Android JAR which contains the client, server (which added space but was
						not used) and structures. There is now a normal module called <code>hapi-fhir-android</code>
						which is added to your Android Gradle file along with whatever structures JARs you
						wish to add. See the
						<a href="https://github.com/hapifhir/hapi-fhir-android-integration-test">Android Integration Test</a>
						to see a sample project using HAPI FHIR 3.0.0. <b>Note that this has been reported to
						work by some people but others are having issues with it!</b> In order to avoid delaying
						this release any further we are releasing now despite these issues. If you are an Android
						guru and want to help iron things out please get in touch. If not, it might be a good
						idea to stay on HAPI FHIR 2.5 until the next point release of the 3.x series.
					</li>
					<li>
						A new JAR containing FHIR utilities called <code>hapi-fhir-utilities</code> has been
						added. This JAR reflects the ongoing harmonization between HAPI FHIR and the FHIR
						RI codebases and is generally required in order to use HAPI at this point (if you
						are using a dependency manager such as Maven or Gradle it will be brought in to your
						project automatically as a dependency)
					</li>
				</ul>
				]]>
			</action>
			<action type="add">
				In order to allow the reoganizations and decoupling above to happen, a number of important classes
				and interfaces have been moved to new packages. A sample list of these changes is listed
				below. When upgrading to 3.0.0 your project may well show a number of compile errors
				related to missing classes. In most cases this can be resolved by simply removing the HAPI
				imports from your classes and asking your IDE to "Organize Imports" once again. This is an
				annoying change we do realize, but it is neccesary in order to allow the project to
				continue to grow.
				<![CDATA[
				<ul>
					<li>IGenericClient moved from package ca.uhn.fhir.rest.client to package ca.uhn.fhir.rest.client.api</li>
					<li>IRestfulClient moved from package ca.uhn.fhir.rest.client to package ca.uhn.fhir.rest.client.api</li>
					<li>AddProfileTagEnum moved from package ca.uhn.fhir.rest.server to package ca.uhn.fhir.context.api</li>
					<li>IVersionSpecificBundleFactory moved from package ca.uhn.fhir.rest.server to package ca.uhn.fhir.context.api</li>
					<li>BundleInclusionRule moved from package ca.uhn.fhir.rest.server to package ca.uhn.fhir.context.api</li>
					<li>RestSearchParameterTypeEnum moved from package ca.uhn.fhir.rest.server to package ca.uhn.fhir.rest.api</li>
					<li>EncodingEnum moved from package ca.uhn.fhir.rest.server to package ca.uhn.fhir.rest.api</li>
					<li>Constants moved from package ca.uhn.fhir.rest.server to package ca.uhn.fhir.rest.api</li>
					<li>IClientInterceptor moved from package ca.uhn.fhir.rest.client to package ca.uhn.fhir.rest.client.api</li>
					<li>ITestingUiClientFactory moved from package ca.uhn.fhir.util to package ca.uhn.fhir.rest.server.util</li>
				</ul>
				]]>
			</action>
			<action type="add">
				Because the Atom-based DSTU1 Bundle class has been removed from the library, users of the
				HAPI FHIR client must now always include a Bundle return type in search calls. For example,
				the following call would have worked previously:
				<![CDATA[
				<pre>
Bundle bundle = client.search().forResource(Patient.class)
	.where(new TokenClientParam("gender").exactly().code("unknown"))
   .prettyPrint()
   .execute();
				</pre>
				]]>
				This now needs an explicit returnBundle statement, as follows:
				<![CDATA[
				<pre>
Bundle bundle = client.search().forResource(Patient.class)
	.where(new TokenClientParam("gender").exactly().code("unknown"))
   .prettyPrint()
   .returnBundle(Bundle.class)
   .execute();
				</pre>
				]]>
			</action>
			<action type="add">
				The version of a few dependencies have been bumped to the
				latest versions (dependent HAPI modules listed in brackets):
				<![CDATA[
					<ul>
						<li>Gson (JSON Parser): 2.8.0 -&gt; 2.8.1</li>
						<li>Commons-lang3 (Everywhere): 3.5 -&gt; 3.6</li>
						<!--<li>Saxon-HE (Validator): 9.5.1-5 -&gt; 9.8.0-3</li>-->
						<li>Apache HttpClient (FHIR Client): 4.5.2 -&gt; 4.5.3</li>
						<li>Apache HttpCore (FHIR Client): 4.4.5 -&gt; 4.4.6</li>
						<li>Phloc Commons (Schematron Validator): 4.4.6 -&gt; 4.4.11</li>
						<li>Hibernate (JPA): 5.2.9 -&gt; 5.2.10</li>
						<li>Hibernate Search (JPA): 5.7.0 -&gt; 5.7.1</li>
						<li>Spring (JPA): 4.3.7 -&gt; 4.3.10</li>
						<li>Spring Data JPA (JPA): 1.10.4 -&gt; 1.11.6</li>
						<li>Guava (JPA): 22.0 -&gt; 23.0</li>
						<li>Thymeleaf (Testpage Overlay): 3.0.2 -&gt; 3.0.7</li>
						<li>OkHttp (Android): 3.4.1 -&gt; 3.8.1</li>
					</ul>
				]]>
			</action>
			<action type="add">
				JPA Subscription support has been refactored. A design contributed
				by Jeff Chung for the REST Hook subscription module has been ported
				so that Websocket subscriptions use it too. This design uses an 
				interceptor to scan resources as they are processed to test whether
				they should be delivered to subscriptions, instead of using a
				polling design. 
				<![CDATA[<br/><br/>]]>
				In addition, this scanning has been reworked to happen in a separate
				thread from the main storage thread, which should improve 
				performance and scalability of systems with multiple 
				subscriptions. Thanks to Jeff for all of his work on this!
			</action>
			<action type="fix">
				hapi-fhir-client-okhttp project POM had dependencies on both
				hapi-fhir-structures-dstu2 and hapi-fhir-structures-dstu3, which 
				meant that any project using ookhttp would import both structures
				JARs. This has been removed.
			</action>
			<action type="add">
				JPA server is now able to handle placeholder IDs (e.g. urn:uuid:00....000)
				being used in Bundle.entry.request.url as a part of the conditional URL 
				within transactions.
			</action>
			<action type="fix">
				Schematron validator now applies invariants to resources within a Bundle, not
				just to the outer Bundle resource itself
			</action>
			<action type="fix">
				Server and Client both still included Category header for resource tags even though
				this feature was only present in FHIR DSTU1 and was removed from the specification in
				FHIR DSTU2. The presence of these headers sometimes caused parsed resource instances
				to contain duplicate tags
			</action>
			<action type="fix" issue="667">
				When using the AuthorizationInterceptor with the JPA server, when a client is updating a resource
				from A to B, the user now needs to have write permission for both A and B. This is particularly 
				important for cases where (for example) an Observation is being updated from having a subject of
				Patient/A to Patient/B. If the user has write permission for Patient/B's compartment, this would
				previously have been allowed even if the user did not have access to write to Patient/A's compartment.
				Thanks to Eeva Turkka for reporting!
			</action>
			<action type="add">
				IServerOperationInterceptor now has a new method 
				<![CDATA[<code>resourceUpdated(RequestDetails, IBaseResource, IBaseResource)</code>]]>
				which replaces the previous
				<![CDATA[<code>resourceUpdated(RequestDetails, IBaseResource)</code>]]>. This allows
				interceptors to be notified of resource updates, but also see what the resource
				looked like before the update. This change was made to support the change above, but
				seems like a useful feature all around.
			</action>
			<action type="fix" issue="604">
				Allow DateParam (used in servers) to handle values with MINUTE precision. Thanks to
				Christian Ohr for the pull request!
			</action>
			<action type="fix">
				Fix HTTP 500 error in JPA server if a numeric search parameter was supplied with no value, e.g.
				<![CDATA[<code>GET /Observation?value-quantity=</code>]]>
			</action>
			<action type="add">
				JPA server transaction processing now honours the Prefer header and includes 
				created and updated resource bodies in the response bundle if it is set
				appropriately.
			</action>
			<action type="add">
				Optimize queries in JPA server remove a few redundant select columns when performing
				searches. This provides a slight speed increase in some cases.
			</action>
			<action type="add">
				Add configuration to JPA server DaoConfig that allows a maximum
				number of search results to be specified. Queries will never return
				more than this number, which can be good for avoiding accidental 
				performance problems in situations where large queries should not be 
				needed
			</action>
			<action type="fix" issue="674">
				Prevent duplicates in $everything query response in JPA server. Thanks to @vlad-ignatov 
				for reporting!
			</action>
			<action type="fix">
				Fix issue in calling JPA server transactions programmatically where resources
				are linked by object reference and not by ID where indexes were not correctly
				generated. This should not affect most users.
			</action>
			<action type="fix" issue="678">
				Fix issue in SubscriptionInterceptor that caused interceptor to only
				actually notify listeners of the first 10 subscriptions. Thanks to Jeff Chung
				for the pull request!
			</action>
			<action type="fix" issue="693">
				Fix potential ConcurrentModificationException when adding subscriptions while
				running under heavy load. Thanks to Jeff Chung for the pull request!
			</action>
			<action type="add">
				JPA search now uses hibernate ScrollableResults instead of plain JPA List. This
				should improve performance over large search results.
			</action>
			<action type="add">
				JPA servers with no paging provider configured, or with a paging provider other than
				DatabaseBackedPagingProvider will load all results in a single pass and keep them 
				in memory. Using this setup is not a good idea unless you know for sure that you
				will never have very large queries since it means that all results will be loaded into
				memory, but there are valid reasons to need this and it will perform better than
				paging to the database in that case. This fix also resolves a NullPointerException
				when performing an $everything search. Thanks to Kamal Othman for reporting!
			</action>
			<action type="fix">
				Correct an issue in JPA server on Postgres where searches with a long search URL
				were not able to be automatically purged from the database after they were scheduled
				for deletion. Thanks to Ravi Kuchi for reporting!
			</action>
			<action type="add">
				Add an optional and configurable hard limit on the total number of meta items
				(tags, profiles, and security labels) on an individual resource. The default
				is 1000.
			</action>
			<action type="add">
				When executing a search (HTTP GET) as a nested operation in in a transaction or 
				batch operation, the search now returns a normal page of results with a link to
				the next page, like any other search would. Previously the search would return
				a small number of results with no paging performed, so this change brings transaction
				and batch processing in line with other types of search.
			</action>
			<action type="add">
				JPA server no longer returns an OperationOutcome resource as the first resource
				in the Bundle for a response to a batch operation. This behaviour was previously
				present, but was not specified in the FHIR specification so it caused confusion and
				was inconsistent with behaviour in other servers.
			</action>
			<action type="fix">
				Fix a regression in HAPI FHIR 2.5 JPA server where executing a search in a
				transaction or batch operation caused an exception. Thanks to Ravi Kuchi for
				reporting!
			</action>
			<action type="fix">
				Correct an issue when processing transactions in JPA server where updates and
				creates to resources with tags caused the tags to be created twice in the
				database. These duplicates were utomatically filtered upon read so this issue
				was not user-visible, but it coule occasionally lead to performance issues
				if a resource containing multiple tags was updated many times via
				transactions.
			</action>
			<action type="fix">
				JPA server should not allow creation of resources that have a reference to
				a resource ID that previously existed but is now deleted. Thanks to Artem
				Sopin for reporting!
			</action>
			<action type="add">
				JpaConformanceProvider now has a configuration setting to enable and 
				disable adding resource counts to the server metadata.
			</action>
			<action type="fix">
				Avoid a deadlock in JPA server when the RequestValidatingInterceptor is being
				used and a large number of resources are being created by clients at
				the same time.
			</action>
			<action type="fix">
				Testpage Overlay's transaction method did not work if the response
				Bundle contained any entries that did not contain a resource (which
				is often the case in more recent versions of HAPI). Thanks to Sujay R
				for reporting!
			</action>
			<action type="fix">
				When the server was returning a multi-page search result where the
				client did not explicitly request an encoding via the _format 
				parameter, a _format parameter was incorrectly added to the paging
				links in the response Bundle. This would often explicitly request
				XML encoding because of the browser Accept header even though
				this was not what the client wanted.
			</action>
			<action type="add" issue="651">
				Enhancement to ResponseHighlighterInterceptor where links in the resource 
				body are now converted to actual clickable hyperlinks. Thanks to Eugene Lubarsky
				for the pull request!
			</action>
			<action type="add">
				BanUnsupportedHttpMethodsInterceptor has been modified so that it now allows
				HTTP PATCH to proceed.
			</action>
			<action type="add" issue="651">
				Enhancement to ResponseHighlighterInterceptor so that it now can be configured
				to display the request headers and response headers, and individual lines
				may be highlighted.
			</action>
			<action type="fix">
				AuthorizationInterceptor did not permit PATCH operations to proceed even
				if the user had write access for the resource being patched.
			</action>
			<action type="fix" issue="682">
				Fix an issue in HapiWorkerContext where structure definitions are
				not able to be retrieved if they are referred to by their 
				relative or logical ID. This affects profile tooling such as
				StructureMapUtilities. Thanks to Travis Lukach for reporting and
				providing a test case!
			</action>
			<action type="fix" issue="679">
				Add link to DSTU3 JavaDocs from documentation index. Thanks
				to Vadim Peretokin for the pull request!
			</action>
			<action type="fix" issue="680">
				Fix a typo in the documentation. Thanks to Saren Currie
				for the pull request!
			</action>
			<action type="add" issue="689">
				Add a command line flag to the CLI tool to allow configuration of the
				server search result cache timeout period. Thanks to Eugene Lubarsky
				for the pull request!
			</action>
			<action type="fix" issue="683">
				Correct an issue with the model classes for STU3 where any classes 
				containing the @ChildOrder annotation (basically the conformance
				resources) will not correctly set the order if any of the
				elements are a choice type (i.e. named "foo[x]"). Thanks to
				GitHub user @CarthageKing for the pull request!
			</action>
			<action type="fix">
				Fix potential deadlock in stale search deleting task in JPA server, as well
				as potential deadlock when executing transactions containing nested
				searches when operating under extremely heavy load.
			</action>
			<action type="add">
				JPA server transaction operations now put OperationOutcome resources resulting
				from actions in 
				<![CDATA[<code>Bundle.entry.response.outcome</code>]]>
				instead of the previous
				<![CDATA[<code>Bundle.entry.resource</code>]]>
			</action>
			<action type="fix" issue="696">
				An issue was corrected where search parameters containing negative numbers
				were sometimes treated as positive numbers when processing the search. Thanks
				to Keith Boone for reporting and suggesting a fix!
			</action>
			<action type="fix" issue="699">
				Fix an unfortunate typo in the custom structures documentation. Thanks to
				Jason Owen for the PR!
			</action>
			<action type="fix" issue="686">
				Correct an issue in the validator (DSTU3/R4) where elements were not always
				correctly validated if the element contained only a profiled extension. Thanks
				to SÃ©bastien RiviÃ¨re for the pull request!
			</action>
			<action type="add" issue="701">
				Testing UI now has a dropdown for modifiers on token search. Thanks 
				to GitHub user @dconlan for the pull request!
			</action>
			<action type="add" issue="688">
				When parsing an incomplete ID with the form <![CDATA[<code>http://my.org/Foo</code>]]> into
				IdDt and IdType objects, the Foo portion will now be treated as the resource type.
				Previously my.org was treated as the resource type and Foo was treated as the ID. Thanks
				to GitHub user @CarthageKing for the pull request!
			</action>
			<action type="fix" issue="695">
				Extensions on ID datatypes were not parsed or serialized correctly. Thanks to
				Stephen RiviÃ¨re for the pull request!
			</action>
			<action type="fix" issue="710">
				Fix a bug in REST Hook Subscription interceptors which prevented subscriptions
				from being activated. Thanks to Jeff Chung for the pull request!
			</action>
			<action type="fix" issue="708">
				Fix broken links in usage pattern diagram on website. Thanks to
				Pascal Brandt for the pull request!
			</action>
			<action type="fix" issue="706">
				Fix incorrect FHIR Version Strings that were being outputted and verified in the 
				client for some versions of FHIR. Thanks to Clayton Bodendein for the
				pull request!
			</action>
			<action type="add">
				Add a new constructor to SimpleRequestHeaderInterceptor which allows a complete header
				to be passed in (including name and value in one string)
			</action>
			<action type="add">
				REST Hook subscriptions now honour the Subscription.channel.header field
			</action>
			<action type="add">
				DSTU2 validator has been enhanced to do a better job handling
				ValueSets with expansions pointing to other ValueSets
			</action>
			<action type="fix">
				REST HOOK subscriptions now use HTTP PUT if there is a payload type
				specified, regardless of whether the source event was a create or an
				update
			</action>
			<action type="add" issue="712">
				Add appropriate import statements for logging to JPA demo code. Thanks to
				Rob Hausam for the pull request!
			</action>
			<action type="add" issue="700">
				Add some browser performance logging to ResponseHighlightingInterceptor. Thanks
				to Eugene Lubarsky for the pull request, and for convincing James not to 
				optimize something that did not need optimizing!
			</action>
			<action type="add">
				A new config property has been added to the JPA seerver DaoConfig called "setAutoCreatePlaceholderReferenceTargets".
				This property causes references to unknown resources in created/updated resources to have a placeholder
				target resource automatically created.
			</action>
			<action type="add">
				The server LoggingInterceptor has had a variable called
				<![CDATA[<code>processingTimeMillis</code>]]> which logs the number
				of milliseconds the server took to process a given request since
				HAPI FHIR 2.5, but this was not documented. This variable has now been
				documented as a part of the available features.
			</action>
			<action type="add">
				A new experimental feature has been added to the JPA server which allows
				you to define certain search parameter combinations as being resource keys,
				so that a database constraint will prevent more than one resource from
				having a matching pair
			</action>
			<action type="add">
				When using the client LoggingInterceptor in non-verbose mode, the
				log line showing the server's response HTTP status will now also include
				the returned
				<![CDATA[<code>Location</code>]]> header value as well
			</action>
			<action type="add">
				A new flag has been add to the CLI upload-definitions command
				"-e" which allows skipping particular resources
			</action>
			<action type="add">
				An issue in JPA server has been corrected where if a CodeSystem
				resource was deleted, it was not possible to create a new resource
				with the same URI as the previous one
			</action>
			<action type="fix">
				When uploading a Bundle resource to the server (as a collection or 
				document, not as a transaction) the ID was incorrectly stripped from
				resources being saved within the Bundle. This has been corrected.
			</action>
			<action type="add">
				Subscriptions in JPA server now support "email" delivery type through the 
				use of a new interceptor which handles that type
			</action>
			<action type="add">
				JPA server can now be configured to not support
				<![CDATA[<code>:missing</code>]]> modifiers, which
				increases write performance since fewer indexes are written
			</action>
			<action type="add">
				A new JPA configuration option has been added to the DaoConfig which allows
				support for the <![CDATA[<code>:missing</code>]]> search parameter modifier
				to be enabled or disabled, and sets the default to DISABLED.
				<![CDATA[<br/><br/>]]>
				Support for this parameter causes many more index rows to be inserted in the database,
				which has a significant impact on write performance. A future HAPI update may allow these
				rows to be written asynchronously in order to improve this.
			</action>
		</release>
		<release version="2.5" date="2017-06-08">
			<action type="fix">
				<![CDATA[
				This release includes significant performance enhancements for the
				JPA server. Most importantly, the way that searches are performed
				has been re-written to allow the server to perform better when
				the database has a large number of results in it. The following
				enhancements have been made:
				<br/><br/>
				<ul>
					<li>
						Searches with multiple search parameters of different 
						datatypes (e.g. find patients by name and date of birth) 
						were previously joined in Java code, now the join is 
						performed by the database which is faster
					</li>
					<li>
						Searches which returned lots of results previously has all 
						results streamed into memory before anything was returned to 
						the client. This is particularly slow if you do a search for
						(say) "get me all patients" since potentially thousands or 
						even millions of patients' IDs were loaded into memory 
						before anything gets returned to the client. HAPI FHIR 
						now has a multithreaded search coordinator which returns 
						results to the client as soon as they are available
					</li>
					<li>
						Search results will be cached and reused (so that if a client
						does two searches for "get me all patients matching FOO"
						with the same FOO in short succession, we won't query the DB
						again but will instead reuse the cached results). Note that
						this can improve performance, but does mean that searches can
						return slightly out of date results. Essentially what this means
						is that the latest version of individual resources will always
						be returned despite this cacheing, but newly created resources
						that should match may not be returned until the cache
						expires. By default this cache has been set to one minute, 
						which should be acceptable for most real-world usage, but
						this can be changed or disabled entirely.
					</li>
					<li>
						Updates which do not actually change the contents of the resource
						can optionally be prevented from creating a new version
						of the resource in the database
					</li>
				</ul>
				<br/><br/>
				Existing users should delete the 
				<code>HFJ_SEARCH</code>, 
				<code>HFJ_SEARCH_INCLUDE</code>,
				and 
				<code>HFJ_SEARCH_RESULT</code>
				tables from your database before upgrading, as the structure of these tables
				has changed and old search results can not be reused.
				]]>
			</action>
			<action type="fix" issue="590">
				AuthorizationInterceptor did not correctly handle paging requests
				(e.g. requests for the second page of results for a search operation). 
				Thanks to Eeva Turkka for reporting!
			</action>
			<action type="add">
				Add configuration property to DSTU3 FhirInstanceValidator to
				allow client code to change unknown extension handling behaviour.
			</action>
			<action type="fix" issue="630">
				Fix concurrency issues in FhirContext that were causing issues when 
				starting a context up on Android. Thanks to GitHub issue @Jaypeg85 for
				the pull request!
			</action>
			<action type="fix">
				Fix an issue in the JPA server if a resource has been previously
				saved containing vocabulary that is no longer valid. This only really
				happened if you were using a non-final version of FHIR (e.g. using DSTU3
				before it was finalized) but if you were in this situation, upgrading HAPI
				could cause you to have old codes that no longer exist in your database. This
				fix prevents these from blocking you from accesing those resources.
			</action>
			<action type="add">
				CLI now defaults to DSTU3 mode if no FHIR version is specified
			</action>
			<action type="add">
				Server and annotation-client @History annotation now allows DSTU3+ resource
				types in the type= property
			</action>
			<action type="fix" issue="563">
				JSON Parser gave a very unhelpful error message (Unknown attribute 'value' found during parse) 
				when a scalar value was found in a spot where an object is expected. This has been corrected to 
				include much more information. Thanks to GitHub user @jasminas for reporting!
			</action>
			<action type="add">
				DaoConfig#setInterceptors() has been un-deprecated. It was previously deprecated as
				we thought it was not useful, but uses have been identified so it turns out this method
				will live after all. Interceptors registered to this method will now be treated
				appropriately if they implement IServerOperationInterceptor too.
			</action>
			<action type="fix">
				JPA server did not correctly support searching on a custom search parameter whose
				path pointed to an extension, where the client used a chained value.
			</action>
			<action type="fix">
				Fix issue where the JSON parser sometimes did not encode DSTU3 extensions on the root of a 
				resource which have a value of type reference.
			</action>
			<action type="add">
				Server now respects the If-Modified-Since header and will return an HTTP 304 if appropriate
				for read operations.
			</action>
			<action type="fix">
				JPA server did not correctly process :missing qualifier on date parameters
			</action>
			<action type="fix" issue="633">
				AppacheHttpClient did not always respect the charset in the response
				Content-Type header. Thanks to Gijsbert van den Brink for the pull request!
			</action>
			<action type="fix" issue="636">
				Fix XhtmlParser to correctly handle hexadecimal escaped literals. Thanks to
				Gijsbert van den Brink for the Pull Request!
			</action>
			<action type="add">
				JPA server now has configurable properties that allow referential integrity
				to be disabled for both writes and deletes. This is useful in some cases
				where data integrity is not wanted or not possible. It can also be useful
				if you want to delete large amounts of interconnected data quickly.
				<![CDATA[<br/><br/>]]>
				A corresponding flag has been added to the CLI tool as well.
			</action>
			<action type="fix">
				JPA server did not correctly support searching on a custom search parameter whose
				path pointed to an extension, where the client used a chained value.
			</action>
			<action type="fix">
				Fix dependency on commons-codec 1.4 in hapi-fhir-structures-dstu3, which was
				preventing this library from being used on Android because Android includes
				an older version of commons-codec.
			</action>
			<action type="fix">
				JPA server failed to index search parameters on paths containing a decimal 
				data type
			</action>
			<action type="fix">
				Validator incorrectly rejected references where only an identifier was populated
			</action>
			<action type="fix" issue="649">
				Make error handler in the client more tolerant of errors where no response has
				been received by the client when the error happens. Thanks to GitHub
				user maclema for the pull request!
			</action>
			<action type="add">
				Add a check in JPA server that prevents completely blank tags, profiles, and security labels
				from being saved to the database. These were filtered out anyhow when the
				result was returned back to the client but they were persisted which
				just wasted space.
			</action>
			<action type="fix" issue="664">
				Loading the build-in profile structures (StructureDefinition, ValueSet, etc) is now done in 
				a synchronized block in order to prevent multiple loads happening if the server processes
				multiple validations in parallel threads right after startup. Previously a heavy load could
				cause the server to run out of memory and lock up. Thanks to Karl M Davis
				for analysis and help fixing this!
			</action>
			<action type="fix" issue="652">
				Fix bad ValueSet URL in DeviceRequest profile definition for STU3 which 
				was preventing the CLI from uploading definitions correctly. Thanks to
				Joel Schneider for the Pull Request!
			</action>
			<action type="add" issue="656">
				Improve handling in JPA server when doing code:above and code:below
				searches to use a disjunction of AND and IN in order to avoid failures
				under certain conditions. Thanks to Michael Lawley for the pul request!
			</action>
			<action type="fix" issue="660">
				Fix an error where the JPA server sometimes failed occasional requests
				with a weird NullPointerException when running under very large concurrent
				loads. Thanks to Karl M. Davis for reporting, investigating, and ultimately
				finding a solution!
			</action>
		</release>
		<release version="2.4" date="2017-04-19">
			<action type="add">
				This release brings the DSTU3 structures up to FHIR R3 (FHIR 3.0.1) definitions. Note that
				there are very few changes between the DSTU3 structures in HAPI FHIR 2.3 and
				the ones in HAPI FHIR 2.4 since the basis for the DSTU3 structures in HAPI FHIR
				2.3 was the R3 QA FHIR version (1.9.0) but this is the first release of 
				HAPI FHIR to support the final/complete R3 release.
			</action>
			<action type="add">
				Bump the version of a few dependencies to the
				latest versions (dependent HAPI modules listed in brackets):
				<![CDATA[
					<ul>
						<li>Hibernate (JPA): 5.2.7 -&gt; 5.2.9</li>
						<li>Hibernate Search (JPA): 5.5.7.CR1 -&gt; 5.2.7.Final</li>
						<li>Hibernate Validator (JPA): 5.3.4 -&gt; 5.4.1</li>
						<li>Spring (JPA): 4.3.6 -&gt; 4.3.7</li>
						<li>Gson (Core): 2.7 -&gt; 2.8.0</li>
						<li>Guava (JPA): 19.0 -&gt; 21.0</li>
						<li>SLF4j (Core): 1.7.21 -&gt; 1.7.25</li>
						<li>Logback (Core): 1.1.7 -&gt; 1.2.2</li>
					</ul>
				]]>
			</action>
			<action type="add" issue="602">
				hapi-fhir-jpaserver-example now includes the 
				<![CDATA[<code>Prefer</code>]]> header in the list of 
				CORS headers. Thanks to GitHub user @elnin0815 for
				the pull request!
			</action>
			<action type="add">
				AuthorizationInterceptor can now allow make read or write 
				authorization decisions on a resource by instance ID
			</action>
			<action type="fix" issue="208">
				Remove SupportingDocumentation resource from DSTU2 structures. This isn't
				actually a resource in FHIR DSTU2 and its inclusion causes errors on clients
				that don't understand what it is. Thanks to Travis Cummings and Michele Mottini for pointing this out.
			</action>
			<action type="fix" issue="607">
				Web testing UI displayed an error when a transaction was pasted into the UI
				for a DSTU2 server. Thanks to Suresh Kumar for reporting!
			</action>
			<action type="add">
				DaoConfig#setAllowInlineMatchUrlReferences() now defaults to
				<![CDATA[<code>true</code>]]> since inline conditional references
				are now a part of the FHIR specification. Thanks to Jan DÄdek for
				pointing this out!
			</action>
			<action type="add" issue="609">
				hapi-fhir-jpaserver-base now exposes a
				<![CDATA[<code>FhirInstanceValidator</code> bean named <code>"myInstanceValidatorDstu2"</code>]]>
				for DSTU2. A similar bean for DSTU3 was previously implemented.
			</action>
			<action type="add" issue="453">
				hapi-fhir-jpaserver-example project now defaults to STU3 mode instead of
				the previous DSTU2. Thanks to Joel Schneider for the pull request!
			</action>
			<action type="add" issue="534">
				JPA server now has a setting on the DaoConfig to force it to treat
				certain reference URLs or reference URL patterns as logical URLs instead
				of literal ones, meaning that the server will not try to resolve these
				URLs. Thanks to Eeva Turkka for the suggestion!
			</action>
			<action type="add">
				Add a utility method to JPA server: 
				<![CDATA[<code>IFhirResourceDao#removeTag(IIdType, TagTypeEnum, String, String)</code>]]>. This allows client code to remove tags
				from a resource without having a servlet request object in context.
			</action>
			<action type="fix">
				JPA server was unable to process custom search parameters where
				the path pointed to an extension containing a reference. Thanks
				to Ravi Kuchi for reporting!
			</action>
			<action type="fix" issue="623">
				Servers in DSTU2.1 mode were incorrectly using the legacy mimetypes instead
				of the new STU3 ones. Thanks to Michael Lawley for the pull request!
			</action>
			<action type="add" issue="624">
				Add an option to ParserOptions that specifies that when parsing a bundle, the
				ID found in the Bundle.entry.fullUrl should not override the ID found
				in the Resource.id field. Technically these fields must always supply the
				same ID in order for a server to be considered conformant, but this option allows
				you to deal with servers which are behaving badly. Thanks to
				GitHub user CarthageKing for the pul request!
			</action>
			<action type="fix" issue="617">
				Remove unneccesary whitespace in the text areas on the testing
				web UI. Thanks to GitHub user @elnin0815 for the pull request!
			</action>
			<action type="add" issue="613">
				In JAX-RS server it is now possible to change the server exception handler
				at runtime without a server restart.
				Thanks to Sebastien Riviere for the 
				pull request!
			</action>
			<action type="fix" issue="610">
				Fix a potential race condition when the FhirContext is being accessed by many threads
				at the same time right as it is initializing. Thanks to Ben Spencer for the
				pull request!
			</action>
		</release>
		<release version="2.3" date="2017-03-18">
			<action type="add">
				Bump the version of a few dependencies to the
				latest versions (dependent HAPI modules listed in brackets):
				<![CDATA[
					<ul>
						<li>Hibernate (JPA): 5.1.0 -&gt; 5.2.7</li>
						<li>Hibernate Search (JPA): 5.5.4 -&gtp; 5.7.0.CR1</li>
						<li>Hibernate Validator (JPA): 5.2.4 -&gtp; 5.3.4</li>
						<li>Spring (JPA): 4.3.1 -&gt; 4.3.6</li>
					</ul>
				]]>
			</action>
			<action type="add">
				The JPA server now supports custom search parameters in DSTU3
				mode. This allows users to create search parameters which contain
				custom paths, or even override and disable existing search
				parameters.
			</action>
			<action type="fix">
				CLI example uploader couldn't find STU3 examples after CI server
				was moved to build.fhir.org
			</action>
			<action type="fix">
				Fix issue in JPA subscription module that prevented purging stale
				subscriptions when many were present on Postgres
			</action>
			<action type="fix" issue="532">
				Server interceptor methods were being called twice unnecessarily
				by the JPA server, and the DaoConfig interceptor registration 
				framework was not actually useful. Thanks to GitHub user
				@mattiuusitalo for reporting!
			</action>
			<action type="fix" issue="503">
				AuthorizationInterceptor on JPA server did not correctly
				apply rules on deleting resources in a specific compartment
				because the resource metadata was stripped by the JPA server
				before the interceptor could see it. Thanks to
				Eeva Turkka for reporting!
			</action>
			<action type="fix" issue="519">
				JPA server exported CapabilityStatement includes 
				double entries for the _id parameter and uses the
				wrong type (string instead of token). Thanks to 
				Robert Lichtenberger for reporting!
			</action>
			<action type="add" issue="504">
				Custom resource types which extend Binary must not
				have declared extensions since this is invalid in 
				FHIR (and HAPI would just ignore them anyhow). Thanks 
				to Thomas S Berg for reporting!
			</action>
			<action type="add">
				Standard HAPI zip/tar distributions did not include the project
				sources and JavaDoc JARs. Thanks to Keith Boone for pointing
				this out!
			</action>
			<action type="fix">
				Server AuthorizationInterceptor always rejects history operation 
				at the type level even if rules should allow it.
			</action>
			<action type="fix">
				JPA server terminology service was not correctly validating or expanding codes 
				in SNOMED CT or LOINC code systems. Thanks to David Hay for reporting!
			</action>
			<action type="fix" issue="539">
				Attempting to search for an invalid resource type (e.g. GET base/FooResource) should 
				return an HTTP 404 and not a 400, per the HTTP spec. Thanks to 
				GitHub user @CarthageKing for the pull request!
			</action>
			<action type="fix" issue="544">
				When parsing a Bundle containing placeholder fullUrls and references
				(e.g. "urn:uuid:0000-0000") the resource reference targets did not get
				populated with the given resources. Note that as a part of this
				change, <![CDATA[<code>IdType</code> and <code>IdDt</code>]]> have been modified
				so that when parsing a placeholder ID, the complete placeholder including the
				"urn:uuid:" or "urn:oid:" prefix will be placed into the ID part. Previously,
				the prefix was treated as the base URL, which led to strange behaviour
				like the placeholder being treated as a real IDs. Thanks to GitHub
				user @jodue for reporting!
			</action>
			<action type="add">
				Declared extensions with multiple type() options listed in the @Child
				annotation caused a crash on startup. Now this is supported.
			</action>
			<action type="add">
				STU3 XHTML parser for narrative choked if the narrative contained
				an <![CDATA[<code>&amp;rsquot;</code>]]> entity string.
			</action>
			<action type="fix" issue="538">
				When parsing a quantity parameter on the server with a 
				value and units but no system (e.g. 
				<![CDATA[<code>GET [base]/Observation?value=5.4||mg</code>]]>)
				the unit was incorrectly treated as the system. Thanks to
				@CarthageKing for the pull request!
			</action>
			<action type="533">
				Correct a typo in the JPA ValueSet ResourceProvider which prevented
				successful operation under Spring 4.3. Thanks to 
				Robbert van Waveren for the pull request!
			</action>
			<action type="remove">
				Deprecate the method
				<![CDATA[<code>ICompositeElement#getAllPopulatedChildElementsOfType(Class)</code>]]>
				as it is no longer used by HAPI and is just an annoying step
				in creating custom structures. Thanks to Allan Bro Hansen
				for pointing this out.
			</action>
			<action type="fix" issue="547">
				CapturingInterceptor did not buffer the response meaning
				that in many circumstances it did not actually capture
				the response. Thanks to Jenny Syed of Cerner for
				the pull request and contribution!
			</action>
			<action type="fix" issue="548">
				Clean up dependencies and remove Eclipse project files from git. Thanks to
				@sekaijin for the pull request!
			</action>
			<action type="fix">
				When performing a conditional create in a transaction in JPA server, 
				if a resource already existed matching the conditional expression, the 
				server did not change the version of the resource but did update the body
				with the passed in body. Thanks to Artem Sopin for reporting and providing a test
				case for this!
			</action>
			<action type="fix">
				Client revincludes did not include the :recurse modifier. Thanks to
				Jenny Meinsma for pointing this out on Zulip!
			</action>
			<action type="add">
				JPA server did not return an OperationOutcome in the response for
				a normal delete operation.
			</action>
			<action type="fix">
				Fix an issue in JPA server where _history results were kept in memory instead
				of being spooled to the database as they should be. Note that as a part of this fix
				a new method was added to 
				<![CDATA[<code>IBundleProvider</code> called <code>getUuid()</code>]]>. This
				method may return <![CDATA[<code>null</code>]]> in any current cases.
			</action>
			<action type="fix">
				Expanding a ValueSet in JPA server did not correctly apply 
				<![CDATA[<code>?filter=</code>]]> parameter when the ValueSet
				being expanded had codes included explicitly (i.e. not by 
				is-a relationship). Thanks to David Hay for reporting!
			</action>
			<action type="fix">
				JPA validator incorrectly returned an HTTP 400 instead of an HTTP 422 when
				the resource ID was not present and required, or vice versa. Thanks to 
				Brian Postlethwaite for reporting!
			</action>
			<action type="fix">
				When using an annotation based client, a ClassCastException would 
				occur under certain circumstances when the response contained
				contained resources
			</action>
			<action type="fix">
				JPA server interceptor methods for create/update/delete provided
				the wrong version ID to the interceptors
			</action>
			<action type="add">
				A post-processing hook for subclasses of BaseValidatingInterceptor is now available.
			</action>
			<action type="add" issue="585">
				AuthorizationInterceptor can now authorize (allow/deny) extended operations
				on instances and types by wildcard (on any type, or on any instance)
			</action>
			<action type="add" issue="595">
				When RequestValidatingInterceptor is used, the validation results
				are now populated into the OperationOutcome produced by
				create and update operations
			</action>
			<action type="add" issue="542">
				Add support for the $process-message operation to fluent client.
				Thanks to Hugo Soares for the pull request!
			</action>
			<action type="add" issue="543">
				Parser can now be configured when encoding to use a specific
				base URL for extensions. Thanks to Sebastien Riviere for the 
				pull request!
			</action>
			<action type="fix" issue="568">
				Correct the resource paths for the DSTU2.1 validation resources,
				allowing the validator to correctly work against those structures.
				Thanks to Michael Lawley for the pull request!
			</action>
			<action type="fix" issue="551">
				XML Parser failed to parse large field values (greater than 512 Kb)
				on certain platforms where the StAX parser was overridden. Thanks to
				GitHub user @Jodue for the pull request!
			</action>
			<action type="add" issue="575">
				Remove an unneccesary database flush when saving large code systems to
				the JPA database, improving performance of this operation. Thanks to
				Joel Schneider for the pull request and analysis!
			</action>
			<action type="add">
				A new post-processing hook for subclasses of BaseValidatingInterceptor is now
				available. The hook exposes the request details on validation failure prior to throwing an
				UnprocessableEntityException.
			</action>
		</release>
		<release version="2.2" date="2016-12-20">
			<action type="add">
				Bump the version of a few dependencies to the
				latest versions (dependent HAPI modules listed in brackets):
				<![CDATA[
					<ul>
						<!--<li>spring (JPA): 4.3.1 -&gt; 4.3.4</li>-->
						<li>Derby (CLI): 10.12.1.1 -&gt; 10.13.1.1</li>
						<li>Jetty (CLI): 9.3.10.v20160621 -&gt; 9.3.14.v20161028</li>
						<li>JAnsi (CLI): 1.13 -&gt; 1.14</li>
						<li>Phloc Commons (SCH Validator): 4.4.5 -&gt; 4.4.6</li>
					</ul>
				]]>
			</action>
		<action type="fix">
				Fix issue in AuthorizationIntetceptor where
				transactions are blocked even when they
				should not be
			</action>
			<action type="fix">
				Fix regression in HAPI FHIR 2.1 JPA 
				server where some search parameters on
				metadata resources did not appear
				(e.g. "StructureDefinition.url"). Thanks
				to David Hay for reporting!
			</action>
			<action type="add">
				Add ability to JPA server for disabling stale search
				expiry. This is useful if you are deploying the server
				to a cluster.
			</action>
			<action type="fix" issue="495">
				RestfulServer with no explicitly set FhirContext
				fails to detect the presents of DSTU3 structures. Thanks
				to GitHub user @vijayt27 for reporting!
			</action>
			<action type="add">
				As the 
				<![CDATA[<a href="https://github.com/eBay/cors-filter">eBay CORS interceptor</a>]]>
				project
				has gone dormant, we have introduced a new
				HAPI server interceptor which can be used to implement CORS support
				instead of using the previously recommended Servlet Filter. All server
				examples as well as the CLI have been switched to use this new interceptor.
				See the
				<![CDATA[<a href="./doc_cors.html">CORS Documentation</a>]]>
				for more information.
			</action>
			<action type="fix" issue="480">
				Make the parser configurable so that when
				parsing an invalid empty value (e.g.
				<![CDATA[<code>{"status":""}</code>]]>) the
				parser will either throw a meaningful exception
				or log a warning depending on the configured
				error handler.
			</action>
			<action type="fix" issue="276">
				Fix issue when serializing resources that have
				contained resources which are referred to
				from multiple places. Sometimes when serializing
				these resources the contained resource section
				would contain duplicates. Thanks to Hugo Soares
				and Stefan Evinance for reporting and providing
				a test case!
			</action>
			<action type="add" issue="518">
				Allow client to gracefully handle running in DSTU3 mode
				but with a structures JAR that does not contain a
				CapabilityStatement resource. Thanks to Michael Lawley
				for the pull request!
			</action>
			<action type="fix">
				Fix a crash in JPA server when searching using an _include if _include targets are
				external references (and therefore can't be loaded
				by the server). Thanks to Hannes Ulrich for reporting!
			</action>
			<action type="fix">
				HAPI FHIR CLI failed to delete a file when uploading
				example resources while running under Windows.
			</action>
			<action type="fix" issue="521">
				Server should reject update if the resource body
				does not contain an ID, or the ID does not match
				the request URL. Thanks to Jim Steel for reporting!
			</action>
			<action type="fix" issue="500">
				Web Testing UI's next and previous buttons for paging
				through paged results did not work after the migration
				to using Thymeleaf 3. Thanks to GitHub user @gsureshkumar
				for reporting!
			</action>
			<action type="add" issue="525">
				When parsing invalid enum values in STU3,
				report errors through the parserErrorHandler,
				not by throwing an exception. Thanks to 
				Michael Lawley for the pull request!
			</action>
			<action type="add" issue="516">
				When parsing DSTU3 resources with enumerated
				types that contain invalid values, the parser will now
				invoke the parserErrorHandler. For example, when parsing
				<![CDATA[
				<code>{"resourceType":"Patient", "gender":"foo"}</code>
				]]>
				the previous behaviour was to throw an InvalidArgumentException.
				Now, the parserErrorHandler is invoked. In addition, thw
				LenientErrorHandler has been modified so that this one case
				will result in a DataFormatException. This has the effect
				that servers which receive an invalid enum velue will return
				an HTTP 400 instead of an HTTP 500. Thanks to Jim
				Steel for reporting!
			</action>   
			<action type="add" issue="520">
				DSTU3 context now pulls the FHIR version from the actual
				model classes. Thanks to Michael Lawley for the pull request!
			</action>
			<action type="add">
				Enhancements to the tinder-plugin's generic template features
				of the <![CDATA[<i>generate-multi-files</i> and <i>generate-single-file</i>
				Maven goals as well as the Ant <i>hapi-tinder</i> task.
				<ul>
					<li>Provides the full Tinder data model by adding composites, valuesets, and profiles to resourcesw.</li>
					<li>Supports generating files for resources, composites, valuesets, and profiles</li>
					<li>Supports Velocimacro files outside the tinder-plugin JAR</li>
					<li>Provides filename prefix as well as suffix properties</li>
					<li>Can specify any of the Velocity configuration parameters such as
					<i>macro.provide.scope.control</i> which allows safe macro recursion</li>
					<li>Templates can now drill down into the referenced children for a ResourceBlockCopy</li>
					<li>Normalization of properties across all three generic tasks</li>
				</ul>
			    ]]>
			 </action>
			 <action type="fix" issue="523">
				 Fix ordering of validator property handling when an element
				 has a name that is similar to a shorter name[x] style name.
				 Thanks to CarthageKing for the pull request!
			</action>
			<action type="add" issue="510">
				Add a docker configuration to the hapi-fhir-jpaservr-example
				module. Thanks to Gijsbert van den Brink for the pull request!
			</action>
			<action type="add" issue="507">
				Add utility constructors to MoneyDt. Thanks to James Ren for the
				contribution!
			</action>
			<action type="fix" issue="528">
				AuthorizationInterceptor was failing to allow read requests to pass
				when a rule authorized those resources by compartment. Thanks to
				GitHub user @mattiuusitalo for reporting and supplying
				a test case!
			</action>
			<action type="fix">
				Correct a typo in client 
				<![CDATA[<code>IHttpRequest</code>]]> class: "bufferEntitity" should be "bufferEntity".
			</action>
			<action type="add">
				ErrorHandler is now called (resulting in a warning by default, but can also be an exception) when arsing JSON if
				the resource ID is not a JSON string, or an object is found where an array is expected (e.g. repeating field). Thanks
				to Jenni Syed of Cerner for providing a test case!
			</action>
			<action type="fix">
				Fix Web Testing UI to be able to handle STU3 servers which
				return CapabilityStatement instead of the previously used
				"Conformance" resource
			</action>
			<action type="fix">
				CLI example uploader couldn't find STU3 examples after CI server
				was moved to build.fhir.org
			</action>
			<action type="fix">
				Fix issue in JPA subscription module that prevented purging stale
				subscriptions when many were present on Postgres
			</action>
			<action type="fix" issue="532">
				Server interceptor methods were being called twice unnecessarily
				by the JPA server, and the DaoConfig interceptor registration 
				framework was not actually useful. Thanks to GitHub user
				@mattiuusitalo for reporting!
			</action>
			<action type="fix" issue="503">
				AuthorizationInterceptor on JPA server did not correctly
				apply rules on deleting resources in a specific compartment
				because the resource metadata was stripped by the JPA server
				before the interceptor could see it. Thanks to
				Eeva Turkka for reporting!
			</action>
			<action type="fix" issue="519">
				JPA server exported CapabilityStatement includes 
				double entries for the _id parameter and uses the
				wrong type (string instead of token). Thanks to 
				Robert Lichtenberger for reporting!
			</action>
			<action type="add" issue="504">
				Custom resource types which extend Binary must not
				have declared extensions since this is invalid in 
				FHIR (and HAPI would just ignore them anyhow). Thanks 
				to Thomas S Berg for reporting!
			</action>
			<action type="add">
				Standard HAPI zip/tar distributions did not include the project
				sources and JavaDoc JARs. Thanks to Keith Boone for pointing
				this out!
			</action>
			<action type="fix">
				Server AuthorizationInterceptor always rejects history operation 
				at the type level even if rules should allow it.
			</action>
			<action type="fix">
				JPA server terminology service was not correctly validating or expanding codes 
				in SNOMED CT or LOINC code systems. Thanks to David Hay for reporting!
			</action>
			<action type="fix" issue="539">
				Attempting to search for an invalid resource type (e.g. GET base/FooResource) should 
				return an HTTP 404 and not a 400, per the HTTP spec. Thanks to 
				GitHub user @CarthageKing for the pull request!
			</action>
			<action type="fix" issue="544">
				When parsing a Bundle containing placeholder fullUrls and references
				(e.g. "urn:uuid:0000-0000") the resource reference targets did not get
				populated with the given resources. Note that as a part of this
				change, <![CDATA[<code>IdType</code> and <code>IdDt</code>]]> have been modified
				so that when parsing a placeholder ID, the complete placeholder including the
				"urn:uuid:" or "urn:oid:" prefix will be placed into the ID part. Previously,
				the prefix was treated as the base URL, which led to strange behaviour
				like the placeholder being treated as a real IDs. Thanks to GitHub
				user @jodue for reporting!
			</action>
			<action type="add">
				Declared extensions with multiple type() options listed in the @Child
				annotation caused a crash on startup. Now this is supported.
			</action>
			<action type="add">
				STU3 XHTML parser for narrative choked if the narrative contained
				an <![CDATA[<code>&amp;rsquot;</code>]]> entity string.
			</action>
			<action type="fix" issue="538">
				When parsing a quantity parameter on the server with a 
				value and units but no system (e.g. 
				<![CDATA[<code>GET [base]/Observation?value=5.4||mg</code>]]>)
				the unit was incorrectly treated as the system. Thanks to
				@CarthageKing for the pull request!
			</action>
			<action type="533">
				Correct a typo in the JPA ValueSet ResourceProvider which prevented
				successful operation under Spring 4.3. Thanks to 
				Robbert van Waveren for the pull request!
			</action>
			<action type="remove">
				Deprecate the method
				<![CDATA[<code>ICompositeElement#getAllPopulatedChildElementsOfType(Class)</code>]]>
				as it is no longer used by HAPI and is just an annoying step
				in creating custom structures. Thanks to Allan Bro Hansen
				for pointing this out.
			</action>
			<action type="fix" issue="547">
				CapturingInterceptor did not buffer the response meaning
				that in many circumstances it did not actually capture
				the response. Thanks to Jenny Syed of Cerner for
				the pull request and contribution!
			</action>
		</release>
		<release version="2.1" date="2016-11-11">
			<action type="add">
				STU3 structure definitions have been updated to the 
				STU3 latest definitions (1.7.0 - SVN 10129). In 
				particular, this version supports the new CapabilityStatement
				resource which replaces the previous Conformance
				resource (in order to reduce upgrade pain, both resource
				types are included in this version of HAPI)
			</action>
			<action type="add">
				Bump the version of a few dependencies to the
				latest versions (dependent HAPI modules listed in brackets):
				<![CDATA[
					<ul>
						<li>spring-data-orm (JPA): 1.10.2 -&gt; 1.10.4</li>
					</ul>
				]]>
			</action>
			<action type="fix">
				Fix a fairly significant issue in JPA Server when using the <![CDATA[<code>DatabaseBackedPagingProvider</code>]]>: When paging over the results
				of a search / $everything operation, under certain circumstances resources may be missing from the last page of results
				that is returned. Thanks to David Hay for reporting!
			</action>
			<action type="add">
				Client, Server, and JPA server now support experimental support
				for 
				<![CDATA[HTTP PATCH]]>
				using the XML Patch and JSON Patch syntax as explored during the
				September 2016 Baltimore Connectathon. See 
				<![CDATA[<a href="http://wiki.hl7.org/index.php?title=201609_PATCH_Connectathon_Track_Proposal">this wiki page</a>]]>
				for a description of the syntax. 
				<![CDATA[<br/>]]>
				Thanks to Pater Girard for all of his help during the connectathon
				in implementing this feature!
			</action>
			<action type="add">
				Android library now uses OkHttp client by default instead
				of Apache HttpClient. This should lead to much simpler
				support for Android in the future.
			</action>
			<action type="add">
				Both client and server now use the new STU3 mime types by default
				if running in STU3 mode (in other words, using an STU3 
				FhirContext).
			</action>
			<action type="fix">
				In server, when returning a list of resources, the server sometimes failed to add
				<![CDATA[<code>_include</code>]]> resources to the response bundle if they were
				referred to by a contained reosurce. Thanks to Neal Acharya for reporting!				
			</action>
			<action type="fix">
				Fix regression in web testing UI where "prev" and "next" buttons don't work
				when showing a result bundle
			</action>
			<action type="fix">
				JPA server should not attempt to resolve built-in FHIR StructureDefinitions from the 
				database (this causes a significant performance hit when validating)
			</action>
			<action type="fix">
				BanUnsupportedHttpMethodsInterceptor was erroring out when a client
				attempts HTTP HEAD requests
			</action>
			<action type="fix">
				Conditional URLs in JPA server (e.g. for delete or update) did not support the
				<![CDATA[<code>_has</code>]]> parameter
			</action>
			<action type="add" issue="440">
				Remove Maven dependency on Saxon library, as it is not actually used. Thanks
				to Lem Edmondson for the suggestion!
			</action>
			<action type="fix" issue="444">
				Times before 1970 with fractional milliseconds were parsed incorrectly. Thanks
				to GitHub user @CarthageKing for reporting!
			</action>
			<action type="fix" issue="448">
				Prevent crash in parser when parsing resource
				with multiple profile declarations when
				default type for profile is used. Thanks to
				Filip Domazet for the pull request!
			</action>
			<action type="fix" issue="445">
				STU3 servers were adding the old MimeType
				strings to the 
				<![CDATA[<code>Conformance.format</code>]]>
				part of the generated server conformance
				statement
			</action>
			<action type="fix" issue="446">
				When performing an update using the client on a resource that
				contains other resources (e.g. Bundle update), all child resources in the
				parent bundle were incorrectly given the ID of the parent. Thanks
				to Filip Domazet for reporting!
			</action>
			<action type="add">
				STU clients now use an Accept header which 
				indicates support for both the old MimeTypes
				(e.g. <![CDATA[<code>application/xml+fhir</code>]]>)
				and the new MimeTypes
				(e.g. <![CDATA[<code>application/fhir+xml</code>]]>)
			</action>
			<action type="fix">
				JPA server now sends correct 
				<![CDATA[<code>HTTP 409 Version Conflict</code>]]> 
				when a 
				DELETE fails because of constraint issues, instead of
				<![CDATA[<code>HTTP 400 Invalid Request</code>]]> 				
			</action>
			<action type="fix">
				Server history operation did not populate the Bundle.entry.request.url
				field, which is required in order for the bundle to pass validation.
				Thanks to Richard Ettema for spotting this!  
			</action>
			<action type="add">
				Add a new method to the server interceptor framework which will be
				called after all other processing is complete (useful for performance
				tracking). The server LoggingInterceptor has been switched to using this
				method which means that log lines will be created when processing is finished,
				instead of when it started.
			</action>
			<action type="fix">
				STU3 clients were not sending the new mimetype values in the
				<![CDATA[<code>Content-Type</code>]]> header. Thanks to
				Claude Nanjo for pointing this out!
			</action>
			<action type="fix">
				JAX-RS server was not able to handle the new mime types defined
				in STU3
			</action>
			<action type="fix">
				JPA server did not handle custom types when being called
				programatically (I.e. not through HTTP interface). Thanks to
				Anthony Mei for pointing this out!
			</action>
			<action type="fix">
				CLI was not correctly able to upload DSTU2 examples to any server
			</action>
			<action type="fix">
				STU3 validator has been upgrated to include fixes made since the
				1.6.0 ballot
			</action>
			<action type="fix">
				Prevent JPA server from creating a bunch of
				FhirContext objects for versions of FHIR that
				aren't actually being used
			</action>
			<action type="fix" issue="443">
				XhtmlNode.equalsDeep() contained a bug which caused resources
				containing a narrative to always return
				<![CDATA[<code>false</code>]]> for STU3 
				<![CDATA[<code>Resource#equalsDeep()</code>]]>. Thanks to 
				GitHub user @XcrigX for reporting!
			</action>
			<action type="fix" issue="441">
				JPA server did not correctly process searches for chained parameters
				where the chain passed across a field that was a choice between a
				reference and a non-reference type (e.g. 
				<![CDATA[<code>MedicationAdministration.medication[x]</code>]]>. 
				Thanks to GitHub user @Crudelus for reporting!
			</action>
			<action type="fix" issue="414">
				Handle parsing an extension without a URL more gracefully. In HAPI FHIR 2.0 this caused
				a NullPointerException to be thrown. Now it will trigger a warning, or throw a 
				DataFormatException if the StrictErrorHandler is configured on the parser.
			</action>
			<action type="fix">
				Calling a HAPI server URL with a chain on a parameter that shouldn't accept
				chains (e.g.
				<![CDATA[<code>GET [base]/Patient?name.foo=smith</code>]]>)
				did not return an error and instead just ignored the chained part
				and treated the parameter as though it did not have the chain. This
				led to confusing and potentially unsafe behaviour. This has been
				corrected to return an error to the client. Thanks to
				Kevin Tallevi for finding this!
			</action>
			<action type="fix" issue="411">
				Fix #411 - Searching by <![CDATA[<code>POST [base]/_search</code>]]> with urlencoded parameters doesn't work correctly if
				interceptors are accessing the parameters and there is are also
				parameters on the URL. Thanks to Jim Steel for reporting!
			</action>
			<action type="add">
				Fluent client can now return types other than Parameters
				when invoking operations.
			</action>
			<action type="fix">
				JPA server shouldn't report a totalCount in Bundle of "-1" when
				there are no results
			</action>
			<action type="fix" issue="454">
				JPA server was not correctly normalizing strings with non-latin characters
				(e.g. Chinese chars). Thanks to GitHub user @YinAqu for reporting and providing
				some great analysis of the issue! 
			</action>
			<action type="add">
				Add a new method to ReferenceClientParam which allows you to
				pass in a number of IDs by a collection of Strings. Thanks to
				Thomas Andersen for the pul request!
			</action>
			<action type="fix" issue="327">
				When encoding a resource in JSON where the resource has
				an extension with a value where the value is a reference to a 
				contained resource, the reference value (e.g. "#1") did not
				get serialized. Thanks to GitHub user @fw060 for reporting!
			</action>
			<action type="fix" issue="464">
				ResponseHighlighterInterceptor now pretty-prints responses
				by default unless the user has explicitly requested
				a non-pretty-printed response (ie.
				using <![CDATA[<code>?_pretty=false</code>]]>. Thanks to 
				Allan Brohansen and Jens Villadsen for the suggestion!
			</action>
			<action type="add" issue="469">
				Add a new JSON library abstraction layer to the JSON parser.
				This contribution shouldn't have any end-user impact but does
				make it easier to use the JSON parser to generate custom structures
				for other purposes, and should allow us to support RDF more
				easily at some point. Thanks to Bill Denton for the pull
				request and the contribution!
			</action>
			<action type="add" issue="455">
				DSTU1 Bundle encoder did not include the Bundle entry author in
				the generated bundle. Thanks to Hannes Venter for the pull
				request and contribution!
			</action>
			<action type="fix">
				Remove unused field (myIsContained) from ResourceTable
				in JPA server.
			</action>
			<action type="add">
				AuthorizationInterceptor is now a bit more aggressive
				at blocking read operations, stopping them on the
				way in if there is no way they will be accepted
				to the resource check on the way out. In addition
				it can now be configured to allow/deny operation
				invocations at the instance level on any
				instance of a given type
			</action>
			<action type="fix" issue="472">
				STU3 servers were incorrectly returning the 
				<![CDATA[<code>Content-Location</code>]]>
				header instead of the
				<![CDATA[<code>Content</code>]]>
				header. The former has been removed from the 
				FHIR specification in STU3, but the 
				latter got removed in HAPI's code base.
				Thanks to Jim Steel for reporting!
			</action>
			<action type="fix">
				Correct several documentation issues. Thanks to Vadim Peretokin
				for the pull requests!
			</action>
			<action type="add">
				Remove an unneccesary database flush
				from JPA persistence operations
			</action>
			<action type="add" issue="470">
				Add method to fluent client to allow OR search across several
				profiles. Thanks to Thomas Andersen for the pull request!
			</action>
		</release>
		<release version="2.0" date="2016-08-30">
			<action type="fix">
				JSON parsing in HAPI FHIR has been switched from using JSR353 (javax.json) to
				using Google Gson. For this reason we are bumping the major release number to
				2.0. Theoretically this should not affect projects in any major way, but Gson
				does have subtle differences. Two differences which popped up a fair bit in
				our own testing:
				<![CDATA[
				<ul>
					<ul>
						A space is placed after the : in keys, e.g. what was previously
						encoded as <code>"resourceType":"Patient"</code> is now encoded
						as <code>"resourceType": "Patient"</code> (this broke a number of
						our unit tests with hardcoded resource definitions)
					</ul>
					<ul>
						Trailing content after a valid json resource is rejected by
						Gson (it was ignored by the Glassfish parser we were previously
						using even though it was invalid)
					</ul>
				</ul>
				]]>
			</action>
			<action type="add">
				STU3 structure definitions have been updated to the 
				STU3 ballot candidate versions (1.6.0 - SVN 9663)
			</action>
			<action type="add">
				Both client and server now support the new Content Types decided in
				<![CDATA[<a href="http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&tracker_id=677&tracker_item_id=10199">FHIR #10199</a>]]>.
				<![CDATA[<br/><br/>]]>
				This means that the server now supports 
				<![CDATA[<code>application/fhir+xml</code> and <code>application/fhir+json</code>]]>
				in addition to the older style
				<![CDATA[<code>application/xml+fhir</code> and <code>application/json+fhir</code>]]>.
				In order to facilitate migration by implementors, the old style remains the default
				for now, but the server will respond using the new style if the request contains it. The
				client now uses an <![CDATA[<code>Accept</code>]]> header value which requests both 
				styles with a preference given to the new style when running in DSTU3 mode.
				<![CDATA[<br/><br/>]]>
				As a part of this change, the server has also been enhanced so that if a request
				contains a Content-Type header but no Accept header, the response will prefer the
				encoding specified by the Content-Type header.
			</action>
			<action type="add">
				Bump the version of a few dependencies to the
				latest versions (dependent HAPI modules listed in brackets):
				<![CDATA[
					<ul>
						<li>Logback (used in sample projects): 1.1.5 -&gt; 1.1.7</li>
						<li>Phloc Commons (used by schematron validator): 4.4.4 -&gt; 4.4.5</li>
						<li>Commons-IO: 2.4 -&gt; 2.5</li>
						<li>Apache HTTPClient: 4.5.1 -&gt; 4.5.2</li>
						<li>Apache HTTPCore: 4.4.4 -&gt; 4.4.5</li>
						<li>Jersey (JAX-RS tests): 2.22.2 -&gt; 2.23.1</li>
						<li>Spring (JPA, Web Tester): 4.3.0 -&gt; 4.3.1</li>
						<!--<li>Hibernate ORM (JPA): 5.1.0 -&gt; 5.2.1</li>-->
						<li>Hibernate Search (JPA): 5.5.2 -&gt; 5.5.4</li>
						<li>Thymeleaf (Narrative Generator / Web Tester): 2.1.4 -&gt;3.0.1</li> 
					</ul>
				]]>
			</action>
	
			<action type="fix">
				Fix issue in DSTU1 Bundle parsing where unexpected elements in the bundle resulted in a failure
				to parse.
			</action>
			<action type="fix">
				DSTU2 QuestionnaireResponse validator failed with an exception if the
				QuestionnaireResponse contained certain groups with no content
			</action>
			<action type="add" issue="150">
				Fluent client should ignore parameter values which are null instead of including
				them as <![CDATA[<code>?foo=null</code>]]>
			</action>
			<action type="fix">
				When using <![CDATA[<code>_elements</code>]]> parameter on server, the server was not
				automatically adding the <![CDATA[<code>SUBSETTED</code>]]> tag as it should
			</action>
			<action type="fix">
				JPA server should now automatically detect
				if Hibernate Search (Lucene) is configured to be
				disabled and will not attempt to use it. This
				prevents a crash for some operations.
			</action>
			<action type="add">
				A new server interceptor "BanUnsupprtedHttpMethodsInterceptor" has been added
				which causes the server to return an HTTP 405 if an unsupported HTTP
				verb is received from the client
			</action>
			<action type="fix" issue="404">
				Fix an issue where resource IDs were not correctly set when using
				DSTU2 HL7org structures with the JAX-RS module. Thanks to Carlo Mion
				for the pull request!
			</action>
			<action type="fix">
				hapi-fhir-testpage-overlay project contained an unneccesary 
				dependency on hapi-fhir-jpaserver-base module, which resulted in 
				projects using the overlay having a large number of unnneded
				JARs included
			</action>
			<action type="add" issue="403">
				It is not possible to configure both the parser and the context to
				preserve versions in resource references (default behaviour is to 
				strip versions from references). Thanks to GitHub user @cknaap
				for the suggestion!
			</action>
			<action type="fix" issue="409">
				<![CDATA[<code>Tag#setCode(String)</code>]]> did not actually set the code it was supposed to
				set. Thanks to Tim Tschampel for reporting!
			</action>
			<action type="fix" issue="401">
				JPA server's <![CDATA[<code>/Bundle</code>]]> endpoint cleared 
				the <![CDATA[<code>Bundle.entry.fullUrl</code>]]> field on stored
				bundles, resulting in invalid content being saved. Thanks to Mirjam
				Baltus for reporting!
			</action>
			<action type="fix">
				JPA server now returns HTTP 200 instead of HTTP 404 for
				conditional deletes which did not find any matches,
				per FHIR-I decision.
			</action>
			<action type="fix">
				Client that declares explicitly that it is searching/reading/etc for
				a custom type did not automatically parse into that type.
			</action>
			<action type="add" issue="406">
				Allow servers to specify the authentication realm of their choosing when 
				throwing an AuthenticationException. Thanks to GitHub user @allanbrohansen
				for the suggestion!
			</action>
			<action type="add" issue="416">
				Add a new client implementation which uses the 
				<![CDATA[<a href="http://square.github.io/okhttp/">OkHttp</a>]]>
				library as the HTTP client implementation (instead of Apache HttpClient).
				This is particularly useful for Android (where HttpClient is a pain) but
				could also be useful in other places too.
				Thanks to Matt Clarke of Orion Health for the contribution!
			</action>
			<action type="fix">
				Fix a regression when parsing resources that have contained
				resources, where the reference in the outer resource  which 
				links to the contained resource sometimes did does not get
				populated with the actual target resource instance. Thanks to
				Neal Acharya for reporting!
			</action>
			<action type="add">
				hapi-fhir-cli upload-terminology command now has an argument
				"-b FOO" that lets you add an authorization header in the form
				<![CDATA[<code>Authorization: Bearer FOO</code>]]>
			</action>
			<action type="fix" issue="423">
				Parser failed to successfully encode a custom resource
				if it contained custom fields that also used custom
				types. Thanks to GitHub user @sjanic for reporting!
			</action>
			<action type="add">
				Inprove handling of _text and _content searches in JPA server to do better
				matching on partial strings
			</action>
			<action type="add">
				Servers in STU3 mode will now ignore any ID or VersionID found in the
				resource body provided by the client when processing FHIR
				<![CDATA[<code>update</code>]]> operations. This change has been made
				because the FHIR specification now requires servers to ignore
				these values. Note that as a result of this change, resources passed
				to <![CDATA[<code>@Update</code>]]> methods will always have 
				<![CDATA[<code>null</code>]]> ID
			</action>
			<action type="add">
				Add new methods to 
				<![CDATA[<code>AuthorizationInterceptor</code>]]>
				which allow user code to declare support for conditional
				create, update, and delete. 
			</action>
			<action type="fix">
				When encoding a resource with a reference to another resource
				that has a placeholder ID (e.g. urn:uuid:foo), the urn prefix
				was incorrectly stripped from the reference.
			</action>
			<action type="fix">
				Servers for STU3 (or newer) will no longer include a 
				<![CDATA[<code>Location:</code>]]> header on responses for 
				<![CDATA[<code>read</code>]]> operations. This header was
				required in earlier versions of FHIR but has been removed
				from the specification.
			</action>
			<action type="fix" issue="428">
				Fix NullPointerException when encoding an extension containing CodeableConcept
				with log level set to TRACE. Thanks to Bill Denton for the report!
			</action>
			<action type="add">
				Add two new methods to the parser error handler that let users trap
				invalid contained resources with no ID, as well as references to contained
				resource that do not exist.
			</action>
			<action type="add">
				Improve performance when parsing resources containing contained resources
				by eliminating a step where references were woven twice
			</action>
			<action type="fix" issue="426">
				Parser failed to parse resources containing an extension with a value type of
				"id". Thanks to Raphael MÃ¤der for reporting!  
			</action>
			<action type="fix">
				When committing a transaction in JPA server
				where the transaction contained placeholder IDs
				for references between bundles, the placeholder
				IDs were not substituted with viewing
				resources using the _history operation
			</action>
			<action type="add">
				HAPI root pom shouldn't include animal-sniffer plugin,
				since that causes any projects which extend this to 
				be held to Java 6 compliance.
			</action>
		</release>
		<release version="1.6" date="2016-07-07">
			<action type="fix">
				Performance has been improved for the initial FhirContext
				object creation by avoiding a lot of unnecessary reflection. HAPI FHIR
				1.5 had a regression compared to previous releases
				and this has been corrected, but other improvements have been
				made so that this release is faster than previous releases too.
				<![CDATA[<br/><br/>]]>
				In addition, a new "deferred scan" mode has been implemented for
				even faster initialization on slower environments (e.g. Android).
				See the <![CDATA[<a href="./doc_rest_client_http_config.html#performance">performance documentation</a>]]>
				for more information.
				<![CDATA[<br/><br/>]]>
				The following shows our benchmarks for context initialization across several
				versions of HAPI:
				<![CDATA[
					<ul>
						<li>Version 1.4: <b>560ms</b></li>
						<li>Version 1.5: <b>800ms</b></li>
						<li>Version 1.6: <b>340ms</b></li>
						<li>Version 1.6 (deferred mode): <b>240ms</b></li>
					</ul>
				]]>
			</action>
			<action type="add">
				Bump the version of a few dependencies to the
				latest versions (dependent HAPI modules listed in brackets):
				<![CDATA[
					<ul>
						<li>Spring (JPA, Web Tester): 4.2.5 -&gt; 4.3.0</li>
						<li>Spring-Data (JPA): 1.9.2 -&gt; 1.10.1</li>
						<!--<li>Hibernate ORM (JPA): 5.1.0 -&gt; 5.2.0</li>-->
						<li>Hibernate Search (JPA): 5.5.2 -&gt; 5.5.3</li>
						<li>Jetty (CLI): 9.3.9 -&gt; 9.3.10</li>
					</ul>
				]]>
			</action>
			<action type="remove">
				Remove some clases that were deprecated over a year ago and have
				suitable replacements:
				<![CDATA[
					<ul>
						<li>QualifiedDateParam has been removed, but DateParam may be used instead</li>
						<li>PathSpecification has been removedm but Include may be used instead</li>
					</ul>
				]]>
			</action>
			<action type="fix" issue="345">
				ResponseValidatingInterceptor threw an InternalErrorException (HTTP 500) for operations
				that do not return any content (e.g. delete). Thanks to Mohammad Jafari for reporting!
			</action>
			<action type="fix" issue="342">
				REST server now throws an HTTP 400 instead of an HTTP 500 if an operation which takes
				a FHIR resource in the request body (e.g. create, update) contains invalid content that
				the parser is unable to parse. Thanks to Jim Steel for the suggestion!				
			</action>
			<action type="add">
				Deprecate fluent client search operations without an explicit declaration of the
				bundle type being used. This also means that in a client 
				<![CDATA[<code>.search()</code>]]>
				operation, the
				<![CDATA[<code>.returnBundle(Bundle.class)</code>]]>
				needs to be the last statement before
				<![CDATA[<code>.execute()</code>]]>
			</action>
			<action type="add" issue="346">
				Server now respects the parameter <![CDATA[<code>_format=application/xml+fhir"</code>]]>
				which is technically invalid since the + should be escaped, but is likely to be used. Also,
				a parameter of <![CDATA[<code>_format=html</code>]]> can now be used, which 
				forces SyntaxHighlightingInterceptor to use HTML even
				if the headers wouldn't otherwise trigger it.
				Thanks to Jim Steel for reporting!
			</action>
			<action type="fix">
				Improve performance when parsing large bundles by fixing a loop over all of the
				entries inthe bundle to stitch together cross-references, which was happening once
				per entry instead of once overall. Thanks to Erick on the HAPI FHIR Google Group for
				noticing that this was an issue!
			</action>
			<action type="remove">
				JSON parser no longer allows the resource ID to be specified in an element called "_id"
				(the correct one is "id"). Previously _id was allowed because some early FHIR examples
				used that form, but this was never actually valid so it is now being removed.
			</action>
			<action type="add">
				JPA server now allows "forced IDs" (ids containing non-numeric, client assigned IDs)
				to use the same logical ID part on different resource types. E.g. A server may now have
				both Patient/foo and Obervation/foo on the same server.<![CDATA[<br/><br/>]]>
				Note that existing databases will need to modify index "IDX_FORCEDID" as
				it is no longer unique, and perform a reindexing pass.
			</action>
			<action type="fix" issue="350">
				When serializing/encoding custom types which replace exsting choice fields by
				fixing the choice to a single type, the parser would forget that the
				field was a choice and would use the wrong name (e.g. "abatement" instead of
				"abatementDateType"). Thanks to Yaroslav Kovbas for reporting and
				providing a unit test! 
			</action>
			<action type="fix">
				JPA server transactions sometimes created an incorrect resource reference
				if a resource being saved contained references that had a display value but
				not an actual reference. Thanks to David Hay for reporting!
			</action>
			<action type="add" issue="352">
				When performing a REST Client create or update with
				<![CDATA[<code>Prefer: return=representation</code>]]> set,
				if the server does not honour the Prefer header, the client
				will automatically fetch the resource before returning. Thanks
				to Ewout Kramer for the idea!  
			</action>
			<action type="add" issue="354">
				DSTU3 structures now have 
				<![CDATA[<code>setFoo(List)</code>]]>
				and 
				<![CDATA[<code>setGetFooFirstRep()</code>]]>
				methods, bringing them back to parity with the HAPI
				DSTU2 structures. Thanks to Rahul Somasunderam and
				Claude Nanjo for the suggestions! 
			</action>
			<action type="add">
				JPA server has now been refactored to use the
				new FluentPath search parameter definitions
				for DSTU3 resources.
			</action>
			<action type="add">
				RequestValidatingInterceptor and ResponseValidatingInterceptor
				both have new method <![CDATA[<code>setIgnoreValidatorExceptions</code>]]>
				which causes validator exceptions to be ignored, rather than causing
				processing to be aborted.
			</action>
			<action type="add">
				LoggingInterceptor on server has a new parameter 
				<![CDATA[<code>${requestBodyFhir}</code>]]> which logs the entire request body.
			</action>
			<action type="add" issue="355">
				JAX-RS server module now supports DSTU3 resources (previously it only supported DSTU2). Thanks
				to Phillip Warner for implementing this, and providing a pull request!
			</action>
			<action type="fix" issue="356">
				Generated conformance statements for DSTU3 servers did not properly reference their
				OperationDefinitions. Thanks
				to Phillip Warner for implementing this, and providing a pull request!
			</action>
			<action type="fix" issue="359">
				Properly handle null arrays when parsing JSON resources. Thanks to Subhro for
				fixing this and providing a pull request!
			</action>
			<action type="fix">
				STU3 validator failed to validate codes where the
				code was a child code within the code system that contained it
				(i.e. not a top level code). Thanks to Jon
				Zammit for reporting!
			</action>
			<action type="fix" issue="361">
				Restore the setType method in the DSTU1 Bundle
				class, as it was accidentally commented out. Thanks
				to GitHub user @Virdulys for the pull request!
			</action>
			<action type="add">
				JPA server now supports composite search parameters
				where the type of the composite parameter is
				a quantity (e.g. Observation:component-code-component-value-quantity)
			</action>
			<action type="remove">
				Remove the Remittance resource from DSTU2
				structures, as it is not a real resource and
				was causing issues with interoperability
				with the .NET client.
			</action>
			<action type="fix">
				CLI tool cache feature (-c) for upload-example task sometimes failed
				to write cache file and exited with an exception.
			</action>
			<action type="fix">
				Fix error message in web testing UI when loading pages in a search
				result for STU3 endpoints.
			</action>
			<action type="fix">
				When encoding JSON resource, the parser will now always
				ensure that XHTML narrative content has an 
				XHTML namespace declaration on the first
				DIV tag. This was preventing validation for
				some resources using the official validator
				rules.
			</action>
			<action type="fix">
				Server failed to invoke operations when the name
				was escaped (%24execute instead of $execute). 
				Thanks to Michael Lawley for reporting!
			</action>
			<action type="fix">
				JPA server transactions containing a bundle that has multiple entries
				trying to delete the same resource caused a 500 internal error
			</action>
			<action type="fix">
				JPA module failed to index search parameters that mapped to a Timing datatype,
				e.g. CarePlan:activitydate
			</action>
			<action type="add">
				Add a new option to the CLI run-server command called <![CDATA[<code>--lowmem</code>]]>.
				This option disables some features (e.g. fulltext search) in order to allow the
				server to start in memory-constrained environments (e.g Raspberry Pi)
			</action>
			<action type="add">
				When updating a resource via an update operation on the server, if the ID of the
				resource is not present in the resource body but is present on the URL, this will
				now be treated as a warning instead of as a failure in order to be a bit more
				tolerant of errors. If the ID is present in the body but does not agree with the 
				ID in the URL this remains an error.
			</action>
			<action type="fix">
				Server / JPA server date range search params (e.g. Encounter:date) now treat
				a single date with no comparator (or the eq comparator) as requiring that the
				value be completely contained by the range specified. Thanks to Chris Moesel
				for the suggestion.
			</action>
			<action type="fix">
				In server, if a parameter was annotated with the <![CDATA[@Count]]> annotation, the
				count would not appear in the self/prev/next links and would not actually be applied
				to the search results by the server. Thanks to Jim Steele for letting us know!
			</action>
			<action type="fix">
				Conditional update on server failed to process if the conditional URL did not have any
				search parameters that did not start with an underscore. E.g. "Patient?_id=1" failed
				even though this is a valid conditional reference.
			</action>
			<action type="add" issue="363">
				JPA server can now be configured to allow external references (i.e. references that
				point to resources on other servers). See 
				<![CDATA[<a href="./doc_jpa.html">JPA Documentation</a>]]> for information on
				how to use this. Thanks to Naminder Soorma for the suggestion! 
			</action>
			<action type="fix" issue="366">
				When posting a resource to a server that contains an invalid value in a boolean field
				(e.g. Patient with an active value of "1") the server should return an HTTP 400, not
				an HTTP 500. Thanks to Jim Steel for reporting!
			</action>
			<action type="fix" issue="364">
				Enable parsers to parse and serialize custom resources that contain custom datatypes.
				An example has been added which shows how to do this
				<![CDATA[<a href="./doc_custom_structures.html">here</a>]]>
			</action>
			<action type="fix">
				JSON parser was incorrectly encoding resource language attribute in JSON as an 
				array instead of a string. Thanks to David Hay for reporting! 
			</action>
			<action type="add" issue="367">
				SÃ©bastien RiviÃ¨re contributed an excellent pull request which adds a 
				number of enhancements to JAX-RS module:
				<![CDATA[
				<ul>
				<li>Enable the conditional update and delete</li>
				<li>Creation of a bundle provider, and support of the @Transaction</li>
				<li>Bug fix on the exceptions handling as some exceptions throw outside bean context were not intercept.</li>
				<li>Add the possibility to have the stacktrace in the jaxrsException</li>
				</ul>
				]]>
			</action>
			<action type="fix" issue="369">
				FhirTerser.cloneInto method failed to clone correctly if the source 
				had any extensions. Thanks to GitHub user @Virdulys for submitting and
				providing a test case!
			</action>
			<action type="add">
				Update DSTU2 InstanceValidator to latest version from upstream 
			</action>
			<action type="fix">
				Web Testing UI was not able to correctly post an STU3 transaction
			</action>
			<action type="fix">
				DateTime parser incorrectly parsed times where more than 3 digits of
				precision were provided on the seconds after the decimal point
			</action>
			<action type="add">
				Improve error messages when the $validate operation is called but no resource
				is actually supplied to validate
			</action>
			<action type="remove">
				DSTU2+ servers no longer return the Category header, as this has been
				removed from the FHIR specification (and tags are now available in the
				resource body so the header was duplication/wasted bandwidth)
			</action>
			<action type="fix" issue="374">
				Create and Update operations in server did not
				include ETag or Last-Modified headers even though
				the spec says they should. Thanks to Jim Steel for
				reporting!
			</action>
			<action type="fix" issue="371">
				Update STU3 client and server to use the new sort parameter style (param1,-param2,param). Thanks to GitHub user @euz1e4r for
				reporting!
			</action>
			<action type="fix">
				QuantityClientParam#withUnit(String) put the unit into the system part of the
				parameter value
			</action>
			<action type="fix">
				Fluent client searches with date parameters were not correctly using
				new prefix style (e.g. gt) instead of old one (e.g. &gt;) 
			</action>
			<action type="fix" issue="370">
				Some built-in v3 code systems for STU3 resources were missing
				certain codes, which caused false failures when validating
				resources. Thanks to GitHub user @Xoude for reporting!
			</action>
			<action type="fix" issue="365">
				Some methods on DSTU2 model structures have JavaDocs that
				incorrectly claim that the method will not return null when
				in fact it can. Thanks to Rick Riemer for reporting!
			</action>
			<action type="add">
				ResponseHighlightingInterceptor has been modified based on consensus
				on Zulip with Grahame that requests that have a parameter of
				<![CDATA[<code>_format=json</code>]]> or
				<![CDATA[<code>_format=xml</code>]]> will output raw FHIR content
				instead of HTML highlighting the content as they previously did. 
				HTML content can now be forced via the (previously existing)
				<![CDATA[<code>_format=html</code>]]> or via the two newly added
				values
				<![CDATA[<code>_format=html/json</code>]]> and
				<![CDATA[<code>_format=html/xml</code>]]>. Because of this
				change, the custom
				<![CDATA[<code>_raw=true</code>]]> mode has been deprecated and
				will be removed at some point.
			</action>
			<action type="fix" issue="267">
				Operation definitions (e.g. for $everything operation) in the generated
				server conformance statement should not include the $ prefix in the operation
				name or code. Thanks to Dion McMurtrie for reporting!
			</action>
			<action type="fix" issue="378">
				Server generated OperationDefinition resources did not validate
				due to some missing elements (kind, status, etc.).
				Thanks to
				Michael Lawley for reporting!
			</action>
			<action type="fix" issue="379">
				Operations that are defined on multiple resource provider types with
				the same name (e.g. "$everything") are now automatically exposed by the server
				as separate OperationDefinition resources per resource type. Thanks to
				Michael Lawley for reporting!
			</action>
			<action type="fix" issue="380">
				OperationDefinition resources generated automatically by the server for operations
				that are defined within resource/plain providers incorrectly stated that
				the maximum cardinality was "*" for non-collection types with no explicit
				maximum stated, which is not the behaviour that the JavaDoc on the
				<![CDATA[@OperationParam]]> annotation describes. Thanks to Michael Lawley
				for reporting!
			</action>
			<action type="fix">
				Server parameters annotated with 
				<![CDATA[<code>@Since</code>]]>
				or
				<![CDATA[<code>@Count</code>]]>
				which are of a FHIR type such as IntegerDt or DateTimeType will
				now be set to null if the client's URL does not
				contain this parameter. Previously they would be populated
				with an empty instance of the FHIR type, which was inconsistent with
				the way other server parameters worked.
			</action>
			<action type="add">
				Server now supports the _at parameter (including multiple repetitions) 
				for history operation
			</action>
			<!--
			This one actually doesn't seem possible without using a deprecated servlet API
			<action type="fix">
				When throwing UnclassifiedServerException in server methods, the HTTP response
				status line contained the response code specified in the exception, but not the
				response message
			</action>
			-->
			<action type="add">
				AuthorizationInterceptor can now allow or deny requests to extended
				operations (e.g. $everything)
			</action>
			<action type="fix">
				DecimalType used BigDecimal constructor instead of valueOf method to
				create a BigDecimal from a double, resulting in weird floating point
				conversions. Thanks to Craig McClendon for reporting!
			</action>
			<action type="fix" issue="394">
				Remove the depdendency on a method from commons-lang3 3.3 which was
				causing issues on some Android phones which come with an older version
				of this library bundled. Thanks to Paolo Perliti for reporting!
			</action>
			<action type="fix">
				Parser is now better able to handle encoding fields which have been
				populated with a class that extends the expected class
			</action>
			<action type="fix">
				When declaring a child with 
				<![CDATA[<code>order=Child.REPLACE_PARENT</code>]]>
				the serialized form still put the element at the
				end of the resource instead of in the correct
				order
			</action>
			<action type="fix">
				Fix STU3 JPA resource providers to allow validate operation 
				at instance level
			</action>
		</release>
		<release version="1.5" date="2016-04-20">
			<action type="fix" issue="339">
				Security Fix: XML parser was vulnerable to XXE (XML External Entity) 
				processing, which could result in local files on disk being disclosed.
				See <![CDATA[<a href="https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing">this page</a>]]>
				for more information.
				Thanks to Jim Steel for reporting!
			</action>
			<action type="add">
				Bump the version of a few dependencies to the
				latest versions (dependent HAPI modules listed in brackets):
				<![CDATA[
					<ul>
						<li>Hibernate (JPA, Web Tester): 5.0.7 -&gt; 5.1.0</li>
						<li>Spring (JPA, Web Tester): 4.2.4 -&gt; 4.2.5</li>
						<li>SLF4j (All): 1.7.14 -&gt; 1.7.21</li>
					</ul>
				]]>
			</action>
			<action type="add">
				Support comments when parsing and encoding both JSON and XML. Comments are retrieved
				and added to the newly created methods 
				IBase#getFormatCommentsPre() and
				IBase#getFormatCommentsPost()
			</action>
			<action type="add" issue="293">
				Added options to the CLI upload-examples command which allow it to cache
				the downloaded content file, or use an arbitrary one. Thanks to Adam Carbone
				for the pull request!
			</action>
			<action type="fix">
				REST search parameters with a prefix/comparator had not been updated to use
				the DSTU2 style prefixes (gt2011-01-10) instead of the DSTU1 style prefixes
				(&gt;2011-01-01). The client has been updated so that it uses the new prefixes
				if the client has a DSTU2+ context. The server has been updated so that it now
				supports both styles.
				<![CDATA[<br/><br/>]]>
				As a part of this change, a new enum called
				<![CDATA[<a href="./apidocs/ca/uhn/fhir/rest/param/ParamPrefixEnum.html">ParamPrefixEnum</a>]]>
				has been introduced. This enum replaces the old 
				<![CDATA[<a href="./apidocs/ca/uhn/fhir/model/dstu/valueset/QuantityCompararatorEnum.html">QuantityCompararatorEnum</a>]]>
				which has a typo in its name and can not represent several new prefixes added since 
				DSTU1.
			</action>
			<action type="add">
				JPA server number and quantity search params now follow the rules for the
				use of precision in search terms outlined in the
				<![CDATA[<a href="https://www.hl7.org/fhir/search.html">search page</a>]]> of the
				FHIR specification. For example, previously a 1% tolerance was applied for
				all searches (10% for approximate search). Now, a tolerance which respects the
				precision of the search term is used (but still 10% for approximate search).
			</action>
			<action type="fix" issue="291">
				Fix a failure starting the REST server if a method returns an untyped List, which
				among other things prevented resource provider added to the server
				as CDI beans in a JBoss enviroment. Thanks to GitHub user fw060 (Fei) for
				reporting and figuring out exactly why this wasn't working!
			</action>
			<action type="add">
				JPA server now supports :above and :below qualifiers on URI search params
			</action>
			<action type="add">
				Add optional support (disabled by default for now) to JPA server to support
				inline references containing search URLs. These URLs will be resolved when
				a resource is being created/updated and replaced with the single matching
				resource. This is being used as a part of the May 2016 Connectathon for
				a testing scenario.
			</action>
			<action type="add">
				The server no longer adds a 
				<![CDATA[<code>WWW-Authenticate</code>]]>
				header to the response if any resource provider code throws an
				<![CDATA[<code>AuthenticationException</code>]]>. This header is 
				used for interactive authentication, which isn't generally 
				appropriate for FHIR. We added code to add this header a long time
				ago for testing purposes and it never got removed. Please let us
				know if you need the ability to add this header automatically. Thanks
				to Lars Kristian Roland for pointing this out.
			</action>
			<action type="fix">
				In the client, the create/update operations on a Binary resource 
				(which use the raw binary's content type as opposed to the FHIR
				content type) were not including any request headers (Content-Type, 
				User-Agent, etc.) Thanks to Peter Van Houte of Agfa Healthcare for
				reporting!
			</action>
			<action type="fix">
				Handling of Binary resources containing embedded FHIR resources for
				create/update/etc operations has been corrected per the FHIR rules
				outlined at
				<![CDATA[<a href="http://hl7.org/fhir/binary.html">Binary Resource</a>]]>
				in both the client and server. 
				<![CDATA[<br/><br/>]]>
				Essentially, if the Binary contains something
				that isn't FHIR (e.g. an image with an image content-type) the
				client will send the raw data with the image content type to the server. The
				server will place the content type and raw data into a Binary resource instance
				and pass those to the resource provider. This part was already correct previous
				to 1.5. 
				<![CDATA[<br/><br/>]]>
				On the other hand, if the Binary contains a FHIR content type, the Binary
				is now sent by the client to the server as a Binary resource with a FHIR content-type,
				and the embedded FHIR content is contained in the appropriate fields. The server
				will pass this &quot;outer&quot; Binary resource to the resource provider code. 
			</action>
			<action type="add">
				The RequestDetails and ActionRequestDetails objects which are passed to 
				server interceptor methods and may also be used as server provider method
				arguments now has a new method 
				<![CDATA[
				<code>Map&lt;String, String&gt; getUserData()</code>
				]]>
				which can be used to pass data and objects between interceptor methods to
				to providers. This can be useful, for instance, if an authorization
				interceptor wants to pass the logged in user's details to other parts
				of the server.
			</action>
			<action type="fix" issue="297">
				<![CDATA[When <code>IServerInterceptor#incomingRequestPreHandled()</code> is called 
				for a <code>@Validate</code> method, the resource was not populated in the
				<code>ActionRequestDetails</code> argument. Thanks to Ravi Kuchi for reporting!	
				]]>
			</action>
			<action type="fix" issue="298">
				<![CDATA[
					Request to server at <code>[baseUrl]/metadata</code> with an HTTP method
					other than GET (e.g. POST, PUT) should result in an HTTP 405. Thanks to 
					Michael Lawley for reporting! 
				]]>
			</action>
			<action type="fix" issue="302">
				Fix a server exception when trying to automatically add the profile tag
				to a resource which already has one or more profiles set. Thanks to
				Magnus Vinther for reporting!
			</action>
			<action type="fix" issue="296">
				QuantityParam parameters being used in the RESTful server were ignoring
				the 
				<![CDATA[<code>:missing</code>]]> 
				qualifier. Thanks to Alexander Takacs for reporting!
			</action>
			<action type="fix" issue="299">
				Annotation client failed with an exception if the response contained
				extensions on fields in the resonse Bundle (e.g. Bundle.entry.search).
				Thanks to GitHub user am202 for reporting! 
			</action>
			<action type="fix" issue="274">
				Primitive elements with no value but an extension were sometimes not
				encoded correctly in XML, and sometimes not parsed correctly in JSON.
				Thanks to Bill de Beaubien for reporting!
			</action>
			<action type="fix" issue="280">
				The Web Testing UI has long had an issue where if you click on a button which 
				navigates to a new page (e.g. search, read, etc) and then click the back button
				to return to the original page, the button you clicked remains disabled and can't
				be clicked again (on Firefox and Safari). This is now fixed. Unfortunately the fix means that the
				buttom will no longer show a "loading" spinner, but there doesn't seem to 
				be another way of fixing this. Thanks to Mark Scrimshire for reporting! 
			</action>
			<action type="fix">
				Extensions found while parsing an object that doesn't support extensions are now
				reported using the IParserErrorHandler framework in the same way that
				other similar errors are handled. This allows the parser to be more lenient
				when needed.
			</action>
			<action type="add" issue="304">
				Improve error message if incorrect type is placed in a list field in the data model. Java
				uses generics to prevent this at compile time, but if someone is in an environment without 
				generics this helps improve the error message at runtime. Thanks to Hugo Soares for
				suggesting.
			</action>
			<action type="fix" issue="308">
				Prevent an unneeded warning when parsing a resource containing
				a declared extension. Thanks to Matt Blanchette for reporting!
			</action>
			<action type="fix">
				Web Tester UI did not invoke VRead even if a version ID was specified. Thanks
				to Poseidon for reporting!
			</action>
			<action type="add">
				Per discussion on the FHIR implementer chat, the JPA server no
				longer includes _revinclude matches in the Bundle.total count, or the
				page size limit.
			</action>
			<action type="add">
				JPA server now persists search results to the database in a new table where they 
				can be temporaily preserved. This makes the JPA server much more scalable, since it
				no longer needs to store large lists of pages in memory between search invocations.
				<![CDATA[<br/><br/>]]>
				Old searches are deleted after an hour by default, but this can be changed
				via a setting in the DaoConfig.
			</action>
			<action type="add">
				JPA servers' resource version history mechanism 
				has been adjusted so that the history table
				keeps a record of all versions including the
				current version. This has the very helpful
				side effect that history no longer needs to be
				paged into memory as a complete set. Previously
				history had a hard limit of only being able to 
				page the most recent 20000 entries. Now it has
				no limit.
			</action>
			<action type="fix">
				JPA server returned the wrong Bundle.type value (COLLECTION, should be SEARCHSET)
				for $everything operation responses. Thanks to Sonali Somase for reporting!				
			</action>
			<action type="fix" issue="305">
				REST and JPA server should reject update requests where the resource body does not
				contain an ID, or contains an ID which does not match the URL. Previously these
				were accepted (the URL ID was trusted) which is incorrect according to the
				FHIR specification. Thanks to GitHub user ametke for reporting!
				<![CDATA[<br/><br/>]]>
				As a part of this change, server error messages were also improved for
				requests where the URL does not contain an ID but needs to (e.g. for
				an update) or contains an ID but shouldn't (e.g. for a create)				
			</action>
			<action type="fix">
				When fields of type BoundCodeDt (e.g. Patient.gender)
				are serialized and deserialized using Java's native
				object serialization, the enum binder was not
				serialized too. This meant that values for the
				field in the deserialized object could not be
				modified. Thanks to Thomas Andersen for reporting!
			</action>
			<action type="fix" issue="313">
				REST Server responded to HTTP OPTIONS requests with 
				any URI as being a request for the server's
				Conformance statement. This is incorrect, as only
				a request for <![CDATA[<code>OPTIONS [base url]</code>]]> should be treated as such. Thanks to Michael Lawley for reporting!
			</action>
			<action type="fix">
				REST annotation style client was not able to handle extended operations
				($foo) where the response from the server was a raw resource instead
				of a Parameters resource. Thanks to Andrew Michael Martin for reporting!
			</action>
			<action type="add">
				JPA server applies _lastUpdated filter inline with other searches wherever possible
				instead of applying this filter as a second query against the results of the 
				first query. This should improve performance when searching against large
				datasets.
			</action>
			<action type="add">
				Parsers have new method 
				<![CDATA[<code>setDontEncodeElements</code>]]>
				which can be used to force the parser to not encode certain elements
				in a resource when serializing. For example this can be used to omit
				sensitive data or skip the resource metadata.
			</action>
			<action type="add">
				JPA server database design has been adjusted
				so that different tables use different sequences
				to generate their indexes, resulting in more sequential
				resource IDs being assigned by the server
			</action>
			<action type="fix">
				Server now correctly serves up Binary resources
				using their native content type (instead of as a
				FHIR resource) if the request contains an accept
				header containing "application/xml" as some browsers
				do.
			</action>
			<action type="add">
				DSTU2 resources now have a 
				<![CDATA[<code>getMeta()</code>]]> method which returns a
				modifiable view of the resource metadata for convenience. This
				matches the equivalent method in the DSTU3 structures.
			</action>
			<action type="add" issue="315">
				Add a new method to FhirContext called
				<![CDATA[
				<code><a href="./apidocs/ca/uhn/fhir/context/FhirContext.html#setDefaultTypeForProfile-java.lang.String-java.lang.Class-">setDefaultTypeForProfile</a></code>
				]]>
				which can be used to specify that when recources are received which declare
				support for specific profiles, a specific custom structures should be used 
				instead of the default. For example, if you have created a custom Observation
				class for a specific profile, you could use this method to cause your custom
				type to be used by the parser for resources in a search bundle you receive.
				<![CDATA[
				<br/><br/>
				See the documentation page on
				<a href="./doc_extensions.html">Profiles and Extensions</a>
				for more information.
				]]>
			</action>
			<action type="fix" issue="315">
				Parsing/Encoding a custom resource type which extends a
				base type sometimes caused the FhirContext to treat all future
				parses of the same resource as using the custom type even when
				this was not wanted.
				<![CDATA[<br/><br/>]]>
				Custom structures may now be explicitly declared by profile
				using the
				<![CDATA[
				<code><a href="./apidocs/ca/uhn/fhir/context/FhirContext.html#setDefaultTypeForProfile-java.lang.String-java.lang.Class-">setDefaultTypeForProfile</a></code>
				]]>
				method.
				<![CDATA[<br/><br/>]]>
				This issue was discovered and fixed as a part of the implementation of issue #315.
			</action>
			<action type="add" issue="321">
				Set up the tinder plugin to work as an ant task
				as well as a Maven plugin, and to use external
				sources. Thanks to Bill Denton for the pull
				request!
			</action>
			<action type="fix">
				JPA server now allows searching by token
				parameter using a system only and no code,
				giving a search for any tokens which match
				the given token with any code. Previously the
				expected behaviour for this search 
				was not clear in the spec and HAPI had different
				behaviour from the other reference servers.
			</action>
			<action type="add">
				Introduce a JAX-RS client provider which can be used instead of the
				default Apache HTTP Client provider to provide low level HTTP
				services to HAPI's REST client. See
				<![CDATA[<a href="./doc_rest_client_alternate_provider.html">JAX-RS &amp; Alternate HTTP Client Providers</a>]]>
				for more information.
				<![CDATA[<br/><br/>]]>
				This is useful in cases where you have other non-FHIR REST clients
				using a JAX-RS provider and want to take advantage of the
				rest of the framework. 
				<![CDATA[<br/><br/>]]>
				Thanks to Peter Van Houte from Agfa for the amazing work!
			</action>
			<action type="fix" issue="312">
				Parser failed with a NPE while encoding resources if the
				resource contained a null extension. Thanks to 
				steve1medix for reporting!
			</action>
			<action type="fix" issue="320">
				In generated model classes (DSTU1/2) don't
				use BoundCodeDt and BoundCodeableConceptDt for
				coded fields which use example bindings. Thanks
				to GitHub user Ricq for reporting!
			</action>
			<action type="add">
				<![CDATA[
				Operations methods defined using 
				<code>@Operation</code> will now infer the maximum number of repetitions
				of their parameters by the type of the parameter. Previously if
				a default <code>max()</code> value was not specified in the
				<code>@OperationParam</code> annotation on a parameter, the maximum
				was assumed to be 1. Now, if a max value is not explicitly specified 
				and the type of the parameter is a basic type (e.g. <code>StringDt</code>) the
				max will be 1. If the parameter is a collection type (e.g. <code>List&lt;StringDt&gt;</code>)
				the max will be *
				]]>
			</action>
			<action type="add" issue="317">
				<![CDATA[
				Operation methods defined using
				<code>@Operation</code>
				may now use search parameter types, such as 
				<code>TokenParam</code> and
				<code>TokenAndListParam</code> as values. Thanks to 
				Christian Ohr for reporting!
				]]>
			</action>
			<action type="add">
				Add databases indexes to JPA module search index tables
				for the RES_ID column on each. This should help
				performance when searching over large datasets.
				Thanks to Emmanuel Duviviers for the suggestion!
			</action>
			<action type="fix">
				DateTimeType should fail to parse 1974-12-25+10:00 as this is not
				a valid time in FHIR. Thanks to Grahame Grieve for reporting!
			</action>
			<action type="fix">
				When parsing a Bundle resource, if the Bundle.entry.request.url contains a UUID
				but the resource body has no ID, the Resource.id will be populated with the ID from the
				Bundle.entry.request.url. This is helpful when round tripping Bundles containing
				UUIDs.
			</action>
			<action type="fix">
				When parsing a DSTU3 bundle, references between resources did not have
				the actual resource instance populated into the reference if the
				IDs matched as they did in DSTU1/2.
			</action>
			<action type="fix" issue="326">
				Contained resource references on DSTU3
				resources were not serialized correctly when
				using the Json Parser. Thanks to GitHub user
				@fw060 for reporting and supplying a patch
				which corrects the issue!
			</action>
			<action type="fix" issue="325">
				DSTU3 model classes equalsShallow and equalsDeep both did not work
				correctly if a field was null in one object, but contained an empty
				object in the other (e.g. a StringType with no actual value in it). These
				two should be considered equal, since they would produce the exact same
				wire format.<![CDATA[<br/><br/>]]>
				Thanks to GitHub user @ipropper for reporting and providing
				a test case!
			</action>
			<action type="add">
				JPA server now supports searching for <![CDATA[<code>_tag:not=[tag]</code>]]>
				which enables finding resources that to not have a given tag/profile/security tag.
				Thanks to Lars Kristian Roland for the suggestion!
			</action>
			<action type="fix">
				Extensions containing resource references did not get encoded correctly
				some of the time. Thanks to Poseidon for reporting!
			</action>
			<action type="fix">
				Parsers (both XML and JSON) encoded the first few elements of DSTU3 structures in the wrong order:
				Extensions were placed before any other content, which is incorrect (several
				elements come first: meta, text, etc.)
			</action>
			<action type="fix">
				In server implementations, the Bundle.entry.fullUrl was not getting correctly
				populated on Hl7OrgDstu2 servers. Thanks to Christian Ohr for reporting!
			</action>
			<action type="fix" issue="335">
				Ensure that element IDs within resources (i.e. IDs on elements other than the
				resource itself) get serialized and parsed correctly. Previously, these didn't get
				serialized in a bunch of circumstances. Thanks to Vadim Peretokin for reporting
				and providing test cases!
			</action>
			<action type="add">
				Improve CLI error message if the tool can't bind to the requested port. Thanks
				to Claude Nanjo for the suggestion!
			</action>
			<action type="fix">
				Server param of <![CDATA[<code>_summary=text</code>]]> did not
				include mandatory elements in return as well as
				the text element, even though the FHIR specification
				required it.
			</action>
			<action type="fix">
				Remove invalid resource type "Documentation" from DSTU2
				structures.
			</action>
			<action type="fix">
				JPA server did not respect target types for search parameters. E.g. Appointment:patient has
				a path of "Appointment.participant.actor" and a target type of "Patient". The search path
				was being correctly handled, but the target type was being ignored.
			</action>
			<action type="add">
				RestfulServer now manually parses URL parameters instead of relying on the container's
				parsed parameters. This is useful because many Java servlet containers (e.g. Tomcat, Glassfish)
				default to ISO-8859-1 encoding for URLs insetad of the UTF-8 encoding specified by
				FHIR.
			</action>
			<action type="add">
				ResponseHighlightingInterceptor now doesn't highlight if the request
				has an Origin header, since this probably denotes an AJAX request.
			</action>
		</release>
		<release version="1.4" date="2016-02-04">
			<action type="add">
				Bump the version of a few dependencies to the
				latest versions (dependent HAPI modules listed in brackets):
				<![CDATA[
					<ul>
						<li>Hibernate (JPA, Web Tester): 5.0.3 -&gt; 5.0.7</li>
						<li>Springframework (JPA, Web Tester): 4.2.2 -&gt; 4.2.4</li>
						<li>Phloc-Commons (Schematron Validator): 4.3.6 -&gt; 4.4.4</li>
						<li>Apache httpclient (Client): 4.4 -&gt; 4.5.1</li>
						<li>Apache httpcore (Client): 4.4 -&gt; 4.4.4</li>
						<li>SLF4j (All): 1.7.13 -&gt; 1.7.14</li>
					</ul>
				]]>
			</action>
			<action type="fix">
				Remove a dependency on a Java 1.7 class 
				(ReflectiveOperationException) in several spots in the 
				codebase. This dependency was accidentally introduced in
				1.3, and animal-sniffer-plugin failed to detect it (sigh).
			</action>
			<action type="add">
				Add two new server interceptors: 
				<![CDATA[
				<a href="./apidocs/ca/uhn/fhir/rest/server/interceptor/RequestValidatingInterceptor.html">RequestValidatingInterceptor</a> 
				and 
				<a href="./apidocs/ca/uhn/fhir/rest/server/interceptor/ResponseValidatingInterceptor.html">ResponseValidatingInterceptor</a>
				]]>
				which can be used to validate incoming requests or outgoing responses using the standard FHIR validation
				tools. See the 
				<![CDATA[
				<a href="./doc_rest_server_interceptor.html#RequestResponse_Validation">Server Validation Page</a>
				]]>
				for examples of how to use these interceptors. These intereptors have both
				been enabled on the
				<![CDATA[
				<a href="http://fhirtest.uhn.ca">public test page</a>.
				]]>
			</action>
			<action type="fix" issue="259">
				Make IBoundCodeableConcept and IValueSetEnumBinder serializable,
				fixing an issue when trying to serialize model classes containing
				bound codes. Thanks to Nick Peterson for the Pull Request!
			</action>
			<action type="add" issue="251">
				Introduce a JAX-RS version of the REST server, which can be used
				to deploy the same resource provider implementations which work
				on the existing REST server into a JAX-RS (e.g. Jersey) environment.
				Thanks to Peter Van Houte from Agfa for the amazing work!
			</action>
			<action type="add">
				CLI now supports writing to file:// URL for 'upload-examples' command
			</action>
			<action type="add">
				GZipped content is now supported for client-to-server uploads (create, update, transaction, etc.).
				The server will not automatically detect compressed incoming content and decompress it (this can be
				disabled using a RestfulServer configuration setting). A new client interceptor has been added
				which compresses outgoing content from the client.
			</action>
			<action type="fix">
				JPA server transaction attempted to validate resources twice each,
				with one of these times being before anything had been committed to the
				database. This meant that if a transaction contained both a Questionnaire
				and a QuestionnaireResponse, it would fail because the QuestionnaireResponse
				validator wouldn't be able to find the questionnaire. This is now corrected.
			</action>
			<action type="add">
				Add a new method to the generic/fluent client for searching: 
				<![CDATA[<code>.count(int)</code><br/>]]>
				This replaces the existing ".limitTo(int)" method which has
				now been deprocated because it was badly named and undocumented.
			</action>
			<action type="add">
				Profile validator has been configured to allow extensions even if they
				aren't explicitly declared in the profile.
			</action>
			<action type="add" issue="265">
				Add a constraint that the Maven build will only run in JDK 8+. HAPI
				remains committed to supporting JDK 6+ in the compiled library, but these
				days it can only be built using JDK 8. Thanks to joelsch for the PR!
			</action>
			<action type="fix">
				When serializing a value[x] field, if the value type was a profiled type (e.g. markdown is a 
				profile of string) HAPI 1.3 would use the base type in the element name, e.g.
				valueString instead of valueMarkdown. After discussion with Grahame, this appears to
				be incorrect behaviour so it has been fixed.
			</action>
			<action type="add" issue="240">
				Support target parameter type in _include / _revinclude values, e.g.
				_include=Patient:careProvider:Organization. Thanks to Joe Portner
				for reporting!
			</action>
			<action type="add">
				Use ResponseHighlighterInterceptor in the hapi-fhir-jpaserver-example
				project to provide nice syntax highlighting. Thanks to Rob Hausam for
				noting that this wasn't there.
			</action>
			<action type="add">
				Introduce custom @CoverageIgnore annotation to hapi-fhir-base in order to 
				remove dependency on cobertura during build and in runtime.
			</action>
			<action type="fix">
				Server-generated conformance statements incorrectly used /Profile/ instead
				of /StructureDefinition/ in URL links to structures.
			</action>
			<action type="add">
				JsonParser has been changed so that when serializing numbers it will use
				plain format (0.001) instead of scientific format (1e-3). The latter is
				valid JSON, and the parser will still correctly parse either format (all
				clients should be prepared to) but this change makes serialized
				resources appear more consistent between XML and JSON. As a result of this
				change, trailing zeros will now be preserved when serializing as well.
			</action>
			<action type="add" issue="278">
				Add DSTU3 example to hapi-fhir-jpaserver-example. Thanks to Karl 
				Davis for the Pull Request!
			</action>
			<action type="add">
				RestfulServer#setUseBrowserFriendlyContentTypes has been deprecated and its
				functionality removed. The intention of this feature was that if it 
				detected a request coming in from a browser, it would serve up JSON/XML 
				using content types that caused the browsers to pretty print. But 
				each browser has different rules for when to pretty print, and 
				after we wrote that feature both Chrome and FF changed their rules to break it anyhow.
				ResponseHighlightingInterceptor provides a better implementation of
				this functionality and should be used instead.
			</action>
			<action type="remove">
				Narrative generator framework has removed the
				ability to generate resource titles. This
				functionality was only useful for DSTU1
				implementations and wasn't compatible
				with coming changes to that API.
			</action>
			<action type="fix" issue="283">
				Remove dependency on Servlet-API 3.0+ by using methods available in 2.5 where possible.
				Note that we continue to use Servlet-API 3.0+ features in some parts of the JPA API, so
				running in an old serlvet container should be tested well before use. Thanks to Bill Denton
				for reporting!
			</action>
			<action type="add" issue="288">
				Add new methods to RestfulClientFactory allowing you to configure the size of the
				client pool used by Apache HttpClient. Thanks to Matt Blanchette for the pull
				request!
			</action>
			<action type="add">
				Add support for new modifier types on Token search params in Server and 
				annotation client.
			</action>
			<action type="fix" issue="286">
				Server conformance statement should include search parameter chains if the
				chains are explicitly defined via @Search(whitelist={....}). Thanks to lcamilo15
				for reporting!
			</action>
			<action type="fix">
				Remove afterPropertiesSet() call in Java config for JPA
				server's EntityManagerFactory. This doesn't need to be called
				manually, the the manual call led to a warning about
				the EntityManager being created twice.
			</action>
			<action type="add" issue="289">
				Allow server to correctly figure out it's own address even if the container provides
				a Servlet Context Path which does not include the root. Thanks to Petro Mykhaylyshyn
				for the pull request!
			</action>
		</release>
		<release version="1.3" date="2015-11-14">
			<action type="add">
				Bump the version of a few dependencies to the
				latest versions (dependent HAPI modules listed in brackets):
				<![CDATA[
					<ul>
						<li>Commons-lang3 (Core): 3.3.2 -&gt; 3.4</li>
						<li>Logback (Core): 1.1.2 -&gt; 1.1.3</li>
						<li>SLF4j (Core): 1.7.102 -&gt; 1.7.12</li>
						<li>Springframework (JPA, Web Tester): 4.1.5 -&gt; 4.2.2</li>
						<li>Hibernate (JPA, Web Tester): 4.2.17 -&gt; 5."</li>
						<li>Hibernate Validator (JPA, Web Tester): 5.2.1 -&gt; 5.2.2</li>
						<li>Derby (JPA, CLI, Public Server): 10.11.1.1 -&gt; 10.12.1.1 </li>
						<li>Jetty (JPA, CLI, Public Server): 9.2.6.v20141205 -&gt; 9.3.4.v20151007 </li>
					</ul>
				]]>
			</action>
			<action type="add">
				JPA and Tester Overlay now use Spring Java config files instead
				of the older XML config files. All example projects have been updated. 
			</action>
			<action type="add">
				JPA server removes duplicate resource index entries before storing them 
				(e.g. if a patient has the same name twice, only one index entry is created
				for that name)
			</action>
			<action type="fix">
				JPA server did not correctly index search parameters of type "reference" where the
				path had multiple entries (i.e. "Resource.path1 | Resource.path2")
			</action>
			<action type="fix">
				JPA server _history operations (server, type, instance) not correctly set the
				Bundle.entry.request.method to POST or PUT for create and updates of the resource.
			</action>
			<action type="add" issue="225">
				Support AND/OR on _id search parameter in JPA
			</action>
			<action type="fix">
				Constructor for DateRanfeParam which dates in two DateParam instances was ignoring 
				comparators on the DateParam.
			</action>
			<action type="fix">
				In JSON parsing, finding an object where an array was expected led to an unhelpful
				error message. Thanks to Avinash Shanbhag for reporting!
			</action>
			<action type="add">
				JPA server gave an unhelpful error message if $meta-add or $meta-delete were called
				with no meta elements in the input Parameters
			</action>
			<action type="fix">
				Narrative generator did not include OperationOutcome.issue.diagnostics in the
				generated narrative.
			</action>
			<action type="add" issue="250">
				Clients (generic and annotation) did not populate the Accept header on outgoing
				requests. This is now populated to indicate that the client supports both XML and
				JSON unless the user has explicitly requested one or the other (in which case the
				appropriate type only will be send in the accept header). Thanks to
				Avinash Shanbhag for reporting!
			</action>
			<action type="add">
				QuestionnaireResponse validator now allows responses to questions of
				type OPENCHOICE to be of type 'string'
			</action>
			<action type="fix" issue="227">
				JPA server should reject resources with a reference that points to an incorrectly typed
				resource (e.g. points to Patient/123 but resource 123 is actually an Observation) or points
				to a resource that is not valid in the location it is found in (e.g. points to Patient/123 but
				the field supposed to reference an Organization). Thanks to Bill de Beaubien for reporting!
			</action>
			<action type="fix">
				In server, if a client request is received and it has an Accept header indicating
					 	that it supports both XML and JSON with equal weight, the server's default is used instead of the first entry in the list.
			</action>
			<action type="add">
				JPA server now supports searching with sort by token, quantity,
				number, Uri, and _lastUpdated (previously only string, date, and _id 
				were supported)
			</action>
			<action type="fix">
				Fix issue in JPA where a search with a _lastUpdated filter which matches no results
				would crash if the search also had a _sort
			</action>
			<action type="fix">
				Fix several cases where invalid requests would cause an HTTP 500 instead of
				a more appropriate 400/404 in the JPA server (vread on invalid version,
				delete with no ID, etc.)
			</action>
			<action type="fix">
				Fix narrative generation for DSTU2 Medication resource
			</action>
			<action type="fix">
				Profile validator now works for valuesets which use
				v2 tables
			</action>
			<action type="add">
				JPA server Patient/[id]/$everything operation now supports
				_lastUpdated filtering and _sort'ing of results.
			</action>
			<action type="fix" issue="233">
				Fix parser issue where profiled choice element datatypes (e.g. value[x] where one allowable
				type is Duration, which is a profile of Quantity) get incorrectly encoded using the
				profiled datatype name instead of the base datatype name as required by the FHIR
				spec. Thanks to Nehashri Puttu Lokesh for reporting!
			</action>
			<action type="fix">
				Some generated Enum types in DSTU2 HAPI structures 
				did not have latest valueset definitions applied. Thanks
				to Bill de Beaubien for reporting!
			</action>
			<action type="fix">
				JPA server can now successfully search for tokens pointing at code values
				(values with no explicit system but an implied one, such as Patient.gender)
				even if the system is supplied in the query.
			</action>
			<action type="fix" issue="235">
				Correct issues with Android library. Thanks to 
				Thomas Andersen for the submission!
			</action>
			<action type="fix">
				JPA server incorrectly rejected match URLs
				if they did not contain a question mark. Thanks
				to Bill de Beaubien for reporting!
			</action>
			<action type="fix" issue="234">
				Remove invalid entries in OSGi Manifest. Thanks
				to Alexander Kley for the fix!
			</action>
			<action type="add">
				JPA server now supports $everything on Patient and Encounter types (patient and encounter instance was already supported)
			</action>
			<action type="add">
				Generic client operation invocations now
				have an additional inline method for generating the input
				Parameters using chained method calls instead
				of by passing a Parameters resource in
			</action>
			<action type="fix">
				Parsing an XML resource where the XHTML
				namespace was declared before the beginning
				of the narrative section caused an invalid
				re-encoding when encoding to JSON.
			</action>
			<action type="fix">
				Conditional deletes in JPA did not correctly 
				process if the condition had a chain or a 
				qualifier, e.g. "Patient?organization.name" or
				"Patient.identifier:missing"
			</action>
			<action type="add">
				Generic/fluent client search can now be
				performed using a complete URL supplied
				by user code. Thanks to Simone Heckmann
				pointing out that this was needed!
			</action>
			<action type="add">
				Refactor JPA $everything operations so that
				they perform better
			</action>
			<action type="add">
				Server operation methods can now declare the
				ID optional, via 
				@IdParam(optional=true)
				meaning that the same operation can also be invoked
				at the type level.
			</action>
			<action type="add">
				Make JPA search queries with _lastUpdated parameter a bit more efficient
			</action>
			<action type="add" issue="239">
				Clean up Android project to make it more lightweight and remove a 
				number of unneeded dependencies. Thanks to Thomas Andersen
				for the pull request!
			</action>
			<action type="fix">
				Fix a crash when encoding a Binary resource in JSON encoding
				if the resource has no content-type
			</action>
			<action type="fix">
				JPA server now supports read/history/search in transaction entries
				by calling the actual implementing method in the server (previously
				the call was simulated, which meant that many features did not work)
			</action>
			<action type="fix">
				ResourceReferenceDt#loadResource(IRestfulClient) did not
				use the client's read functionality, so it did not
				handle JSON responses or use interceptors. Thanks to
				JT for reporting!
			</action>
			<action type="add">
				JPA server maximumn length for a URI search parameter has been reduced from
				256 to 255 in order to accomodate MySQL's indexing requirements
			</action>
			<action type="fix" issue="242">
				Server failed to respond correctly to compartment search operations
				if the same provider also contained a read operation. Thanks to GitHub user
				@am202 for reporting!
			</action>
			<action type="fix" issue="245">
				Fix issue in testpage-overlay's new Java configuration where only the first
				configured server actually gets used.
			</action>
			<action type="add">
				Introduce
				<![CDATA[<a href="./apidocs-jpaserver/ca/uhn/fhir/jpa/dao/IJpaServerInterceptor.html">IJpaServerInterceptor</a>]]>
				interceptors for JPA server which can be used for more fine grained operations.
			</action>
			<action type="fix" issue="241">
				Parser (XML and JSON) shouldn't encode an ID tag in resources
				which are part of a bundle when the resource has a UUID/OID
				ID.
			</action>
			<action type="add">
				Add ability for a server REST resource provider @Search method
				to declare that it should allow even parameters it doesn't 
				understand.
			</action>
			<action type="fix" issue="247">
				Correctly set the Bundle.type value on all pages of a search result in
				the server, and correcltly set the same value in JPA server $everything
				results.
			</action>
			<action type="add">
				JPA $everything operations now support new parameters _content 
				and _text, which work the same way as the same parameters on a 
				search. This is experimental, since it is not a part of the core
				FHIR specification.
			</action>
			<action type="add" issue="250">
				Process "Accept: text/xml" and "Accept: text/json" headers was
				wanting the equivalent FHIR encoding styles. These are not 
				correct, but the intention is clear so we will honour them
				just to be helpful.
			</action>
			<action type="fix">
				Generated Enum types for some ValueSets did not include all
				codes (specifically, ValueSets which defined concepts containing
				child concepts did not result in Enum values for the child concepts)
			</action>
			<action type="fix" issue="253">
				In the JPA server, order of transaction processing should be 
				DELETE, POST, PUT, GET, and the order should not matter
				within entries with the same verb. Thanks to Bill de Beaubien
				for reporting!
			</action>
			<action type="add" issue="254">
				Add the ability to wire JPA conformance providers
				using Spring (basically, add default constructors
				and setters to the conformance providers). Thanks
				to C. Mike Bylund for the pull request!
			</action>
		</release>
		<release version="1.2" date="2015-09-18">
			<action type="add">
				JPA server now validates QuestionnaireAnswers for conformance to their respective Questionnaire
				if one is declared.
			</action>
			<action type="add">
				SyntaxHighlightingInterceptor now also highlights OperationOutcome responses for errors/exceptions.
			</action>
			<action type="fix" issue="126">
				Model classes do not use BoundCodeableConcept for example bindings that do not
				actually point to any codes (e.g. Observation.interpretation). Thanks
				to GitHub user @steve1medix for reporting!
			</action>
			<action type="add">
				Server now exports operations as separate resources instead of as contained resources
				within Conformance
			</action>
			<action type="add">
				Add new operation $get-resource-counts which will replace the resource
				count extensions exported in the Conformance statement by the JPA
				server.
			</action>
			<action type="fix" issue="198">
				JPA server sorting often returned unexpected orders when multiple
				indexes of the same type were found on the same resource (e.g. multiple string indexed fields). Thanks to Travis Cummings for reporting!
			</action>
			<action type="add">
				Add another method to IServerInterceptor which converts an exception generated on the server
				into a BaseServerResponseException. This is useful so that servers using ResponseHighlighterInterceptor
				will highlight exceptions even if they aren't created with an OperationOutcome.
			</action>
			<action type="fix" issue="158">
				XmlParser and JsonParser in DSTU2 mode should not encode empty
				tags in resource. Thanks to Bill De Beaubien for reporting!
			</action>
			<action>
				OperationDefinitions generated by server did not properly document
				their return parameters or the type of their input parameters.
			</action>
			<action>
				Operations in server generated conformance statement should only
				appear once per name, since the name needs to be unique.
			</action>
			<action>
				Resources and datatypes are now serializable. This is an
				experimental feature which hasn't yet been extensively tested. Please test and give us your feedback!
			</action>
			<action type="add">
				Switch REST server to using HttpServletRequest#getContextPath() to get
				the servlet's context path. This means that the server should behave more
				predictably, and should work in servlet 2.4 environments. Thanks to 
				Ken Zeisset for the suggestion!
			</action>
			<action type="add" issue="200">
				Vagrant environment now has an apt recipt to ensure that
				package lists are up to date. Thanks to GitHub user
				Brian S. Corbin (@corbinbs) for thr contribution!
			</action>
			<action type="add">
				JPA server and generic client now both support the _tag search parameter
			</action>
			<action type="add">
				Add support for BATCH mode to JPA server transaction operation
			</action>
			<action type="fix" issue="192">
				Server was not correctly unescaping URL parameter values with
				a trailing comma or an escaped backslash. Thanks to GitHub user
				@SherryH for all of her help in diagnosing this issue!
			</action>
			<action type="fix">
				Avoid crash when parsing if an invalid child element is found in 
				a resource reference.
			</action>
			<action type="add">
				Create new android specialty libraries for DSTU1 and DSTU2
			</action>
			<action type="fix">
				Throwing a server exception (e.g. AuthenticationException) in a server interceptor's 
				incomingRequestPreProcessed method resulted in the server returning an HTTP 500 instead
				of the appropriate error code for the exception being thrown. Thanks to Nagesh Bashyam 
				for reporting!
			</action>
			<action type="fix" issue="207">
				Fix issue in JSON parser where invalid contained resources (missing
				a resourceType element) fail to parse with a confusing NullPointerException.
				Thanks to GitHub user @hugosoares for reporting!
			</action>
			<action type="add">
				JPA server now implements the $validate-code operation
			</action>
			<action type="add" issue="125">
				HAPI-FHIR now has support for _summary and _elements parameters, in server, client,
				and JPA server.
			</action>
			<action type="fix" issue="209">
				_revinclude results from JPA server should have a Bundle.entry.search.mode of
				"include" and not "match". Thanks to Josh Mandel for reporting!
			</action>
			<action type="add">
				Resource references using resource instance objects instead of resource IDs 
				will correctly qualify the IDs with the resource type if they aren't already qualified	
			</action>
			<action type="add" issue="211">
				Testpage Overlay project now properly allows a custom client
				factory to be used (e.g. for custom authentication, etc.) Thanks
				to Chin Huang (@pukkaone) for the pull request!
			</action>
			<action type="fix" issue="212">
				JPA server should reject IDs containing invalid characters (e.g. "abc:123")
				but should allow client assigned IDs that contain text but do not start with 
				text. Thanks to Josh Mandel for reporting! 
			</action>
			<action type="fix">
				:text modifier on server and JPA server did not work correctly. Thanks to
				Josh Mandel for reporting!
			</action>
			<action type="fix">
				Fix issue in client where parameter values containing a comma were
				sometimes double escaped.
			</action>
			<action type="add">
				_include parameters now support the new <![CDATA[<code>_include:recurse=FOO</code>]]>
				syntax that has been introduced in DSTU2 in the Client, Server, and JPA Server modules.
				Non-recursive behaviour is now the default (previously it was recursive) and :recurse
				needs to be explicitly stated in order to support recursion.
			</action>		
			<action type="add">
				New operations added to JPA server to force re-indexing of all
				resources (really only useful after indexes change or bugs are
				fixed)
			</action>
			<action type="fix">
				JPA server did not correctly index search parameters
				of type "URI". Thanks to David Hay for reporting! Note that if you are using the JPA server, this change means that
				there are two new tables added to the database schema. Updating existing resources in the database may fail unless you 
				set default values for the resource
				table by issuing a SQL command similar to the following (false may be 0 or something else, depending on the database platform in use)
				<![CDATA[<br/><code>update hfj_resource set sp_coords_present = false;<br/>
				update hfj_resource set sp_uri_present = false;</code>]]>
			</action>
			<action type="fix">
				FIx issue in JPA server where profile declarations, tags, and 
				security labels were not always properly removed by an update that
				was trying to remove them. Also don't store duplicates.
			</action>
			<action type="fix">
				Instance $meta operations on JPA server did not previously return the
				resource version and lastUpdated time
			</action>
			<action type="fix">
				Server responses populate Bundle.entry.fullUrl if possible. Thanks
				to Bill de Beaubien for reporting!
			</action>
			<action type="fix">
				XML parser failed to initialize in environments where a very old Woodstox
				library is in use (earlier than 4.0). Thanks to Bill de Beaubien for
				reporting!
			</action>
			<action type="fix" issue="216">
				Invalid/unexpected attributes found when parsing composite elements
				should be logged or reported to the parser error handler
			</action>
			<action type="add">
				JPA server can now store Conformance resources, per a request
				from David Hay
			</action>
			<action type="add">
				ResponseHighlightingInterceptor now skips handling responses if it 
				finds a URL parameter of <![CDATA[<code>_raw=true</code>]]> (in other
				words, if this parameter is found, the response won't be returned as
				HTML even if the request is detected as coming from a browser.
			</action>
			<action type="add">
				RestfulServer now supports dynamically adding and removing resource providers
				at runtime. Thanks to Bill Denton for adding this.
			</action>
			<action type="add">
				JPA server now correctly suppresses contents of deleted resources
				in history
			</action>
			<action type="fix" issue="222">
				JPA server returned deleted resources in search results when using the _tag, _id, _profile, or _security search parameters
			</action>
			<action type="fix" issue="223">
				Fix issue with build on Windows. Thanks to Bryce van Dyk for the pull request!
			</action>
			<action type="add">
				JPA server now supports $validate operation completely, including delete mode
				and profile validation using the RI InstanceValidator
			</action>
		</release>
		<release version="1.1" date="2015-07-13">
			<action type="add">
				Add support for reference implementation structures.
			</action>
			<action type="fix">
				Parsers did not encode the resource meta element if the resource 
				had tags but no other meta elements. Thanks to Bill de Beaubien and
				Claude Nanjo for finding this.
			</action>
			<action type="fix" issue="164">
				Correct performance issue with :missing=true search requests where the parameter is a resource link. Thanks to wanghaisheng for all his help in testing this.
			</action>
			<action type="fix" issue="149">
				The self link in the Bundle returned by searches on the server does not respect the
				server's address strategy (which resulted in an internal IP being shown on fhirtest.uhn.ca)
			</action>
			<action type="add">
				Introduce ResponseHighlighterInterceptor, which provides syntax highlighting on RESTful server responses
				if the server detects that the request is coming from a browser. This interceptor has been added
				to fhirtest.uhn.ca responses.
			</action>
			<action type="fix">
				Performing a create operation in a client used an incorrect URL if the
				resource had an ID set. ID should be ignored for creates. Thanks to 
				Peter Girard for reporting!
			</action>
			<action type="add" issue="170">
				Add better addXXX() methods to structures, which take the datatype being added as a parameter. Thanks to Claude Nanjo for the
				suggestion!
			</action>
			<action type="add" issue="152">
				Add a new parser validation mechanism (see the 
				<![CDATA[<a href="./doc_validation.html">validation page</a>]]> for info) which can be 
				used to validate resources as they are being parsed, and optionally fail if invalid/unexpected
				elements are found in resource bodies during parsing. 
			</action>
			<action type="fix">
				IParser#parseResource(Class, String) method, which is used to parse a resource into the given
				structure will now throw a DataFormatException if the structure is for the wrong type of
				resource for the one actually found in the input String (or Reader). For example, if a Patient
				resource is being parsed into Organization.class this will now cause an error. Previously,
				the XML parser would ignore the type and the JSON parser would fail. This also caused 
				operations to not parse correctly if they returned a resource type other than
				parameters with JSON encoding (e.g. the $everything operation on UHN's test server).
				Thanks to Avinash Shanbhag for reporting!
			</action>
			<action type="add">
				Web tester UI now supports _revinclude
			</action>
			<action type="fix" issue="178">
				Support link elements in Bundle.entry when parsing in DSTU2 mode
				using the old (non-resource) Bundle class. Thanks to GitHub user
				@joedai for reporting!
			</action>
			<action type="add">
				LoggingInterceptor for server now supports logging DSTU2 extended operations by name
			</action>
			<action type="fix">
				Woodstox XML parser has a default setting to limit the maximum
				length of an attribute to 512kb. This caused issues handling
				large attachments, so this setting has been increased to 100Mb.
				Thanks to Nikos Kyriakoulakos for reporting!
			</action>
			<action type="fix" issue="175">
				Some HTML entities were not correctly converted during parsing. Thanks to
				Nick Kitto for reporting!
			</action>
			<action type="fix">
				In the JPA Server:
				Transactions creating resources with temporary/placeholder resource IDs
				and other resources with references to those placeholder IDs previously
				did not work if the reference did not contain the resource type
				(e.g. Patient/urn:oid:0.1.2.3 instead of urn:oid:0.1.2.3). The
				latter is actually the correct way of specifying a reference to a
				placeholder, but the former was the only way that worked. Both forms
				now work, in order to be lenient. Thanks to Bill De Beaubien for
				reporting!
			</action>
			<action type="fix">
				When parsing Bundles, if Bundle.entry.base is set to "cid:" (for DSTU1) 
				or "urn:uuid:" / "urn:oid:" (for DSTU2) this is now correctly passed as
				the base in resource.getId(). Conversely, when
				encoding bundles, if a resource ID has a base defined,
				and Bundle.entry.base is empty, it will now be
				automatically set by the parser.
			</action>
			<action type="add" issue="179">
				Add fluent client method for validate operation, and support the
				new DSTU2 style extended operation for $validate if the client is
				in DSTU2 mode. Thanks to Eric from the FHIR Skype Implementers chat for
				reporting.
			</action>
			<action type="add">
				Server now supports complete Accept header content negotiation, including
				q values specifying order of preference. Previously the q value was ignored.
			</action>
			<action type="add">
				Server in DSTU2 mode now indicates that whether it has support for Transaction operation or not. Thanks to Kevin Paschke for pointing out that this wasn't working!
			</action>
			<action type="add" issue="166">
				Questionnaire.title now gets correctly indexed in JPA server (it has no path, so it is a special case)
			</action>
			<action type="add">
				JPA server now supports ifNoneMatch in GET within a transaction request.
			</action>
			<action type="add">
				DateRangeParam now supports null values in the constructor for lower or upper bounds (but 
				still not both)
			</action>
			<action type="add">
				Generic/fluent client and JPA server now both support _lastUpdated search parameter
				which was added in DSTU2
			</action>
			<action type="fix" issue="188">
				JPA server now supports sorting on reference parameters. Thanks to
				Vishal Kachroo for reporting that this wasn't working!
			</action>
			<action type="fix">
				Prevent Last-Updated header in responses coming back to the client from
				overwriting the 'lastUpdated' value in the meta element in DSTU2
				resources. This is important because 'lastUpdated' can have more
				precision than the equivalent header, but the client previously
				gave the header priority.
			</action>
			<action type="fix">
				JPA server supports _count parameter in transaction containing search URL (nested search)
			</action>
			<action type="fix">
				DSTU2 servers now indicate support for conditional create/update/delete in their
				conformance statement.
			</action>
			<action type="fix">
				Support for the Prefer header has been added to the server, client, and
				JPA modules.
			</action>
			<action type="fix" issue="196">
				JPA server failed to search for deep chained parameters across multiple references,
				e.g. "Location.partof.partof.organization". Thanks to Ismael Sarmento Jr for
				reporting!
			</action>
			<action type="fix">
				Prevent crash when encoding resources with contained resources 
				if the contained resources contained a circular reference to each other
			</action>
			<action type="add">
				Add $meta, $meta-add, and $meta-delete operations to generic client
			</action>
		</release>
		<release version="1.0" date="2015-04-08">
			<action type="add">
				Bump the version of a few dependencies to the
				latest versions:
				<![CDATA[
					<ul>
						<li>Phloc-commons (for schematron validation) 4.3.5 -> 4.3.6</li>
						<li>Apache HttpClient 4.3.6 -> 4.4</li>
						<li>Woodstox 4.4.0 -> 4.4.1</li>
						<li>SLF4j 1.7.9 -> 1.7.10</li>
						<li>Spring (used in hapi-fhir-jpaserver-base module) 4.1.3.RELEASE -> 4.1.5.RELEASE</li>
					</ul>
				]]>
			</action>
			<action type="add">
				Add support for "profile" and "tag" elements in the resource Meta block
				when parsing DSTU2 structures.
			</action>
			<action type="fix" issue="113">
				When a user manually creates the list of contained resources in a resource,
				the encoder fails to encode any resources that don't have a '#' at the
				start of their ID. This is unintuitive, so we now assume that '123' means '#123'.
				Thanks to myungchoi for reporting and providing a test case!
			</action>
			<action type="add">
				Add methods for setting the default encoding (XML/JSON) and
				oretty print behaviour in the Fluent Client. Thanks to Stackoverflow
				user ewall for the idea.
			</action>
			<action type="fix" issue="129">
				JPA Server did not mark a resource as "no longer deleted" if it
				was updated after being deleted. Thanks to Elliott Lavy and Lloyd
				McKenzie for reporting!
			</action>
			<action type="fix" issue="128">
				Fix regression in 0.9 - Server responds with an HTTP 500 and a NullPointerException instead of an HTTP 400 and a useful error message if the client requests an unknown resource type
			</action>
			<action type="add">
				Add support for 
				<![CDATA[<code>_revinclude</code>]]>
				parameter in client, server, and JPA.
			</action>
			<action type="add">
				Include constants on resources (such as 
				<![CDATA[<code>Observation.INCLUDE_VALUE_STRING</code>]]>)
				have been switched in the DSTU2 structures to use
				the new syntax required in DSTU2: [resource name]:[search param NAME]
				insead of the DSTU1 style [resource name].[search param PATH]
			</action>
			<action type="add" issue="124">
				When encoding resources, the parser will now convert any resource
				references to versionless references automatically (i.e. it will 
				omit the version part automatically if one is present in the reference)
				since references between resources must be versionless. Additionally,
				references in server responses will omit the server base URL part of the
				reference if the base matches the base for the server giving
				the response.
			</action>
			<action type="fix" issue="130">
				Narrative generator incorrectly sets the Resource.text.status to 'generated' even if the
				given resource type does not have a template (and therefore no narrative is actually generated).
				Thanks to Bill de Beaubien for reporting!
			</action>
			<action type="fix">
				Searching in JPA server with no search parameter returns deleted resources when it should exclude them.
			</action>
			<action type="add" issue="135">
				Remove Eclipse and IntelliJ artifacts (.project, *.iml, etc) from version control. Thanks
				to Doug Martin for the suggestion!
			</action>
			<action type="add">
				REST server methods may now have a parameter of
				type NarrativeModeEnum which will be populated with
				the value of the _narrative URL parameter
				if one was supplied. Annotation client methods 
				may also include a parameter of this type, and it
				will be used to populate this parameter on the request
				URL if it is not null. Thanks to Neal Acharya for the
				idea!
			</action>
			<action type="add">
				Android JAR now includes servlet-API classes, as the project will not
				work without them. Thanks 
			</action>
			<action type="fix" issue="116">
				Requested _include values are preserved across paging links when the
				server returns multiple pages. Thanks to Bill de Beaubien for 
				reporting! 
			</action>
			<action type="add" issue="138" dev="wdebeau1">
				Add new server address strategy "ApacheProxyAddressStrategy" which uses 
				headers "x-forwarded-host" and "x-forwarded-proto" to determine the
				server's address. This is useful if you are deploying a HAPI FHIR 
				server behind an Apache proxy (e.g. for load balancing or other reasons).
				Thanks to Bill de Beaubien for contributing!
			</action>
			<action type="fix" issue="143">
				Resource references between separate resources found in a single
				bundle did not get populated with the actual resource when parsing a
				DSTU2 style bundle. Thanks to Nick Peterson for reporting and figuring
				out why none of our unit tests were actually catching the problem!
			</action>
			<action type="fix" issue="146">
				JSON encoder did not encode contained resources when encoding
				a DSTU2 style bundle. Thanks to Mohammad Jafari and baopingle
				for all of their help in tracking this issue down and developing
				useful unit tests to demonstrate it.
			</action>
			<action type="add">
				Client now supports invoking transcation using a DSTU2-style
				Bundle resource as the input.
			</action>
			<action type="fix" issue="147">
				JPA Server $everything operation could sometimes include a duplicate copy of 
				the main focus resource if it was referred to in a deep chain. Thanks
				to David Hay for reporting!
			</action>
			<action type="add" issue="148">
				JPA Server $everything operation now allows a _count parameter
			</action>
			<action type="fix" issue="139">
				JPA server failed to index resources containing ContactPointDt elements with
				populated values (e.g. Patient.telecom). Thanks to Mohammad Jafari for reporting!
			</action>
			<action type="add">
				Add a new configuration method on the parsers, 
				<![CDATA[<code>setStripVersionsFromReferences(boolean)</code>]]> which
				configures the parser to preserve versions in resource reference links when
				encoding. By default, these are removed.
			</action>
			<action type="fix" issue="155" dev="wdebeau1">
				Terser's IModelVisitor now supplies to the path to the element. This is
				an API change, but I don't think there are many users of the IModelVisitor yet.
				Please let us know if this is a big hardship and we can find an alternate way
				of making this change.
			</action>
			<action type="fix">
				Prevent server from returning a Content-Location header for search
				response when using the DSTU2 bundle format
			</action>
			<action type="fix">
				JPA server (uhnfhirtest.uhn.ca) sometimes included an empty
				"text" element in Bundles being returned.
			</action>
			<action type="add" issue="162">
				Add a framework for the Web Tester UI to allow its internal FHIR client to 
				be configured (e.g. to add an authorization interceptor so that it adds
				credentials to client requests it makes). Thanks to Harsha Kumara for
				the suggestion!
			</action>
			<action type="fix" issue="163">
				Fix regression in early 1.0 builds where resource type sometimes does not get 
				populated in a resource ID when the resource is parsed. Thanks to
				Nick Peterson for reporting, and for providing a test case!
			</action>
			<action type="add">
				Allow fluent/generic client users to execute a transaction using a raw string (containing a bundle resource)
				as input instead of a Bundle resource class instance.
			</action>
			<action type="fix">
				Disable date validation in the web tester UI, so that it is possible to 
				enter partial dates, or dates without times, or even test out invalid date
				options.
			</action>
			<action type="fix" issue="36">
				Make BaseElement#getUndeclaredExtensions() and BaseElement#getUndeclaredExtensions() return
				a mutable list so that it is possible to delete extensions from a resource instance.
			</action>
			<action type="fix" issue="168">
				Server conformance statement check in clients (this is the check
				where the first time a given FhirContext is used to access a given server
				base URL, it will first check the server's Conformance statement to ensure
				that it supports the correct version of FHIR) now uses any 
				registered client interceptors. In addition, IGenericClient now has a method
				"forceConformanceCheck()" which manually triggers this check. Thanks to
				Doug Martin for reporting and suggesting!
			</action>
			<action type="add" issue="167">
				Rename the Spring Bean definition for the JPA server EntityManager from
				"myEntityManagerFactory" to just "entityManagerFactory" as this is the
				default bean name expected in other parts of the Spring framework. 
				Thanks to Mohammad Jafari for the suggestion!
			</action>
			<action type="add" issue="164">
				Improve error message when a user tries to perform a create/update with an invalid
				or missing Content-Type header. Thanks to wanghaisheng for reporting! (This was
				actually a three part bug, so the following two fixes also reference this
				bug number)
			</action>
			<action type="add" issue="164">
				Add support for :missing qualifier in generic/fluent client.
			</action>
			<action type="add" issue="164">
				Add support for :missing qualifier in JPA server.
			</action>
			<action type="add">
				Add a new configuration method on the parsers, 
				<![CDATA[<code>setStripVersionsFromReferences(boolean)</code>]]> which
				configures the parser to preserve versions in resource reference links when
				encoding. By default, these are removed.
			</action>
			<action type="add" due-to="joel-costigliola" issue="171">
				Add an exception for RESTful clients/servers to represent the
				HTTP 403 Forbidden status code. Thanks to Joel Costigliola for
				the patch!
			</action>
			<action type="fix">
				Transaction server operations incorrectly used the "Accept" header instead of the "Content-Type" header to determine the
				POST request encoding. Thanks to Rene Spronk for providing a test case!
			</action>
		</release>
		<release version="0.9" date="2015-03-14">
			<action type="add">
				Support for DSTU2 features introduced: New resource definitions, Bundle resource, 
				encoding changes (ID in resource bodt, meta tag)
			</action>
			<action type="fix" issue="65">
				Fix an issue encoding extensions on primitive types in JSON. Previously the "_value" object
				would be an array even if the field it was extending was not repeatable. This is not correct
				according to the specification, nor can HAPI's parser parse this correctly. The encoder
				has been corrected, and the parser has been adjusted to be able to handle resources with
				extensions encoded in this way. Thanks to Mohammad Jafari for reporting!
			</action>
			<action type="add">
				Library now checks if custom resource types can be instantiated on startup
				(e.g. because they don't have a no-argument constructor) in order to 
				avoid failing later
			</action>
			<action type="add">
				Bump a few dependency JARs to the latest versions in Maven POM:
				<![CDATA[
					<ul>
						<li>SLF4j (in base module) - Bumped to 1.7.9</li>
						<li>Apache HTTPClient (in base module) - Bumped to 4.3.6</li>
						<li>Hibernate (in JPA module) - Bumped to 4.3.7</li>
					</ul>
				]]>
			</action>
			<action type="fix" issue="67">
				IdDt failed to recognize local identifiers containing fragments that look like 
				real identifiers as being local identifiers even though they started with '#'.
				For example, a local resource reference of "#aa/_history/aa" would be incorrectly
				parsed as a non-local reference.
				Thanks to Mohammad Jafari for reporting!
			</action>
			<action type="fix">
				<![CDATA[<code>Last-Modified</code>]]>
				header in server was incorrectly using FHIR date format instead
				of RFC-1123 format. 
			</action>
			<action type="fix">
				Server create and update methods failed with an IllegalArgumentException if
				the method type was a custom resource definition type (instead of a built-in
				HAPI type). Thanks to Neal Acharya for the analysis. 
			</action>
			<action type="add" issue="79">
				JPA server module now supports 
				<![CDATA[<code>_include</code>]]> 
				value of 
				<![CDATA[<code>*</code>]]>. Thanks to Bill de Beaubien for reporting! 
			</action>
			<action type="fix">
				IdDt method 
				<![CDATA[withServerBase]]>
				returned String (unlike all of the other "withFoo" methods on that class),
				and did not work correctly if the IdDt already had a server base. This
				has been corrected. Note that the return type for this method has been
				changed, so code may need to be updated.
			</action>
			<action type="fix" issue="84" due-to="mochaholic">
				In previous versions of HAPI, the XML parser encoded multiple contained
				resources in a single 
				<![CDATA[<code>&lt;contained&gt;&lt;/contained&gt;</code>]]>
				tag, even though the FHIR specification rerquires a separate
				<![CDATA[<code>&lt;contained&gt;&lt;/contained&gt;</code>]]>
				tag for each resource. This has been corrected. Note that the parser will
				correctly parse either form (this has always been the case) so this
				change should not cause any breakage in HAPI based trading partners, but
				may cause issues if other applications have been coded to depend on the
				incorrect behaviour. Thanks to Mochaholic for reporting! 
			</action>
			<action type="fix" issue="91" due-to="andyhuang91">
				Custom/user defined resource definitions which contained more than one
				child with no order defined failed to initialize properly. Thanks to
				Andy Huang for reporting and figuring out where the
				problem was! 
			</action>
			<action type="add">
				RESTful Client now queries the server (only once per server base URL) to ensure that
				the given server corresponds to the correct version of the FHIR specification, as
				defined by the FhirContext. This behaviour can be disabled by setting the
				appropriate configuration on the 
				RestfulClientConfig. Thanks to Grahame Grieve for the suggestion!
			</action>
			<action type="add">
				 JPA module now supports deleting resource via transaction
			</action>
			<action type="fix" issue="97" due-to="twilson650">
				DateClientParam#second() incorrectly used DAY precision instead
				of SECOND precision. Thanks to Tom Wilson for the pull request!
			</action>
			<action type="fix" issue="100" due-to="sweetnavelorange">
				Fix issue where HAPI failed to initialize correctly if Woodstox library was not on the classpath, even
				if StAX API was configured to use a different provider. Thanks to
				James Butler for reporting and figuring out where the issue was!
			</action>
			<action type="fix" issue="101">
				Calling BaseDateTimeDt#setValue(Date, TemporalPrecisionEnum) did not always actually respect
				the given precision when the value was encoded. Thanks to jacksonjesse for
				reporting!
			</action>
			<action type="fix" issue="103">
				Encoders (both XML and JSON) will no longer encode contained resources if they are 
				not referenced anywhere in the resource via a local reference. This is just a convenience
				for users who have parsed a resource with contained resources and want to remove some
				before re-encoding. Thanks to Alexander Kley for reporting! 
			</action>
			<action type="fix" issue="110" due-to="mochaholic">
				Add support for DSTU2 style security labels in the parser and encoder. Thanks to
				Mohammad Jafari for the contribution!
			</action>
			<action type="fix">
				Server requests for Binary resources where the client has explicitly requested XML or JSON responses
				(either with a <![CDATA[<code>_format</code>]]> URL parameter, or an <![CDATA[<code>Accept</code>]]> request header)
				will be responded to using the Binary FHIR resource type instead of as Binary blobs. This is
				in accordance with the recommended behaviour in the FHIR specification.
			</action>
			<action type="add">
				Add new properties to RestfulServer: "DefaultResponseEncoding", which allows
				users to configure a default encoding (XML/JSON) to use if none is specified in the
				client request. Currently defaults to XML. Also "DefaultPrettyPrint", which specifies
				whether to pretty print responses by default. Both properties can be overridden
				on individual requets using the appropriate Accept header or request URL parameters.
			</action>
			<action type="add">
				Add support for quantity search params in FHIR tester UI
			</action>
			<action type="add">
				Add support for FHIR "extended operations" as defined in the FHIR DSTU2
				specification, for the Generic Client, Annotation Client, and
				Server.	
			</action>
			<action type="fix">
				Observation.applies[x] and other similar search fields with multiple allowable 
				value types were not being correctly indexed in the JPA server.	 
			</action>
			<action type="fix" issue="122">
				DateClientParam.before() incorrectly placed "&lt;=" instead of 
				"&lt;" in the request URL. Thanks to Ryan for reporting!	 
			</action>
			<action type="add" issue="77" dev="wdebeau1">
				Server now only automatically adds _include resources which are provided
				as references if the client request actually requested that specific include.
				See RestfulServer
			</action>
			<action type="fix" issue="120">
				User defined resource types which contain extensions that use a bound code type
				(e.g. an BoundCodeDt with a custom Enum) failed to parse correctly. Thanks
				to baopingle for reporting and providing a test case!
			</action>
			<action type="add">
				Sorting is now supported in the Web Testing UI (previously a button existed for sorting, but it didn't do anything)
			</action>
			<action type="add" issue="111">
				Server will no longer include stack traces in the OperationOutcome returned to the client
				when an exception is thrown. A new interceptor called ExceptionHandlingInterceptor has been
				created which adds this functionality back if it is needed (e.g. for DEV setups). See the 
				server interceptor documentation for more information. Thanks to Andy Huang for the suggestion!
			</action>
		</release>
		<release version="0.8" date="2014-12-17">
			<action type="add">
				<![CDATA[<b>API CHANGE:</b>]]> The "FHIR structures" for DSTU1 (the classes which model the
				resources and composite datatypes) have been moved out of the core JAR into their
				own JAR, in order to allow support for DEV resources, and DSTU2 resources when thast
				version is finalized. See the
				<![CDATA[<a href="./doc_dstu2.html">DSTU2 page</a>]]> 
				for more information.	
			</action>
			<action type="fix">
				<![CDATA[
					<b>Deprocated API Removal</b>: The following classes (which were deprocated previously)
					have now been removed:
					<ul>
						<li><b>ISecurityManager</b>: If you are using this class, the same functionality
						is available through the more general purpose
						<a href="http://jamesagnew.github.io/hapi-fhir/doc_rest_server_interceptor.html">server interceptor</a>
						capabilities.
						<li><b>CodingListParam</b>: This class was made redundant by the
						<a href="http://jamesagnew.github.io/hapi-fhir/apidocs/ca/uhn/fhir/rest/param/TokenOrListParam.html">TokenOrListParam</a>
						class, which can be used in its place.
					</ul>
				]]> 
			</action>			
			<action type="add">
				<![CDATA[
					<b>API Change</b>: The IResource#getResourceMetadata() method has been changed
					from returning 
					<code>Map&lt;ResourceMetadataKeyEnum&lt;?&gt;, Object&gt;</code>
					to returning a new type called
					<code>ResourceMetadataMap</code>. This new type implements 
					<code>Map&lt;ResourceMetadataKeyEnum&lt;?&gt;, Object&gt;</code>
					itself, so this change should not break existing code, but may
					require a clean build in order to run correctly.
				]]> 
			</action>			
			<action type="add" issue="38" dev="wdebeau1">
				Profile generation on the server was not working due to IdDt being
				incorrectly used. Thanks to Bill de Beaubien for the pull request!
			</action>			
			<action type="add" issue="42" dev="wdebeau1">
				Profiles did not generate correctly if a resource definition class had a 
				defined extension which was of a composite type. Thanks to Bill de Beaubien for the pull request!
			</action>			
			<action type="add" issue="44" dev="petromykhailysyn">
				Remove unnecessary IOException from narrative generator API. Thanks to
				Petro Mykhailysyn for the pull request!	
			</action>			
			<action type="add" issue="48" dev="wdebeau1">
				Introduced a new 
				<![CDATA[<code>@ProvidesResources</code>]]> annotation which can be added to
				resource provider and servers to allow them to declare additional resource
				classes they are able to serve. This is useful if you have a server which can
				serve up multiple classes for the same resource type (e.g. a server that sometimes
				returns a default Patient, but sometimes uses a custom subclass). 
				Thanks to Bill de Beaubien for the pull request!
			</action>
			<action type="add" issue="49" dev="wdebeau1">
				Introduced a new 
				<![CDATA[<code>@Destroy</code>]]> annotation which can be added to
				a resource provider method. This method will be called by the server when it
				is being closed/destroyed (e.g. when the application is being undeployed, the
				container is being shut down, etc.) 
				Thanks to Bill de Beaubien for the pull request!
			</action>
			<action type="add">
				Add a new method <![CDATA[handleException]]> to the server interceptor
				framework which allows interceptors to be notified of any exceptions and 
				runtime errors within server methods. Interceptors may optionally also
				override the default error handling behaviour of the RestfulServer.
			</action>
			<action dev="wdebeau1" type="add">
				Add constants to BaseResource for the "_id" search parameter which all resources
				should support.
			</action>			
			<action type="fix">
				DateRangeParam parameters on the server now return correct 
				<![CDATA[<code>getLowerBoundAsInstant()</code>]]>
				and 
				<![CDATA[<code>getUpperBoundAsInstant()</code>]]>
				values if a single unqualified value is passed in. For example, if
				a query containing 
				<![CDATA[<code>&birthdate=2012-10-01</code>]]> 
				is received, previously these two methods would both return the same
				value, but with this fix 
				<![CDATA[<code>getUpperBoundAsInstant()</code>]]>
				now returns the instant at 23:59:59.9999.				
			</action>			
			<action type="fix">
				Resource fields with a type of "*" (or Any) sometimes failed to parse if a 
				value type of "code" was used. Thanks to Bill de Beaubien for reporting!
			</action>
			<action type="add" dev="lmds">
				Remove dependency on JAXB libraries, which were used to parse and encode
				dates and times (even in the JSON parser). JAXB is built in to most JDKs
				but the version bundled with IBM's JDK is flaky and resulted in a number
				of problems when deploying to Websphere.
			</action>
			<action type="fix" issue="50" dev="jjathman">
				Primitive datatypes now preserve their original string value when parsing resources,
				as well as containing the "parsed value". For instance, a DecimalDt field value of
				<![CDATA[<code>1.0000</code>]]> will be parsed into the corresponding 
				decimal value, but will also retain the original value with the corresponding
				level of precision. This allows vadliator rules to be applied to 
				original values as received "over the wire", such as well formatted but
				invalid dates, e.g. "2001-15-01". Thanks to Joe Athman for reporting and 
				helping to come up with a fix!
			</action>
			<action type="add">
				When using Generic Client, if performing a
				<![CDATA[create]]> or <![CDATA[update]]> operation using a String as the resource body,
				the client will auto-detect the FHIR encoding style and send an appropriate 
				<![CDATA[Content-Type]]> header.
			</action>
			<action type="fix" issue="52">
				JPA module (and public HAPI-FHIR test server) were unable to process resource types
				where at least one search parameter has no path specified. These now correctly save
				(although the server does not yet process these params, and it should). Thanks to
				GitHub user shvoidlee for reporting and help with analysis!
			</action>
			<action type="fix">
				Generic/Fluent Client "create" and "update" method requests were not setting a content type header
			</action>
			<action type="add" issue="53" dev="petromykhailysyn">
				DateDt left precision value as <![CDATA[null]]> in the constructor
				<![CDATA[DateDt(Date)]]>.
			</action>
			<action type="fix">
				RESTful server now doesn't overwrite resource IDs if they are absolute. In other words, if
				a server's Resource Provider returns a resource with ID "Patient/123" it will be translated to
				"[base url]/Patient/123" but if the RP returns ID "http://foo/Patient/123" the ID will be
				returned exactly as is. Thanks to Bill de Beaubien for the suggestion!
			</action>
			<action type="fix" issue="55">
				JPA module Transaction operation was not correctly replacing logical IDs
				beginning with "cid:" with server assigned IDs, as required by the
				specification.
			</action>
			<action type="fix" dev="tahurac">
				<![CDATA[FhirTerser]]> did not visit or find children in contained resources when 
				searching a resource. This caused server implementations to not always return contained
				resources when they are included with a resource being returned.
			</action>
			<action type="add" dev="lmds">
				Add a method <![CDATA[String IResource#getResourceName()]]> which returns the name of the
				resource in question (e.g. "Patient", or "Observation"). This is intended as a 
				convenience to users. 
			</action>
			<action type="fix">
				Do not strip version from resource references in resources returned
				from server search methods. Thanks to Bill de Beaubien for reporting!
			</action>
			<action type="fix" dev="jjathman" issue="54">
				Correct an issue with the validator where changes to the underlying
				OperationOutcome produced by a validation cycle cause the validation
				results to be incorrect.
			</action>
			<action type="fix">
				Client interceptors registered to an interface based client instance 
				were applied to other client instances for the same client interface as well. (Issue
				did not affect generic/fluent clients)
			</action>
			<action type="fix" issue="57">
				DateDt, DateTimeDt and types InstantDt types now do not throw an exception
				if they are used to parse a value with the wrong level of precision for
				the given type but do throw an exception if the wrong level of precision
				is passed into their constructors.<![CDATA[<br/><br/>]]>
				This means that HAPI FHIR can now successfully parse resources from external 
				sources that have the wrong level of precision, but will generate a validation
				error if the resource is validated. Thanks to Alexander Kley for the suggestion!
			</action>
			<action type="fix">
				Encoding a Binary resource without a content type set should not result in a NullPointerException. Thanks
				to Alexander Kley for reporting!
			</action>
			<action type="add">
				Server gives a more helpful error message if multiple IResourceProvider implementations
				are provided for the same resource type. Thanks to wanghaisheng for the idea!
			</action>
			<action type="add" issue="61">
				Bring DSTU1 resource definitions up to version 0.0.82-2929<![CDATA[<br/>]]>
				Bring DEV resource definitions up to 0.4.0-3775<![CDATA[<br/>]]>
				Thanks to crinacimpian for reporting!
			</action>
			<action type="add" issue="62">
				JPA server did not correctly process _include requests if included 
				resources were present with a non-numeric identifier. Thanks to 
				Bill de Beaubien for reporting!
			</action>
			<action type="fix" issue="60">
				Client requests which include a resource/bundle body (e.g. create,
				update, transaction) were not including a charset in the content type
				header, leading to servers incorrectly assuming ISO-8859/1. Thanks to 
				shvoidlee for reporting!
			</action>
			<action type="fix" issue="59" dev="wdebeau1">
				Clean up the way that Profile resources are automatically exported
				by the server for custom resource profile classes. See the 
				<![CDATA[<a href="http://jamesagnew.github.io/hapi-fhir/apidocs/ca/uhn/fhir/model/api/annotation/ResourceDef.html">@ResourceDef</a>]]>
				JavaDoc for information on how this works.
			</action>
			<action type="add" issue="73" dev="wdebeau1">
				Add convenience methods to TokenOrListParam to test whether any of a set of tokens match
				the given requested list.
			</action>
			<action type="add" issue="86" dev="harsha89">
				Add a protected method to RestfulServer which allows developers to 
				implement their own method for determining which part of the request
				URL is the FHIR request path (useful if you are embedding the RestulServer inside
				of another web framework). Thanks to Harsha Kumara for the pull request!
			</action>
		</release>
		<release version="0.7" date="2014-10-23">
			<action type="add" issue="30">
				<![CDATA[<b>API CHANGE:</b>]]> The TagList class previously implemented ArrayList semantics,
				but this has been replaced with LinkedHashMap semantics. This means that the list of
				tags will no longer accept duplicate tags, but that tag order will still be
				preserved. Thanks to Bill de Beaubien for reporting!
			</action>			
			<action type="fix" issue="33">
				Server was incorrectly including contained resources being returned as both contained resources, and as 
				top-level resources in the returned bundle for search operations.
				Thanks to Bill de Beaubien for reporting! This also fixes Issue #20, thanks to
				lephty for reporting!
			</action>			
			<action type="add" dev="suranga">
				Documentation fixes
			</action>			
			<action type="add" dev="dougmartin">
				Add a collection of new methods on the generic client which support the
				<![CDATA[ 
				<b><a href="./apidocs/ca/uhn/fhir/rest/client/IGenericClient.html#read(java.lang.Class,%20ca.uhn.fhir.model.primitive.UriDt)">read</a></b>,
				<b><a href="./apidocs/ca/uhn/fhir/rest/client/IGenericClient.html#vread(java.lang.Class,%20ca.uhn.fhir.model.primitive.UriDt)">read</a></b>,
				and <b><a href="./apidocs/ca/uhn/fhir/rest/client/IGenericClient.html#search(java.lang.Class,%20ca.uhn.fhir.model.primitive.UriDt)">search</a></b>
				]]>
				operations using an absolute URL. This allows developers to perform these operations using
				URLs they obtained from other sources (or external resource references within resources). In
				addition, the existing read/vread operations will now access absolute URL references if
				they are passed in. Thanks to Doug Martin of the Regenstrief Center for Biomedical Informatics
				for contributing this implementation!
			</action>
			<action type="fix">
				Server implementation was not correctly figuring out its own FHIR Base URL when deployed
				on Amazon Web Service server. Thanks to Jeffrey Ting and Bill De Beaubien of
				Systems Made Simple for their help in figuring out this issue! 
			</action>
			<action type="fix">
				XML Parser failed to encode fields with both a resource reference child and
				a primitive type child. Thanks to Jeffrey Ting and Bill De Beaubien of
				Systems Made Simple for their help in figuring out this issue!
			</action>
			<action type="fix">
				HAPI now runs successfully on Servlet 2.5 containers (such as Tomcat 6). Thanks to
				Bernard Gitaadji for reporting and diagnosing the issue!
			</action>
			<action type="fix">
				Summary (in the bundle entry) is now encoded by the XML and JSON parsers if supplied. Thanks to David Hay of 
				Orion Health for reporting this!
			</action>
			<action type="fix" issue="24">
				Conformance profiles which are automatically generated by the server were missing a few mandatory elements,
				which meant that the profile did not correctly validate. Thanks to Bill de Beaubien of Systems Made Simple
				for reporting this!				
			</action>
			<action type="fix">
				XHTML (in narratives) containing escapable characters (e.g. &lt; or &quot;) will now always have those characters 
				escaped properly in encoded messages.
			</action>
			<action type="fix">
				Resources containing entities which are not valid in basic XML (e.g. &amp;sect;) will have those
				entities converted to their equivalent unicode characters when resources are encoded, since FHIR does
				not allow extended entities in resource instances.
			</action>
			<action type="add">
				Add a new client interceptor which adds HTTP Authorization Bearer Tokens (for use with OAUTH2 servers)
				to client requests.
			</action>			
			<action type="fix">
				Add phloc-commons dependency explicitly, which resolves an issue building HAPI from source on
				some platforms. Thanks to Odysseas Pentakalos for the patch!
			</action>
			<action type="add">
				HAPI now logs a single line indicating the StAX implementation being used upon the
				first time an XML parser is created.
			</action>
			<action type="fix">
				Update methods on the server did not return a "content-location" header, but
				only a "location" header. Both are required according to the FHIR specification.
				Thanks to Bill de Beaubien of Systems Made Simple for reporting this!				
			</action>
			<action type="fix" issue="26" dev="akley">
				Parser failed to correctly read contained Binary resources. Thanks to Alexander Kley for
				the patch! 
			</action>
			<action type="fix" issue="29" dev="akley">
				Calling encode multiple times on a resource with contained resources caused the contained
				resources to be re-added (and the actual message to grow) with each encode pass. Thanks to
				Alexander Kley for the test case!
			</action>
			<action type="fix">
				JSON-encoded contained resources with the incorrect "_id" element (which should be "id", but some
				incorrect examples exist on the FHIR specification) now parse correctly. In other words, HAPI 
				previously only accepted the correct "id" element, but now it also accepts the incorrect
				"_id" element just to be more lenient.				
			</action>
			<action type="fix">
				Several unit tests failed on Windows (or any platform with non UTF-8 default encoding). This may
				have also caused resource validation to fail occasionally on these platforms as well.
				Thanks to Bill de Beaubien for reporting!
			</action>			
			<action type="fix">
				toString() method on TokenParam was incorrectly showing the system as the value.
				Thanks to Bill de Beaubien for reporting!
			</action>			
			<action type="update">
				Documentation on contained resources contained a typo and did not actually produce contained resources. Thanks
				to David Hay of Orion Health for reporting!
			</action>			
			<action type="add" issue="31" dev="preston">
				Add a 
				<![CDATA[<a href="https://www.vagrantup.com/">Vagrant</a>]]>	
				based environment (basically a fully built, self contained development environment) for
				trying out the HAPI server modules. Thanks to Preston Lee for the pull request, and for 
				offering to maintain this! 
			</action>
			<action type="add" issue="32" dev="jjathman">
				Change validation API so that it uses a return type instead of exceptions to communicate 
				validation failures. Thanks to Joe Athman for the pull request!
			</action>
			<action type="add" issue="35" dev="petromykhailysyn">
				Add a client interceptor which adds an HTTP cookie to each client request. Thanks to 
				Petro Mykhailysyn for the pull request! 
			</action>
		</release>
		<release version="0.6" date="2014-09-08" description="This release brings a number of new features and bug fixes!">
			<!-- 
			<action type="add">
				Allow generic client	... OAUTH
			</action>
			-->
			<action type="add">
				Add server interceptor framework, and new interceptor for logging incoming
				requests.	
			</action>
			<action type="add">
				Add server validation framework for validating resources against the FHIR schemas and schematrons
			</action>
			<action type="fix">
				Tester UI created double _format and _pretty param entries in searches. Thanks to Gered King of University
				Health Network for reporting!	
			</action>
			<action type="fix" issue="4">
				Create method was incorrectly returning an HTTP 204 on sucessful completion, but
				should be returning an HTTP 200 per the FHIR specification. Thanks to wanghaisheng 
				for reporting! 
			</action>
			<action type="fix">
				FHIR Tester UI now correctly sends UTF-8 charset in responses so that message payloads containing
				non US-ASCII characters will correctly display in the browser
			</action>
			<action type="fix">
				JSON parser was incorrectly encoding extensions on composite elements outside the element itself
				(as is done correctly for non-composite elements) instead of inside of them. Thanks to David Hay of
				Orion for reporting this!
			</action>
			<action type="add">
				Contained/included resource instances received by a client are now automatically 
				added to any ResourceReferenceDt instancea in other resources which reference them.
			</action>
			<action type="add">
				Add documentation on how to use eBay CORS Filter to support Cross Origin Resource
				Sharing (CORS) to server. CORS support that was built in to the server itself has
				been removed, as it did not work correctly (and was reinventing a wheel that others
				have done a great job inventing). Thanks to Peter Bernhardt of Relay Health for all the assistance
				in testing this!
			</action>
			<action type="fix">
				IResource interface did not expose the getLanguage/setLanguage methods from BaseResource,
				so the resource language was difficult to access.
			</action>
			<action type="fix">
				JSON Parser now gives a more friendly error message if it tries to parse JSON with invalid use 
				of single quotes
			</action>
			<action type="add">
				Transaction server method is now allowed to return an OperationOutcome in addition to the
				incoming resources. The public test server now does this in order to return status information
				about the transaction processing.
			</action>
			<action type="add">
				Update method in the server can now flag (via a field on the MethodOutcome object being returned)
				that the result was actually a creation, and Create method can indicate that it was actually an
				update. This has no effect other than to switch between the HTTP 200 and HTTP 201 status codes on the
				response, but this may be useful in some circumstances.
			</action>
			<action type="fix" dev="tahurac">
				Annotation client search methods with a specific resource type (e.g. List&lt;Patient&gt; search())
				won't return any resources that aren't of the correct type that are received in a response
				bundle (generally these are referenced resources, so they are populated in the reference fields instead).
				Thanks to Tahura Chaudhry of University Health Network for the unit test!
			</action>
			<action type="add">
				Added narrative generator template for OperationOutcome resource
			</action>
			<action type="fix">
				Date/time types did not correctly parse values in the format "yyyymmdd" (although the FHIR-defined format
				is "yyyy-mm-dd" anyhow, and this is correctly handled). Thanks to Jeffrey Ting of Systems Made Simple
				for reporting! 
			</action>
			<action type="fix">
				Server search method for an unnamed query gets called if the client requests a named query
				with the same parameter list. Thanks to Neal Acharya of University Health Network for reporting!			
			</action>
			<action type="fix">
				Category header (for tags) is correctly read in client for "read" operation
			</action>
			<action type="add">
				Transaction method in server can now have parameter type Bundle instead of
				List&lt;IResource&gt;
			</action>
			<action type="add">
				HAPI parsers now use field access to get/set values instead of method accessors and mutators.
				This should give a small performance boost.
			</action>
			<action type="fix">
				JSON parser encodes resource references incorrectly, using the name "resource" instead
				of the name "reference" for the actual reference. Thanks to
				Ricky Nguyen for reporting and tracking down the issue!
			</action>
			<action type="fix">
				Rename NotImpementedException to NotImplementedException (to correct typo)
			</action>
			<action type="fix">
				Server setUseBrowserFriendlyContentType setting also respected for errors (e.g. OperationOutcome with 4xx/5xx status)
			</action>
			<action type="fix">
				Fix performance issue in date/time datatypes where pattern matchers were not static
			</action>
			<action type="fix">
				Server now gives a more helpful error message if a @Read method has a search parameter (which is invalid, but
				previously lead to a very unhelpful error message). Thanks to Tahura Chaudhry of UHN for reporting!
			</action>
			<action type="fix">
				Resource of type "List" failed to parse from a bundle correctly. Thanks to David Hay of Orion Health 
				for reporting!
			</action>
			<action type="fix">
				QuantityParam correctly encodes approximate (~) prefix to values
			</action>
			<action type="fix" issue="14">
				If a server defines a method with parameter "_id", incoming search requests for that method may
				get delegated to the wrong method. Thanks to Neal Acharya for reporting! 
			</action>
			<action type="add">
				SecurityEvent.Object structural element has been renamed to 
				SecurityEvent.ObjectElement to avoid conflicting names with the 
				java Object class. Thanks to Laurie Macdougall-Sookraj of UHN for
				reporting! 
			</action>
			<action type="fix">
				Text/narrative blocks that were created with a non-empty
				namespace prefix (e.g. &lt;xhtml:div xmlns:xhtml="..."&gt;...&lt;/xhtml:div&gt;)
				failed to encode correctly (prefix was missing in encoded resource)				
			</action>
			<action type="fix">
				Resource references previously encoded their children (display and reference)
				in the wrong order so references with both would fail schema validation.
			</action>
			<action type="add">
				SecurityEvent resource's enums now use friendly enum names instead of the unfriendly
				numeric code values. Thanks to Laurie MacDougall-Sookraj of UHN for the
				suggestion!
			</action>
		</release>
		<release version="0.5" date="2014-07-30">
			<action type="add">
				HAPI has a number of RESTful method parameter types that have similar but not identical
				purposes and confusing names. A cleanup has been undertaken to clean this up.
				This means that a number of existing classes
				have been deprocated in favour of new naming schemes.
				<![CDATA[<br/><br/>]]>
				All annotation-based clients and all server search method parameters are now named
				(type)Param, for example: StringParam, TokenParam, etc.
				<![CDATA[<br/><br/>]]>
				All generic/fluent client method parameters are now named
				(type)ClientParam, for example: StringClientParam, TokenClientParam, etc.
				<![CDATA[<br/><br/>]]>
				All renamed classes have been retained and deprocated, so this change should not cause any issues
				for existing applications but those applications should be refactored to use the 
				new parameters when possible.
			</action>
			<action type="add">
				Allow server methods to return wildcard generic types (e.g. List&lt;? extends IResource&gt;)
			</action>
			<action type="add">
				Search parameters are not properly escaped and unescaped. E.g. for a token parameter such as
				"&amp;identifier=system|codepart1\|codepart2"
			</action>
			<action type="add">
				Add support for OPTIONS verb (which returns the server conformance statement)
			</action>
			<action type="add">
				Add support for CORS headers in server
			</action>
			<action type="add">
				Bump SLF4j dependency to latest version (1.7.7)
			</action>
			<action type="add">
				Add interceptor framework for clients (annotation based and generic), and add interceptors
				for configurable logging, capturing requests and responses, and HTTP basic auth.
			</action>
			<action type="fix">
				Transaction client invocations with XML encoding were using the wrong content type ("application/xml+fhir" instead 
				of the correct "application/atom+xml"). Thanks to David Hay of Orion Health for surfacing this one!
			</action>
			<action type="add">
				Bundle entries now support a link type of "search". Thanks to David Hay for the suggestion!
			</action>
			<action type="add" issue="1">
				 If a client receives a non 2xx response (e.g. HTTP 500) and the response body is a text/plain message or
				 an OperationOutcome resource, include the message in the exception message so that it will be 
				 more conveniently displayed in logs and other places. Thanks to Neal Acharya for the suggestion! 
			</action>
			<action type="add" issue="2">
				 Read invocations in the client now process the "Content-Location" header and use it to 
				 populate the ID of the returned resource. Thanks to Neal Acharya for the suggestion!
			</action>
			<action type="fix" issue="3">
				Fix issue where vread invocations on server incorrectly get routed to instance history method if one is 
				defined. Thanks to Neal Acharya from UHN for surfacing this one! 
			</action>
			<action type="add">
				Binary reads on a server not include the Content-Disposition header, to prevent HTML in binary 
				blobs from being used for nefarious purposes. See
				<![CDATA[<a href="http://gforge.hl7.org/gf/project/fhir/tracker/?action=TrackerItemEdit&tracker_id=677&tracker_item_id=3298">FHIR Tracker Bug 3298</a>]]>
				for more information.
			</action>
			<action type="add">
				Support has been added for using an HTTP proxy for outgoing requests.
			</action>
			<action type="fix">
				Fix: Primitive extensions declared against custom resource types 
				are encoded even if they have no value. Thanks to David Hay of Orion for
				reporting this!
			</action>
			<action type="fix">
				Fix: RESTful server deployed to a location where the URL to access it contained a
				space (e.g. a WAR file with a space in the name) failed to work correctly.
				Thanks to David Hay of Orion for reporting this!
			</action>
			</release>			
		<release version="0.4" date="2014-07-13">
			<action type="add">
				<![CDATA[<b>BREAKING CHANGE:</b>]]>: IdDt has been modified so that it 
				contains a partial or complete resource identity. Previously it contained
				only the simple alphanumeric id of the resource (the part at the end of the "read" URL for
				that resource) but it can now contain a complete URL or even a partial URL (e.g. "Patient/123")
				and can optionally contain a version (e.g. "Patient/123/_history/456"). New methods have
				been added to this datatype which provide just the numeric portion. See the JavaDoc
				for more information. 
			</action>
			<action type="add">
				<![CDATA[<b>API CHANGE:</b>]]>: Most elements in the HAPI FHIR model contain
				a getId() and setId() method. This method is confusing because it is only actually used
				for IDREF elements (which are rare) but its name makes it easy to confuse with more
				important identifiers. For this reason, these methods have been deprocated and replaced with
				get/setElementSpecificId() methods. The old methods will be removed at some point. Resource
				types are unchanged and retain their get/setId methods.
			</action>
			<action type="add">
				Allow use of QuantityDt as a service parameter to support the "quantity" type. Previously
				QuantityDt did not implement IQueryParameterType so it was not valid, and there was no way to
				support quantity search parameters on the server (e.g. Observation.value-quantity)
			</action>
			<action type="add">
				Introduce StringParameter type which can be used as a RESTful operation search parameter
				type. StringParameter allows ":exact" matches to be specified in clients, and handled in servers.
			</action>
			<action type="add">
				Parsers (XML/JSON) now support deleted entries in bundles
			</action>
			<action type="add">
				Transaction method now supported in servers
			</action>
			<action type="add">
				Support for Binary resources added (in servers, clients, parsers, etc.)
			</action>
			<action type="fix">
				Support for Query resources fixed (in parser)
			</action>
			<action type="fix">
				Nested contained resources (e.g. encoding a resource with a contained resource that itself contains a resource)
				now parse and encode correctly, meaning that all contained resources are placed in the "contained" element
				of the root resource, and the parser looks in the root resource for all container levels when stitching
				contained resources back together.
			</action>
			<action type="fix">
				Server methods with @Include parameter would sometimes fail when no _include was actually
				specified in query strings.
			</action>
			<action type="fix">
				Client requests for IdentifierDt types (such as Patient.identifier) did not create the correct
				query string if the system is null.
			</action>
			<action type="add">
				Add support for paging responses from RESTful servers.
			</action>
			<action type="fix">
				Don't fail on narrative blocks in JSON resources with only an XML declaration but no content (these are
				produced by the Health Intersections server) 
			</action>
			<action type="fix">
				Server now automatically compresses responses if the client indicates support 
			</action>
			<action type="fix">
				Server failed to support optional parameters when type is String and :exact qualifier is used 
			</action>
			<action type="fix">
				Read method in client correctly populated resource ID in returned object 
			</action>
			<action type="add">
				Support added for deleted-entry by/name, by/email, and comment from Tombstones spec
			</action>
		</release>			
		<release version="0.3" date="2014-05-12" description="This release corrects lots of bugs and introduces the fluent client mode">
		</release>			
		<release version="0.2" date="2014-04-23">
		</release>			
		<release version="0.1" date="2014-04-15">
		</release>			
	</body>
</document>
