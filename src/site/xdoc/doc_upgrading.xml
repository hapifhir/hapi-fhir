<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>Upgrade Guide</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>

	<body>

		<section name="Upgrading to HAPI 1.1">
			
			<p>
				Since the early days of FHIR, HL7.org has provided an
				open source "Java Reference Implementation", which is an implementation
				of a FHIR data model, parser, and client in Java.
			</p>
			<p>
				HAPI was originally started as a separate Java implementation of FHIR,
				with a fairly different focus: implementing servers with an easily 
				extendible data model. Over time though, the two Java implementations have
				shown a fair bit of overlap, so at the 2014
				<a href="http://fhir.furore.com/Events/DevDaysEval2014">DevDays</a> we decided
				to try and harmonize the two libraries.
			</p>
			<p>
				HAPI FHIR 1.1 begins the availability of a harmonized library. Note that 
				this version has not yet been formally released, but is currently available in 
				"snapshot" development builds. 
			</p>
			<p>
				<b>For HAPI FHIR users:</b> This integration will bring the ability to use powerful features
				from the RI in your applications, such as the resource validator and the narrative
				generator. 
			</p>
			<p>
				<b>For RI users:</b> This integration will bring the ability to use HAPI's client
				and server frameworks in your application, as well as the ability to take advantage 
				of HAPI's code-first statically bound extension mechanism. 
			</p>
			
			<subsection name="The RI Data Model">
				<p>
					At this point, the RI integration consists of a new parallel set of
					classes representing the FHIR data model. For example, in addition to the
					Patient classes representing HAPI's DSTU1 and DSTU2 models there is now
					a new Patient class representing the RI structure (which is also a DSTU2
					structure).
				</p>
				<p>
					The reference implementation (RI) structures have been added as a new 
					maven dependency library called <code>hapi-fhir-structures-hl7org-dstu2</code>. See
					the <a href="./download.html">download page</a> for information on the Maven
					dependencies for this version of the structures.
				</p>
				<p>
					A new interface has been added which serves as a master interface
					for all resource classes: <code>org.hl7.fhir.instance.model.api.IBaseResource</code>.
					All RI resource classes will be in the package <code>org.hl7.fhir.instance.model</code>,
					as shown below.
				</p>
				<img src="./images/hapi-1.1-structs-resource.png" alt="Structures"/>
	
				<p>
					Datatypes will also be found inthe same package. Unlike HAPI datatype structures,
					which all end with "Dt", the RI primitive structure names end with "Type" and the
					RI composite structures have no suffix, as shown below.
				</p>
				<img src="./images/hapi-1.1-structs-datatypes.png" alt="Structures"/>

			</subsection>
			
			<subsection name="Using the RI Structures in Your Application">
				
				<p>
					If you want to use the RI structures in your application,
					you will need to use the "hapi-fhir-structures-hl7org-dstu2-[version].jar"
					library.
				</p>

				<p>
					Using these structures is then similar to using other structures.
				</p>
				
				<macro name="snippet">
					<param name="id" value="creatingContextHl7org" />
					<param name="file" value="examples/src/main/java/example/FhirContextIntro.java" />
				</macro>
				
			</subsection>
			
		</section>

		<section name="Upgrading Existing Applications to HAPI FHIR 1.1">
		
			<p>
				If you have an existing application built using a version of previous 
				version of HAPI FHIR, there is one change that may affect you. As shown above,
				a new interface called <code>IBaseResource</code> has been introduced, and the
				<code>IResource</code> interface extends from it. Many methods in the API which 
				previously returned <code>IResource</code> now return <code>IBaseResource</code>.
			</p>
			<p>
				For these methods, you may cast the <code>IBaseResource</code> to
				<code>IResource</code>. 
			</p>
			
		</section>
		
		
<!-- 
		<section name="Upgrading to HAPI FHIR 0.8">
			
			<p>
				<b>This section is still incomplete: </b> Note that HAPI 0.8 has not 
				yet been released. This section provides details about how to use the
				latest SNAPSHOT release, but it will continue to be enhanced as we move towards
				the final 0.8 release.
			</p>
			
			<subsection name="Importing Resources">
			
				<p>
					Beginning in HAPI-FHIR 0.8, the main distribution has been split from one
					JAR to a set of JAR files. You will need at least two to use HAPI:
				</p>
				<ul>
					<li>
						<i>Required:</i> The <code>hapi-fhir-base-[version].jar</code> file containing the core library.
					</li>
					<li>
						<i>Required:</i> The <code>hapi-fhir-structures-dstu-[version].jar</code> file containing the FHIR model classes
						for DSTU1 (all contents of this JAR were previously found in hapi-fhir-base).
					</li>
					<li>
						<i>Optional:</i> You may also choose to include the 
						<code>hapi-fhir-structures-dev-[version].jar</code>. This JAR contains structures for the 
						latest DEV version of FHIR. You may create a client/server which supports either DSTU1 or DEV
						resources, or both depending on your needs. Note that using DEV resources may introduce 
						incompatibilities with other frameworks however. If you are including this JAR,
						<b>you must also include hapi-fhir-structures-dstu-[version].jar</b>. 
						We are planning on removing the requirement to include 
						the DSTU structures in your application (so you can include only the
						DEV ones) for HAPI-FHIR 0.9.
					</li>
				</ul>
			
			</subsection>
			
			<subsection name="Tinder Plugin">
				
				<p>
					If you are using the "Tinder" Maven plugin to generate structure code,
					you will need to add a structure dependency to the plugin configuration
					itself in your project pom.xml. See the
					<a href="./doc_tinder.html">Tinder Page</a> for an example of 
					how to do this.
				</p>
				
			</subsection>
		</section>

		<section name="Upgrading to HAPI FHIR 0.5">

			
			<p>
				As the HAPI FHIR API begins to mature, a number of minor changes to the way the library works
				have been introduced. Mostly these changes are made in order to make a consistent API across functions.
				This page outlines how to upgrade your code to work with HAPI 0.5.
			</p>

			<subsection name="Global Changes">
			
				<ul>
					<li>
						The 
						IdDt
						class, which is used to represent resource IDs has been vastly
						improved so that they can store any form of ID, including a simple alphanumeric 
						ID (1234), a relative ID (Patient/1234), a fully qualified ID (http://foo/Patient/1234) or
						even a version specific ID (Patient/1234/_history/2). As a result, a number
						of version specific fields/methods have been deprocated. In general, if you 
						need to get or set (or otherwise specify) the ID of a resource, you can simply
					</li>
				</ul>
				
			</subsection>

			
			<subsection name="Changes to Server Code">
			
				<ul>
					<li>
						If your server implements <code>_include</code>: The PathSpecification 
						class has been renamed to Include. Any RESTful methods which 
						have a parameter of type PathSpecification should simply use the Include
						type instead, which is identical.
					</li>
					<li>
						A set of <b>search</b> operation value parameters has been created, which
						have names that match the value types described in the FHIR specification. For
						example, Patient's "identifier" search param is a "token" type. Previous examples
						in the HAPI documentation used a type of IdentifierDt for this parameter. A new
						class called TokenParam, as well as repeatable extensions called TokenOrListParam
						and TokenAndListParam have been created and should be used instead. 
						See the
						<a href="./doc_rest_operations.html#type_search">RESTful Operations</a> search section
						for information on these new types.
					</li>
				</ul>
			
			</subsection>
			
			<subsection name="Changes to Client Code">
				
				<ul>
					<li>
						Fluent/generic client search parameter types have been renamed from [type]Param to [type]ClientParam,
						to avoid conflicts with server types. So, for example the TokenParam class that can be used
						in fluent searches is now called TokenClientParam.					
					</li>
				</ul>
				
			</subsection>
					
		</section>
-->
		
	</body>

</document>
