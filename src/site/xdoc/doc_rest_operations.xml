<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>RESTful Operations</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>

	<body>
		<section name="Operations">

			<a name="operations" />
			<p>
				This page shows the operations which can be implemented on
				HAPI
				<a href="./doc_rest_server.html">RESTful Servers</a>, as well as
				<a href="./doc_rest_client_annotation.html">Annotation Clients</a>.
				Most of the examples shown here show how to implement a server
				method, but to perform an equivalent call on an annotation
				client you simply put a method with the same signature in your
				client interface.
			</p>

			<a name="instance_read" />
		</section>

		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->

		<section name="Instance Level - Read">

			<p>
				The
				<a href="http://hl7.org/implement/standards/fhir/http.html#read">
					<b>read</b>
				</a>
				operation retrieves a resource by ID. It is annotated with the
				<a href="./apidocs/ca/uhn/fhir/rest/annotation/Read.html">@Read</a>
				annotation, and has a single parameter annotated with the
				<a href="./apidocs/ca/uhn/fhir/rest/annotation/IdParam.html">@IdParam</a>
				annotation.
			</p>

			<macro name="snippet">
				<param name="id" value="read" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>

			<p>
				Example URL to invoke this method:
				<br />
				<code>http://fhir.example.com/Patient/111</code>
			</p>

			<p>
				The following snippet shows how to define a client interface
				to handle a read method.
			</p>

			<macro name="snippet">
				<param name="id" value="clientReadInterface" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>

			<a name="instance_vread" />
		</section>

		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->

		<section name="Instance Level - VRead">

			<p>
				The
				<a href="http://hl7.org/implement/standards/fhir/http.html#vread">
					<b>vread</b>
				</a>
				operation retrieves a specific version of a resource with a given ID.
				To support vread, simply add "version=true" to your @Read annotation. This
				means that the read method will support both "Read" and "VRead". The IdDt
				may or may not have the version populated depending on the client request.
			</p>

			<macro name="snippet">
				<param name="id" value="vread" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>

			<p>
				Example URL to invoke this method:
				<br />
				<code>http://fhir.example.com/Patient/111/_history/2</code>
			</p>

			<a name="instance_update" />
		</section>

		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->

		<section name="Instance Level - Update">

			<p>
				The
				<a href="http://hl7.org/implement/standards/fhir/http.html#update">
					<b>update</b>
				</a>
				operation updates a specific resource instance (using its ID), and optionally
				accepts a version ID as well (which can be used to detect version conflicts).
			</p>
			<p>
				Update methods must be annotated with the
				<a href="./apidocs/ca/uhn/fhir/rest/annotation/Update.html">@Update</a>
				annotation, and have a parameter annotated with the
				<a href="./apidocs/ca/uhn/fhir/rest/annotation/ResourceParam.html">@ResourceParam</a>
				annotation. This parameter contains the resource instance to be created.
				See the <a href="./apidocs/ca/uhn/fhir/rest/annotation/ResourceParam.html">@ResourceParam</a> for information on the types allowed for this parameter (resource types, String, byte[]).
			</p>
			<p>
				In addition, the method may optionally have a parameter annotated with the
				<a href="./apidocs/ca/uhn/fhir/rest/annotation/IdParam.html">@IdParam</a>
				annotation, or they may obtain the ID of the resource being updated from
				the resource itself. Either way, this ID comes from the URL passed in.
			</p>
			<p>
				Update methods must return an object of type
				<a href="./apidocs/ca/uhn/fhir/rest/api/MethodOutcome.html">MethodOutcome</a>
				. This
				object contains the identity of the created resource.
			</p>
			<p>
				The following snippet shows how to define an update method on a server:
			</p>

			<macro name="snippet">
				<param name="id" value="update" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>

			<p>
				Example URL to invoke this method (this would be invoked using an HTTP PUT,
				with the resource in the PUT body):
				<br />
				<code>http://fhir.example.com/Patient</code>
			</p>

			<p>
				The following snippet shows how the corresponding client interface
				would look:
			</p>

			<macro name="snippet">
				<param name="id" value="updateClient" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>

			<h4>Conditional Updates</h4>
			<p>
				If you wish to suport conditional updates, you can add a parameter
				tagged with a
				<a href="./apidocs/ca/uhn/fhir/rest/annotation/ConditionalOperationParam.html">@ConditionalOperationParam</a>
				annotation. If the request URL contains search parameters instead of a
				resource ID, then this parameter will be populated.
			</p>

			<macro name="snippet">
				<param name="id" value="updateConditional" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>

			<p>
				Example URL to invoke this method (this would be invoked using an HTTP PUT,
				with the resource in the PUT body):
				<br />
				<code>http://fhir.example.com/Patient?identifier=system%7C00001</code>
			</p>

			<a name="raw_update_access"/>
			<h4>Accessing The Raw Resource Payload</h4>
			<p>
				If you wish to have access to the raw resource payload as well as the parsed value
				for any reason, you may also add parameters which have been annotated
				with the <code>@ResourceParam</code> of type
				<code>String</code> (to access the raw resource body) and/or
				<code>EncodingEnum</code> (to determine which encoding was used)
			</p>
			<p>
				The following example shows how to use these additonal data elements.
			</p>

			<macro name="snippet">
				<param name="id" value="updateRaw" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>

			<a name="prefer"/>
			<h4>Prefer Header / Returning the resource body</h4>
			<p>
				If you want to allow clients to request that the server return
				the resource body as a result of the transaction, you may wish to
				return the updated resource in the returned MethodOutcome.
			</p>
			<p>
				In this type of request, the client adds a header containing
				<code>Prefer: return=representation</code> which indicates to the server
				that the client would like the resource returned in the response.
			</p>
			<p>
				In order for the server to be able to honour this request, the
				server method should add the updated resource to the MethodOutcome object
				being returned, as shown in the example below.
			</p>

			<macro name="snippet">
				<param name="id" value="updatePrefer" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>

			<h4>Contention Aware Updating</h4>

			<p>
				As of FHIR DSTU2, FHIR uses the <code>ETag</code> header to
				provide "conention aware updating". Under this scheme, a client
				may create a request that contains an ETag specifying the version,
				and the server will fail if the given version is not the latest
				version.
			</p>
			<p>
				Such a request is shown below. In the following example, the update will
				only be applied if resource "Patient/123" is currently at version "3".
				Otherwise,
			</p>
			<pre><![CDATA[PUT [serverBase]/Patient/123
If-Match: W/"3"]]></pre>

			<p>
				If a client performs a contention aware update, the ETag version will be
				placed in the version part of the IdDt/IdType that is passed into the
				method. For example:
			</p>

			<macro name="snippet">
				<param name="id" value="updateEtag" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>

			<a name="instance_delete" />
		</section>

		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->

		<section name="Instance Level - Delete">

			<p>
				The
				<a href="http://hl7.org/implement/standards/fhir/http.html#delete">
					<b>delete</b>
				</a>
				operation retrieves a specific version of a resource with a given ID. It takes a single
				ID parameter annotated with an
				<a href="./apidocs/ca/uhn/fhir/rest/annotation/IdParam.html">@IdParam</a>
				annotation, which supplies the ID of the resource to delete.
			</p>

			<macro name="snippet">
				<param name="id" value="delete" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>

			<p>
				Delete methods are allowed to return the following types:
			</p>
			<ul>
				<li>
					<b>void</b>
					: This method may return
					<code>void</code>
					, in which case
					the server will return an empty response and the client will ignore
					any successful response from the server (failure responses will still throw
					an exception)
				</li>
				<li>
					<b>
						<a href="./apidocs/ca/uhn/fhir/rest/api/MethodOutcome.html">MethodOutcome</a>
					</b>
					:
					This method may return
					<code>MethodOutcome</code>
					,
					which is a wrapper for the FHIR OperationOutcome resource, which may optionally be returned
					by the server according to the FHIR specification.
				</li>
			</ul>

			<p>
				Example URL to invoke this method (HTTP DELETE):
				<br />
				<code>http://fhir.example.com/Patient/111</code>
			</p>

			<h4>Conditional Deletes</h4>

			<p>
				The FHIR specification also allows "conditional deletes". A conditional
				delete uses a search style URL instead of a read style URL, and
				deletes a single resource if it matches the given search parameters.
				The following example shows how to
			</p>

			<macro name="snippet">
				<param name="id" value="deleteConditional" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>

			<p>
				Example URL to perform a conditional delete (HTTP DELETE):
				<br />
				<code>http://fhir.example.com/Patient?identifier=system%7C0001</code>
			</p>

			<a name="type_create" />
		</section>

		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->

		<section name="Type Level - Create">

			<p>
				The
				<a href="http://hl7.org/implement/standards/fhir/http.html#create">
					<b>create</b>
				</a>
				operation saves a new resource to the server, allowing the server to
				give that resource an ID and version ID.
			</p>
			<p>
				Create methods must be annotated with the
				<a href="./apidocs/ca/uhn/fhir/rest/annotation/Create.html">@Create</a>
				annotation, and have a single parameter annotated with the
				<a href="./apidocs/ca/uhn/fhir/rest/annotation/ResourceParam.html">@ResourceParam</a>
				annotation. This parameter contains the resource instance to be created.
				See the <a href="./apidocs/ca/uhn/fhir/rest/annotation/ResourceParam.html">@ResourceParam</a> for information on the types allowed for this parameter (resource types, String, byte[]).
			</p>
			<p>
				Create methods must return an object of type
				<a href="./apidocs/ca/uhn/fhir/rest/api/MethodOutcome.html">MethodOutcome</a>
				. This
				object contains the identity of the created resource.
			</p>
			<p>
				The following snippet shows how to define a server create method:
			</p>

			<macro name="snippet">
				<param name="id" value="create" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>

			<p>
				Example URL to invoke this method (this would be invoked using an HTTP POST,
				with the resource in the POST body):
				<br />
				<code>http://fhir.example.com/Patient</code>
			</p>

			<p>
				The following snippet shows how the corresponding client interface
				would look:
			</p>

			<macro name="snippet">
				<param name="id" value="createClient" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>

			<h4>Conditional Creates</h4>

			<p>
				The FHIR specification also allows "conditional creates". A conditional
				create has an additional header called <code>If-None-Exist</code>
				which the client will supply on the HTTP request. The client will
				populate this header with a search URL such as <code>Patient?identifier=foo</code>.
				See the FHIR specification for details on the semantics for correctly
				implementing conditional create.
			</p>
			<p>
				When a conditional create is detected (i.e. when the create request contains
				a populated <code>If-None-Exist</code> header), if a method parameter annotated
				with the
				<a href="./apidocs/ca/uhn/fhir/rest/annotation/ConditionalOperationParam.html">@ConditionalOperationParam</a>
				is detected, it will be populated with the value of this header.
			</p>

			<macro name="snippet">
				<param name="id" value="createConditional" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>

			<p>
				Example URL and HTTP header to perform a conditional create:
				<br />
				<code>http://fhir.example.com/Patient<br/>If-None-Exist: Patient?identifier=system%7C0001</code>
			</p>

			<h4>Prefer Header / Returning the resource body</h4>
			<p>
				If you wish to allow your server to honour the <code>Prefer</code>
				header, the same mechanism shown above for
				<a href="#prefer">Prefer Header for Updates</a> should be used.
			</p>

			<h4>Accessing The Raw Resource Payload</h4>
			<p>
				The create operation also supports access to the raw payload,
				using the same semantics as raw payload access
				<a href="#raw_update_access">for the update operation</a>.
			</p>

			<a name="type_search" />
		</section>

		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->

		<section name="Type Level - Search">

			<p>
				The
				<a href="http://hl7.org/implement/standards/fhir/http.html#search">
					<b>search</b>
				</a>
				operation returns a bundle
				with zero-to-many resources of a given type, matching a given set of parameters.
			</p>

			<subsection name="Search with No Parameters">

				<p>
					The following example shows a search with no parameters. This operation
					should return all resources of a given type (this obviously doesn't make
					sense in all contexts, but
					does for some resource types).
				</p>

				<macro name="snippet">
					<param name="id" value="searchAll" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

				<p>
					Example URL to invoke this method:
					<br />
					<code>http://fhir.example.com/Patient</code>
				</p>

			</subsection>
			<subsection name="Search Parameters: String Introduction">

				<p>
					To allow a search using given search parameters, add one or more parameters
					to your search method and tag these parameters as either
					<a href="./apidocs/ca/uhn/fhir/rest/annotation/RequiredParam.html">@RequiredParam</a>
					or
					<a href="./apidocs/ca/uhn/fhir/rest/annotation/OptionalParam.html">@OptionalParam</a>
					.
				</p>

				<p>
					This annotation takes a "name" parameter which specifies the parameter's
					name (as it will appear in the search URL). FHIR defines standardized parameter
					names for each
					resource, and these are available as constants on the
					individual HAPI resource
					classes.
				</p>

				<p>
					Parameters which take a string as their format should use the
					<code><a href="./apidocs/ca/uhn/fhir/rest/param/StringParam.html">StringParam</a></code>
					type. They may also use normal java <code>String</code>, although it is
					not possible to use the <code>:exact</code> qualifier in that case.
				</p>

				<macro name="snippet">
					<param name="id" value="searchStringParam" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

				<p>
					Example URL to invoke this method:
					<br />
					<code>http://fhir.example.com/Patient?family=SMITH</code>
				</p>

			</subsection>
			<subsection name="Search Parameters: Token/Identifier">

				<p>
					The "token" type is used for parameters which have two parts, such as
					an idnetifier (which has a system URI, as well as the actual identifier)
					or a code (which has a code system, as well as the actual code).
					For example, the search below can be used to search by
					identifier (e.g. search for an MRN).
				</p>

				<macro name="snippet">
					<param name="id" value="searchIdentifierParam" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

				<p>
					Example URL to invoke this method:
					<br />
					<code>http://fhir.example.com/Patient?identifier=urn:foo|7000135</code>
				</p>

			</subsection>

			<subsection name="Search Parameters: Date (Simple)">

				<p>
					The FHIR specification provides a sytax for specifying
					dates+times (but for simplicity we will just say dates here)
					as search criteria.
				</p>

				<p>
					Dates may be optionally prefixed with a qualifier. For example, the
					string
					<code>&gt;=2011-01-02</code>
					means any date on or after 2011-01-02.
				</p>

				<p>
					To accept a qualified date parameter, use the
					DateParam parameter type.
				</p>

				<macro name="snippet">
					<param name="id" value="dates" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

				<p>
					Example URL to invoke this method:
					<br />
					<code>http://fhir.example.com/Observation?birthdate=&gt;=2011-01-02</code>
				</p>

				<p>
					Invoking a client of thie type involves the following syntax:
				</p>

				<macro name="snippet">
					<param name="id" value="dateClient" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

			</subsection>

			<a name="DATE_RANGES" />
			<subsection name="Search Parameters: Date (Ranges)">

				<p>
					A common scenario in searches is to allow searching for resources
					with values (i.e timestamps) within a range of dates.
				</p>

				<p>
					FHIR allows for multiple parameters with the same key, and interprets
					these as being an "AND" set. So, for example, a range of
					<code>date=&gt;=2011-01-01&amp;date=&lt;2011-02-01</code>
					<br />
					can be interpreted as any date within January 2011.
				</p>

				<p>
					The following snippet shows how to accept such a range, and combines it
					with a specific identifier, which is a common scenario. (i.e. Give me a list
					of observations for a
					specific patient within a given date range)
				</p>
				<macro name="snippet">
					<param name="id" value="dateRange" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

				<p>
					Example URL to invoke this method:
					<br />
					<code>http://fhir.example.com/Observation?subject.identifier=7000135&amp;date=&gt;=2011-01-01&amp;date=&lt;2011-02-01</code>
				</p>

				<p>
					Invoking a client of this type involves the following syntax:
				</p>

				<macro name="snippet">
					<param name="id" value="dateClient" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

				<h4>Unbounded Ranges</h4>

				<p>
					Note that when using a date range parameter, it is also possible for
					the client to request an "unbounded" range. In other words, a range that
					only a start date and no end
					date, or vice versa.
				</p>

				<p>
					An example of this might be the following URL, which refers to any Observation
					resources for the given MRN and having a date after 2011-01-01.
					<br />
					<code>http://fhir.example.com/Observation?subject.identifier=7000135&amp;date=&gt;=2011-01-01</code>
					<br />
					When such a request is made of a server (or to make such a request from a client),
					the
					<code>getLowerBound()</code>
					or
					<code>getUpperBound()</code>
					property of the
					<code>DateRangeParam</code>
					object will be set to
					<code>null</code>
					.
				</p>

			</subsection>

			<subsection name="Search Parameters: Quantity">

				<p>
					Quantity parameters allow a number with units and a comparator
				</p>

				<p>
					The following snippet shows how to accept such a range, and combines it
					with a specific identifier, which is a common scenario. (i.e. Give me a list
					of observations for a
					specific patient within a given date range)
				</p>
				<macro name="snippet">
					<param name="id" value="quantity" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

				<p>
					Example URL to invoke this method:
					<br />
					<code>http://fhir.example.com/Observation?value-quantity=&lt;=123.2||mg</code>
				</p>

			</subsection>

			<subsection name="Search Parameters: Resource Reference">

				<p>
					Many search parameters refer to resource references. For instance, the Patient
					parameter "provider" refers to the resource marked as the managing organization
					for patients.
				</p>
				<p>
					Reference parameters use the
					<a href="./apidocs/ca/uhn/fhir/rest/param/ReferenceParam.html">ReferenceParam</a>
					type. Reference parameters are, in their most basic form, just a pointer to another
					resource. For example, you might want to query for DiagnosticReport resources where the
					subject (the Patient resource that the report is about) is Patient/123. The following
					example shows a simple resource reference parameter in use.
				</p>
				<macro name="snippet">
					<param name="id" value="referenceSimple" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>


				<h4>Chained Resource References</h4>

				<p>
					References may also support a "chained" value. This is a search parameter name
					on the target resource. For example, you might want to search for DiagnosticReport
					resources by subject, but use the subject's last name instead of their resource ID.
					In this example, you are chaining "family" (the last name) to "subject" (the patient).
					The net result in the query string would look like:<br/>
					<code>http://fhir.example.com/DiagnosticReport?subject.family=SMITH</code><br/>
					What this query says is "<i>fetch me all of the DiagnosticReport resources
					where the <b>subject</b> (Patient) of the report has the <b>family</b> (name) of
					'SMITH'</i>".
				</p>

				<p>
					There are two ways of dealing with chained parameters in your methods: static chains and
					dynamic chains. Both are equally valid, although dyamic chains might lead to somewhat
					more compact and readable code.
				</p>

				<a name="dynamic_chains"/>
				<h4>Dynamic Chains</h4>

				<p>
					Chained values must be explicitly declared through the use
					of a whitelist (or blacklist). The following example shows how to declare a
					report with an allowable chained parameter:
				</p>
				<macro name="snippet">
					<param name="id" value="referenceWithChain" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

				<p>
					You may also specify the whitelist value of
					<code>""</code> to allow an empty chain (e.g. ther resource ID)
					and this can be combined with other values, as shown below:
				</p>

				<macro name="snippet">
					<param name="id" value="referenceWithChainCombo" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

				<p>
					If you are handling multiple types of chained parameters in a single method,
					you may want to convert the reference parameter type into something more
					convenient before using its value. The following example shows how to do that.
				</p>

				<macro name="snippet">
					<param name="id" value="referenceWithDynamicChain" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

				<h4>Static Chains</h4>

				<p>
					It is also possible to explicitly state a chained value right in the parameter name.
					This is useful if you want to only support a search by a specific given chained
					parameter. It has the added bonus that you can use the correct parameter type of
					the chained parameter (in this case a TokenParameter because the Patient.identifier
					parameter is a token)
				</p>

				<macro name="snippet">
					<param name="id" value="referenceWithStaticChain" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

			</subsection>

			<subsection name="Search Parameters: Composite">

				<p>
					Composite search parameters incorporate two parameters in a single
					value. Each of those parameters will themselves have a parameter type.
				</p>

				<p>
					In the following example, Observation.name-value-date is shown. This parameter
					is a composite of a string and a date. Note that the composite parameter types
					(StringParam and DateParam) must be specified in both the annotation's
					<code>compositeTypes</code> field, as well as the generic types for the
					<code>CompositeParam</code> method parameter itself.
				</p>

				<macro name="snippet">
					<param name="id" value="searchComposite" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

				<p>
					Example URL to invoke this method:
					<br />
					<code>http://fhir.example.com/Observation?name-value-date=PROCTIME$2001-02-02</code>
				</p>

			</subsection>

			<subsection name="Combining Multiple Parameters">

				<p>
					Search methods may take multiple parameters, and these parameters
					may (or may not) be optional.
					To add a second required parameter, annotate the
					parameter with
					<a href="./apidocs/ca/uhn/fhir/rest/annotation/RequiredParam.html">@RequiredParam</a>
					.
					To add an optional parameter (which will be passed in as
					<code>null</code>
					if no value
					is supplied), annotate the method with
					<a href="./apidocs/ca/uhn/fhir/rest/annotation/OptionalParam.html">@OptionalParam</a>
					.
				</p>

				<p>
					You may annotate a method with any combination of as many @RequiredParam and as many @OptionalParam
					parameters as you want. It is valid to have only @RequiredParam
					parameters, or
					only @OptionalParam parameters, or any combination of the two.
				</p>

				<p>
					If you wish to create a server that can accept any combination of a large number
					of parameters, (this is how the various reference servers behave, as well as the
					<a href="http://fhirtest.uhn.ca">public HAPI server</a>)
					the easiest way to accomplish this is to simply create one method
					with all allowable parameters, each annotated as @OptionalParam.
				</p>

				<p>
					On the other hand, if you have specific combinations of parameters you wish to
					support (a common scenario if you are building FHIR on top of existing data sources
					and only have certain indexes you can use) you could create multiple search methods,
					each with specific required and optional parameters matching the database indexes.
				</p>

				<p>
					The following example shows a method with two parameters.
				</p>

				<macro name="snippet">
					<param name="id" value="searchOptionalParam" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

				<p>
					Example URLs to invoke this method:
					<br />
					<code>http://fhir.example.com/Patient?family=SMITH</code>
					<br />
					<code>http://fhir.example.com/Patient?family=SMITH&amp;given=JOHN</code>
				</p>

			</subsection>

			<subsection name="Multi-Valued (AND/OR) Parameters">

				<p>
					It is possible to accept multiple values of a single parameter
					as well. This is useful in cases when you want to return a list
					of resources with criteria matching a list of
					possible values.
					See the
					<a href="http://www.hl7.org/implement/standards/fhir/search.html#combining">FHIR Specification</a>
					for more information.
				</p>

				<p>
					The FHIR specification allows two types of composite parameters:
				</p>
				<ul>
					<li>
						Where a parameter may accept multiple comma separated values within a single value string
						(e.g.
						<code>?language=FR,NL</code>
						) this is treated as an
						<b>OR</b>
						relationship, and
						the search should return elements matching either one or the other.
					</li>
					<li>
						Where a parameter may accept multiple value strings for the same parameter name
						(e.g.
						<code>?language=FR&amp;language=NL</code>
						) this is treated as an
						<b>AND</b>
						relationship,
						and the search should return only elements matching both.
					</li>
				</ul>

				<p>
					It is worth noting that according to the FHIR specification, you can have an
					AND relationship combining multiple OR relationships, but not vice-versa. In
					other words, it's possible to support a search like
					<code>("name" = ("joe" or "john")) AND ("age" = (11 or 12))</code> but not
					a search like
					<code>("language" = ("en" AND "fr") OR ("address" = ("Canada" AND "Quebec"))</code>
				</p>

				<h4>OR Relationship Query Parameters</h4>

				<p>
					To accept a composite parameter, use a parameter type which implements the
					<a href="./apidocs/ca/uhn/fhir/model/api/IQueryParameterOr.html">IQueryParameterOr</a>
					interface.
				</p>
				<p>
					Each parameter type (StringParam, TokenParam, etc.) has a corresponding parameter
					which accepts an OR list of parameters. These types are called "[type]OrListParam", for example:
					StringOrListParam and TokenOrListParam.
				</p>
				<p>
					The following example shows a search for Observation by name, where a list of
					names may be passed in (and the expectation is that the server will return Observations
					that match any of these names):
				</p>

				<macro name="snippet">
					<param name="id" value="searchMultiple" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

				<p>
					Example URL to invoke this method:
					<br />
					<code>http://fhir.example.com/Observation?name=urn:fakenames|123,urn:fakenames|456</code>
				</p>

				<h4>AND Relationship Query Parameters</h4>

				<p>
					To accept a composite parameter, use a parameter type which implements the
					<a href="./apidocs/ca/uhn/fhir/model/api/IQueryParameterAnd.html">IQueryParameterAnd</a>
					interface (which in turn encapsulates the corresponding IQueryParameterOr types).
				</p>
				<p>
					An example follows which shows a search for Patients by address, where multiple string
					lists may be supplied by the client. For example, the client might request that the
					address match <code>("Montreal" OR "Sherbrooke") AND ("Quebec" OR "QC")</code> using
					the following query:
					<br/>
					<code>http://fhir.example.com/Patient?address=Montreal,Sherbrooke&amp;address=Quebec,QC</code>
				</p>
				<p>
					The following code shows how to receive this parameter using a
					<a href="./apidocs/ca/uhn/fhir/rest/param/StringAndListParam.html">StringAndListParameter</a>,
					which can handle an AND list of multiple OR lists of strings.
				</p>

				<macro name="snippet">
					<param name="id" value="searchMultipleAnd" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

				<p>
					Note that AND parameters join multiple OR parameters together, but
					the inverse is not true. In other words, it is possible in FHIR
					to use AND search parameters to specify a search criteria of
					<code>(A=1 OR A=2) AND (B=1 OR B=2)</code>
					but it is not possible to specify
					<code>(A=1 AND B=1) OR (A=2 AND B=2)</code> (aside from
					in very specific cases where a composite parameter has been
					specifically defined).
				</p>

				<h4>AND Relationship Query Parameters for Dates</h4>

				<p>
					Dates are a bit of a special case, since it is a common scenario to want to match
					a date range (which is really just an AND query on two qualified date parameters).
					See the section below on <a href="#DATE_RANGES">date ranges</a>
					for	an example of a DateRangeParameter.
				</p>

			</subsection>

			<subsection name="Resource Includes (_include)">

				<p>
					FHIR allows clients to request that specific linked resources be included
					as contained resources, which means that they will be "embedded" in a special
					container called
					"contained" within the parent resource.
				</p>

				<p>
					HAPI allows you to add a parameter for accepting includes if you wish
					to support them for specific search methods.
				</p>

				<macro name="snippet">
					<param name="id" value="pathSpec" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

				<p>
					Example URL to invoke this method:
					<br />
					<code>http://fhir.example.com/DiagnosticReport?identifier=7000135&amp;_include=DiagnosticReport.subject</code>
				</p>

				<p>
					It is also possible to use a String type for the include parameter,
					which is more convenient if only a single include (or null for none)
					is all that is required.
				</p>

				<macro name="snippet">
					<param name="id" value="pathSpecSimple" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

			</subsection>

			<subsection name="Reverse Resource Includes (_revinclude)">

				<p>
					To add support for reverse includes (via the <code>_revinclude</code> parameter),
					use the same format as with the <code>_include</code> parameter (shown above)
					but add <code>reverse=true</code> to the <code>@IncludeParam</code>
					annotation, as shown below.
				</p>

				<macro name="snippet">
					<param name="id" value="revInclude" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

			</subsection>

			<subsection name="Named Queries (_query)">

				<p>
					FHIR supports
					<a href="http://www.hl7.org/implement/standards/fhir/search.html#advanced">named queries</a>
					,
					which may have specific behaviour defined. The following example shows how to create a Search
					operation with a name.
				</p>

				<p>
					This operation can only be invoked by explicitly specifying the given query name
					in the request URL. Note that the query does not need to take any parameters.
				</p>

				<macro name="snippet">
					<param name="id" value="searchNamedQuery" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

				<p>
					Example URL to invoke this method:
					<br />
					<code>http://fhir.example.com/Patient?_query=namedQuery1&amp;someparam=value</code>
				</p>

			</subsection>

			<subsection name="Sorting (_sort)">

				<p>
					FHIR supports
					<a href="http://www.hl7.org/implement/standards/fhir/search.html#sort">sorting</a>
					according to a specific set of rules.
				</p>

				<p>
					According to the specification, sorting is requested by the client using a
					search param as the sort key. For example, when searching Patient resources,
					a sort key of "given" requests the "given" search param as the sort key. That
					param maps to the values in the field "Patient.name.given".
				</p>

				<p>
					Sort specifications can be passed into handler methods by adding a parameter
					of type
					SortSpec,
					which has been annotated with the
					@Sort
					annotation, as shown in the following example:
				</p>

				<macro name="snippet">
					<param name="id" value="sort" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

				<p>
					Example URL to invoke this method:
					<br />
					<code>http://fhir.example.com/Patient?_identifier=urn:foo|123&amp;_sort=given</code>
				</p>

			</subsection>

			<subsection name="Adding Descriptions">

				<p>
					It is also possible to annotate search methods and/or parameters with
					the
					<a href="./apidocs/ca/uhn/fhir/model/api/annotation/Description.html">@Description</a>
					annotation. This annotation allows you to add a description of the method
					and the individual parameters. These descriptions will be placed in the
					server's conformance statement, which can be helpful to anyone who is developing
					software against your server.
				</p>

				<macro name="snippet">
					<param name="id" value="searchWithDocs" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

			</subsection>

			<a name="type_validate" />
		</section>

		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->

		<section name="Type Level - Validate">

			<p>
				The
				<a href="http://hl7.org/implement/standards/fhir/http.html#validate">
					<b>validate</b>
				</a>
				operation tests whether a resource passes business validation, and would be
				acceptable for saving to a server (e.g. by a create or update method).
			</p>
			<p class="doc_info_bubble">
				<b>Note on FHIR versions:</b>
				In FHIR DSTU1 the validate operation used a URL resembling <code>http://example.com/Patient/_validate</code>
				with a resource in the HTTP POST body. In FHIR DSTU2, validate has been changed to use the
				<a href="#extended_operations">extended operation</a> mechanism. It now uses a URL
				resembling <code>http://example.com/Patient/$validate</code> and takes a
				Parameters resource as input in the method body.<br/><br/>
				The mechanism described below may be used for both DSTU1 and DSTU2+ servers, and HAPI
				will automatically use the correct form depending on what FHIR version the
				server is configured to use.
			</p>
			<p>
				Validate methods must be annotated with the
				<a href="./apidocs/ca/uhn/fhir/rest/annotation/Validate.html">@Validate</a>
				annotation, and have a parameter annotated with the
				<a href="./apidocs/ca/uhn/fhir/rest/annotation/ResourceParam.html">@ResourceParam</a>
				annotation. This parameter contains the resource instance to be created.
			</p>
			<p>
				Validate methods may optionally also have a parameter
				oftype IdDt annotated with the
				<a href="./apidocs/ca/uhn/fhir/rest/annotation/IdParam.html">@IdParam</a>
				annotation. This parameter contains the resource ID (see the
				<a href="http://hl7.org/implement/standards/fhir/http.html#validation">FHIR specification</a>
				for details on how this is used)
			</p>
			<p>
				Validate methods must return normally if the resource validates successfully,
				or throw an
				<a href="./apidocs/ca/uhn/fhir/rest/server/exceptions/UnprocessableEntityException.html">UnprocessableEntityException</a>
				or
				<a href="./apidocs/ca/uhn/fhir/rest/server/exceptions/InvalidRequestException.html">InvalidRequestException</a>
				if the validation fails.
			</p>
			<p>
				Validate methods must return either:
			</p>
			<ul>
				<li>
					<b>void</b>
					- The method should throw an exception for a validation failure, or return normally.
				</li>
				<li>
					An object of type
					<a href="./apidocs/ca/uhn/fhir/rest/api/MethodOutcome.html">MethodOutcome</a>
					. The
					MethodOutcome may optionally be populated with an OperationOutcome resource, which
					will be returned to the client if it exists.
				</li>
			</ul>
			<p>
				The following snippet shows how to define a server validate method:
			</p>

			<macro name="snippet">
				<param name="id" value="validate" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>

			<p>
				In the example above, only the <code>@ResourceParam</code> parameter is technically required, but
				in DSTU2 you are encouraged to also add the following parameters:
			</p>
			<ul>
				<li><b>@Validate.Mode ValidationModeEnum mode</b> - This is the validation mode (see the FHIR specification for information on this)</li>
				<li><b>@Validate.Profile String profile</b> - This is the profile to validate against (see the FHIR specification for more information on this)</li>
			</ul>

			<p>
				Example URL to invoke this method (this would be invoked using an HTTP POST,
				with a Parameters resource in the POST body):
				<br />
				<code>http://fhir.example.com/Patient/$validate</code>
			</p>

			<a name="system_conformance" />
		</section>

		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->

		<section name="System Level - Conformance">

			<p>
				FHIR defines that a FHIR Server must be able to export a conformance statement,
				which is an instance of the
				<a href="http://hl7.org/implement/standards/fhir/conformance.html">Conformance</a>
				resource describing the server itself.
			</p>

			<p>
				The HAPI FHIR RESTful server will automatically export such
				a conformance statement. See the
				<a href="./doc_rest_server.html">RESTful Server</a>
				documentation for more information.
			</p>

			<p>
				If you wish to override this default behaviour by creating
				your own metadata provider, you simply need to define a class
				with a method annotated using the
				<a href="./apidocs/ca/uhn/fhir/rest/annotation/Metadata.html">@Metadata</a>
				annotation.
			</p>
			<macro name="snippet">
				<param name="id" value="metadataProvider" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>

			<p>
				To create a Client which can retrieve a Server's conformance
				statement is simple. First, define your Client Interface, using
				the @Metadata annotation:
			</p>
			<macro name="snippet">
				<param name="id" value="metadataClient" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>

			<p>
				Then use the standard
				<a href="doc_rest_client.html">RESTful Client</a>
				mechanism for instantiating
				a client:
			</p>
			<macro name="snippet">
				<param name="id" value="metadataClientUsage" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>

			<a name="system_transaction" />
		</section>

		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->

		<section name="System Level - Transaction">

			<p>
				The
				<a href="http://hl7.org/implement/standards/fhir/http.html#transaction">transaction</a>
				action is among the most challenging parts of the FHIR specification to implement. It allows the
				user to submit a bundle containing a number of resources to be created/updated/deleted as a single
				atomic transaction.
			</p>

			<p>
				HAPI provides a skeleton for implementing this action, although most of the effort
				will depend on the underlying implementation. The following example shows
				how to define a <i>transaction</i> method.
			</p>
			<macro name="snippet">
				<param name="id" value="transaction" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>

			<p>
				Transaction methods require one parameter annotated with @TransactionParam, and that
				parameter may be of type List&lt;IResource&gt; or Bundle.
			</p>

			<p>
				In terms of actually implementing the method, unfortunately there is only so much help
				HAPI will give you. One might expect HAPI to automatically delegate the individual
				operations in the transaction to other methods on the server but at this point it
				does not do that. There is a lot that transaction needs to handle
				(making everything atomic, replacing placeholder IDs across multiple resources
				which may even be circular, handling operations in the right order) and
				so far we have not found a way for the framework to do this in a generic way.
			</p>
			<p>
				What it comes down to is the fact that transaction is a tricky thing to implement.
				For what it's worth, you could look at our JPA module's "transaction" method in
				<a href="https://github.com/jamesagnew/hapi-fhir/blob/master/hapi-fhir-jpaserver-base/src/main/java/ca/uhn/fhir/jpa/dao/dstu3/FhirSystemDaoDstu3.java">our source repository</a>
				to see how we implemented transaction in the JPA server.
			</p>

			<p>
				Example URL to invoke this method:
				<br />
				<code>POST http://fhir.example.com/</code><br/>
				<i>(note that the content of this POST will be a bundle)</i>
			</p>


			<a name="system_search" />
		</section>

		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->

		<section name="System Level - Search">

			<p>
				Not yet implemented - Get in touch if you would like to help!
			</p>

			<a name="history" />
		</section>

		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->

		<section name="History (Instance, Type, Server)">

			<p>
				The
				<a href="http://hl7.org/implement/standards/fhir/http.html#history">
					<b>history</b>
				</a>
				operation retrieves a historical collection of all versions of a single resource
				<i>(instance history)</i>
				, all resources of a given type
				<i>(type history)</i>
				,
				or all resources of any type on a server
				<i>(server history)</i>
				.
			</p>
			<p>
				History methods must be annotated with the
				<a href="./apidocs/ca/uhn/fhir/rest/annotation/History.html">@History</a>
				annotation, and will have additional requirements depending on the kind
				of history method intended:
			</p>
			<ul>
				<li>
					For an
					<b>Instance History</b>
					method, the method must have a parameter
					annotated with the
					<a href="./apidocs/ca/uhn/fhir/rest/annotation/IdParam.html">@IdParam</a>
					annotation, indicating the ID of the resource for which to return history.
					<ul>
						<li>
							For a server
							implementation, the method must either be defined in a
							<a href="./doc_rest_server.html#resource_providers">resource provider</a>
							or have a
							<code>type()</code>
							value in the @History annotation if it is
							defined in a
							<a href="./doc_rest_server.html#plain_providers">plain provider</a>
							.
						</li>
					</ul>
				</li>
				<li>
					For a
					<b>Type History</b>
					method, the method must not have any @IdParam parameter.
					<ul>
						<li>
							For a server
							implementation, the method must either be defined in a
							<a href="./doc_rest_server.html#resource_providers">resource provider</a>
							or have a
							<code>type()</code>
							value in the @History annotation if it is
							defined in a
							<a href="./doc_rest_server.html#plain_providers">plain provider</a>
							.
						</li>
					</ul>
				</li>
				<li>
					For a
					<b>Server History</b>
					method, the method must not have any @IdParam parameter, and
					must not have a
					<code>type()</code>
					value specified in
					the @History annotation.
					<ul>
						<li>
							In a server implementation, the method must
							be defined in a
							<a href="./doc_rest_server.html#plain_providers">plain provider</a>
							.
						</li>
					</ul>
				</li>
			</ul>
			<p>
				The following snippet shows how to define a history method on a server. Note that
				the following parameters are both optional, but may be useful in
				implementing the history operation:
			</p>
			<u>
				<li>
					The <code>@Since</code> method argument implements the <code>_since</code>
					parameter and should be of type <code>DateTimeDt</code> or <code>DateTimeType</code>
				</li>
				<li>
					The <code>@At</code> method argument implements the <code>_at</code>
					parameter and may be of type
					<code>DateRangeParam</code>,
					<code>DateTimeDt</code> or <code>DateTimeType</code>
				</li>
			</u>

			<macro name="snippet">
				<param name="id" value="history" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>

			<p>
				The following snippet shows how to define various history methods in a client.
			</p>

			<macro name="snippet">
				<param name="id" value="historyClient" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>

			<a name="exceptions" />
		</section>


		<section name="Instance Level - Patch">

			<p>
				HAPI FHIR includes basic support for the
				<a href="http://hl7.org/implement/standards/fhir/http.html#patch">
					<b>patch</b>
				</a>
				operation. This support allows you to perform patches, but does not
				include logic to actually implement resource patching in the server
				framework (note that the JPA server does include a patch implementation).
			</p>
			<p>
				The following snippet shows how to define a patch method on a server:
			</p>

			<macro name="snippet">
				<param name="id" value="patch" />
				<param name="file" value="examples/src/main/java/example/PatchExamples.java" />
			</macro>

		</section>


		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->

		<section name="Exceptions">

			<p>
				When implementing a server operation, there are a number of failure conditions
				specified. For example, an
				<a href="#instance_read">Instance Read</a>
				request might specify an unknown
				resource ID, or a
				<a href="#type_create">Type Create</a>
				request might contain an
				invalid resource which can not be created.
			</p>
			<p>
				In these cases, an appropriate exception should be thrown. The HAPI RESTful
				API includes a set of exceptions extending
				<a href="./apidocs/ca/uhn/fhir/rest/server/exceptions/BaseServerResponseException.html">BaseServerResponseException</a>
				which represent specific HTTP failure codes.
			</p>
			<p>
				See the
				<a href="./apidocs/ca/uhn/fhir/rest/server/exceptions/package-summary.html">Exceptions List</a>
				for a complete list of these exceptions. Note that these exceptions are all
				<b>unchecked</b>
				exceptions, so they do not need to ne explicitly declared in the method
				signature.
			</p>

			<a name="tags" />
		</section>

		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->

		<section name="Tags">

			<p>
				FHIR RESTful servers may support a feature known as tagging. Tags are a set of
				named flags called "terms" (with an optional accompanying human friendly name
				called a "label",
				and an optional namespace called a "scheme").
			</p>
			<p>
				Tags have very specific semantics, which may not be
				obvious simply by using the HAPI API. It is important to review the specification
				pages
				<a href="http://hl7.org/implement/standards/fhir/http.html#tags">here</a>
				and
				<a href="http://hl7.org/implement/standards/fhir/extras.html#tags">here</a>
				before attempting to implement tagging in your own applications.
			</p>

			<subsection name="Accessing Tags in a Read / VRead / Search Method">

				<p>
					Tags are stored within a resource object, in the
					<a href="./apidocs/ca/uhn/fhir/model/api/IResource.html#getResourceMetadata()">IResource.html#getResourceMetadata()</a>
					map, under the key
					<a href="./apidocs/ca/uhn/fhir/model/api/ResourceMetadataKeyEnum.html#TAG_LIST">TAG_LIST</a>.
				</p>

				<p>
					In a server implementation, you may populate your tags into the
					returned resource(s) and HAPI will automatically place these tags into
					the response headers (for read/vread) or the bundle category tags (for search).
					The following example illustrates how to return tags from a server method. This
					example shows how to supply tags in a read method, but the same approach applies
					to vread and search operations as well.
				</p>

				<macro name="snippet">
					<param name="id" value="readTags" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

				<p>
					In a client operation, you simply call the read/vread/search method as you
					normally would (as described above), and if any tags have been returned
					by the server, these may be accessed from the resource metadata.
				</p>

				<macro name="snippet">
					<param name="id" value="clientReadTags" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

			</subsection>

			<subsection name="Setting Tags in a Create/Update Method">

				<p>
					Within a <a href="#type_create">Type Create</a>
					or <a href="#instance_update">Instance Update</a> method, it is
					possible for the client to specify a set of tags to be stored
					along with the saved resource instance.
				</p>
				<p>
					Note that FHIR specifies that in an update method, any tags supplied
					by the client are copied to the newly saved version, as well as any
					tags the existing version had.
				</p>

				<p>
					To work with tags in a create/update method, the pattern used in the
					read examples above is simply revered. In a server, the resource which
					is passed in will be populated with any tags that the client supplied:
				</p>

				<macro name="snippet">
					<param name="id" value="createTags" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

			</subsection>

			<subsection name="More tag methods">

				<p>
					FHIR also provides a number of operations to interact directly
					with tags. These methods may be used to retrieve lists of tags
					that are available on the server, or to add or remove tags from
					resources without interacting directly with those resources.
				</p>

				<p>
					On a server these methods may be placed in a plain provider, or in a resource
					provider in the case of resource type specific methods.
				</p>
				<macro name="snippet">
					<param name="id" value="tagMethodProvider" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>

				<p>
					On a client, the methods are defined in the exact same way, except that
					there is no method body in the client interface.
				</p>

			</subsection>

		</section>

		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->

		<section name="_summary and _elements">

			The <code>_summary</code> and <code>_elements</code> parameters are
			automatically handled by the server, so no coding is required to make this
			work. If you wish to add parameters to manually handle these fields however,
			the following example shows how to access these.

			<macro name="snippet">
				<param name="id" value="summaryAndElements" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>


			<a name="compartments" />
		</section>

		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->
		<!-- ****************************************************************** -->

		<section name="Compartments">

			<p>
				FHIR defines a mechanism for logically grouping
				resources together called <a href="http://www.hl7.org/implement/standards/fhir/extras.html#compartment">compartments</a>.
			</p>
			<p>
				To define a search by compartment, you simply need to add the <code>compartmentName</code> attribute
				to the <code>@Search</code> annotation, and add an <code>@IdParam</code> parameter.
			</p>
			<p>
				The following example shows a search method in a resource provider which returns
				a compartment. Note that you may also add <code>@RequiredParam</code> and
				<code>@OptionalParam</code> parameters to your compartment search method.
			</p>
			<macro name="snippet">
				<param name="id" value="searchCompartment" />
				<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
			</macro>

			<p>
				Example URL to invoke this method:
				<br />
				<code>http://fhir.example.com/Patient/123/Condition</code>
			</p>

			<a name="extended_operations"/>
		</section>

		<section name="Extended Operations">

			<p>
				FHIR extended operations are a special type of RPC-style invocation you
				can perform against a FHIR server, type, or resource instance. These invocations
				take a
				<a href="./apidocs-dstu2/ca/uhn/fhir/model/dstu2/resource/Parameters.html">Parameters</a>
				resource as input, and return either another Parameters resource or a different resource type.
			</p>

			<p>
				To define an operation, a method should be placed in a
				<a href="./doc_rest_server.html#resource_providers">Resource Provider</a>
				class if the operation works against a resource type (e.g. <code>Patient</code>)
				or a resource instance (e.g. <code>Patient/123</code>), or on a
				Plain Provider
				if the operation works against the server (i.e. it is global and not resource specific).
			</p>

			<subsection name="Type-Specific Operations">

				<p>
					To implement a type-specific operation,
					the method should be annotated with the
					<code>@Operation</code> tag, and should have an
					<code>@OperationParam</code> tag for each named parameter that
					the input Parameters resource may be populated with. The following
					example shows how to implement the <code>Patient/$everything</code>
					method, defined in the FHIR specification.
				</p>
				<macro name="snippet">
					<param name="id" value="patientTypeOperation" />
					<param name="file"
						value="examples/src/main/java/example/ServerOperations.java" />
				</macro>

				<p>
					Example URL to invoke this operation (HTTP request body is Parameters resource):
					<br />
					<code>POST http://fhir.example.com/Patient/$everything</code>
				</p>

			</subsection>

			<subsection name="Instance-Specific Operations">

				<p>
					To create an instance-specific operation (an operation which takes the
					ID of a specific resource instance as a part of its request URL),
					you can add a parameter annotated with the <code>@IdParam</code> annotation,
					of type <code>IdDt</code>. The following example show how to implement the
					<code>Patient/[id]/$everything</code> operation.
				</p>
				<macro name="snippet">
					<param name="id" value="patientInstanceOperation" />
					<param name="file"
						value="examples/src/main/java/example/ServerOperations.java" />
				</macro>

				<p>
					Example URL to invoke this operation (HTTP request body is Parameters resource):
					<br />
					<code>http://fhir.example.com/Patient/123/$everything</code>
				</p>

			</subsection>

			<subsection name="Using Search Parameter Types">

				<p>
					FHIR allows operation parameters to be of a
					<a href="http://hl7.org/fhir/search.html#ptypes">Search parameter type</a>
					(e.g. token) instead of a FHIR datatype (e.g. Coding).
				</p>
				<p>
					To use a search parameter type, any of the search parameter
					types listed in
					<a href="./doc_rest_operations.html#Type_Level_-_Search">Search</a>
					may be used. For example, the following is a simple operation method declaration
					using search parameters:
				</p>
				<macro name="snippet">
					<param name="id" value="searchParamBasic" />
					<param name="file"
						value="examples/src/main/java/example/ServerOperations.java" />
				</macro>

				<p>
					Example URL to invoke this operation (HTTP request body is Parameters resource):
					<br />
					<code>http://fhir.example.com/$find-matches?date=2011-01-02&amp;code=http://system|value</code>
				</p>

				<p>
					It is also fine to use collection types for search parameter types
					if you want to be able to accept multiple values. For example,
					a <code>List&lt;TokenParam&gt;</code> could be used if you want
					to allow multiple repetitions of a given token parameter (this is
					analogous to the "AND" semantics in a search).
					A <code>TokenOrListParam</code> could be used if you want to allow
					multiple values within a single repetition, separated by comma (this
					is analogous to "OR" semantics in a search).
				</p>
				<p>For example:</p>
				<macro name="snippet">
					<param name="id" value="searchParamAdvanced" />
					<param name="file"
						value="examples/src/main/java/example/ServerOperations.java" />
				</macro>

			</subsection>

			<subsection name="Server Operations">

				<p>
					Server operations do not operate on a specific resource type or
					instance, but rather operate globally on the server itself. The following
					example show how to implement the
					<code>$closure</code> operation. Note that the <code>concept</code> parameter
					in the example has a cardinality of <code>0..*</code> according to the
					FHIR specification, so a <code>List&lt;Coding&gt;</code>
					is used as the parameter type.
				</p>
				<macro name="snippet">
					<param name="id" value="serverOperation" />
					<param name="file"
						value="examples/src/main/java/example/ServerOperations.java" />
				</macro>

				<p>
					Example URL to invoke this operation (HTTP request body is Parameters resource):
					<br />
					<code>http://fhir.example.com/$closure</code>
				</p>

			</subsection>

			<subsection name="Returning Multiple OUT Parameters">

				<p>
					In all of the Extended Operation examples above, the return
					type specified for the operation is a single Resource instance. This is
					a common pattern in FHIR defined operations. However, it is also
					possible for an extended operation to be defined with multiple
					and/or repeating OUT parameters. In this case, you can return
					a <code>Parameters</code> resource directly.
				</p>

			</subsection>

			<subsection name="Idempotent Operations / Handling HTTP Get">

				<p>
					The FHIR specification notes that if an operation is
					<a href="http://en.wikipedia.org/wiki/Idempotence">idempotent</a>
					(which means roughly that it does not modity any data or state
					on the server) then it may be invoked with an HTTP <code>GET</code>
					instead of an HTTP <code>POST</code>.
				</p>
				<p>
					If you are implementing an operation which is idempotent,
					you should mark your operation with
					<code>idempotent=true</code>,
					as shown in some of the examples above. The default value
					for this flag is <code>false</code>, meaning that operations
					will not support <code>HTTP GET</code> by default.
				</p>
				<p>
					Note that the HTTP GET form is only supported if the operation
					has only primitive parameters (no complex parameters or resource parameters).
					If a client makes a request containing a complex parameter, the
					server will respond with an <code>HTTP 405 Method Not Supported</code>.
				</p>
			</subsection>

			<subsection name="Manually handing Request/Response">

				<p>
					For some operations you may wish to bypass the HAPI FHIR
					standard request parsing and/or response generation. In this
					case you may use the <code>manualRequest()</code> and
					<code>manualResponse()</code> attributes on the <code>@Operation</code>
					annotation.
				</p>
				<p>
					The following example shows an operation that parses the
					request and generates a response (by echoing back the request).
				</p>
				<macro name="snippet">
					<param name="id" value="manualInputAndOutput" />
					<param name="file"
							 value="examples/src/main/java/example/ServerOperations.java" />
				</macro>


			</subsection>

		</section>

	</body>

</document>
