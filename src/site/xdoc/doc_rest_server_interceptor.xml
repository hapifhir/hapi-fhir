<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>Server Interceptors</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>

	<body>

		<!-- The body of the document contains a number of sections -->
		<section name="Server Interceptors">

			<p>
				The RESTful server provides a powerful mechanism for adding cross-cutting behaviour
				(e.g. requests, such as authnorization, auditing, fancy output, logging, etc.)
				to each incoming request that it processes. This mechanism consists of defining one or
				more <b>interceptors</b> that will be invoked at defined points in the processing of 
				each incoming request.
			</p>

			<img src="svg/restful-server-interceptors.svg" alt="Interceptors"/>

			<p>
				Interceptors will intercept the incoming request, and can take action such as 
				logging or auditing it, or examining/injecting headers. They can optionally choose 
				to handle the request directly and the cancel any subsequent processing (in other words,
				the interceptor can choose to supply a response to the client, and can then signal
				to the server that it does not need to do so). 
			</p>
			<p>
				Interceptors
				may also be notified of responses prior to those responses being served to a client, 
				and may audit or even cancel the response. The diagram on the right shows the 
				lifecycle of a normal (non failing) request which is subject to an interceptor.  
			</p>
			
			<p>
				Interceptors must implement the 
				<a href="./apidocs/ca/uhn/fhir/rest/server/interceptor/IServerInterceptor.html">IServerInterceptor</a>
				interface (or extend the convenience 
				<a href="./apidocs/ca/uhn/fhir/rest/server/interceptor/InterceptorAdapter.html">InterceptorAdapter</a> 
				class provided). The RESTful server will normally invoke the interceptor at several 
				points in the execution of the client request. 
			</p>
			
			<ul>
				<li>
					Before any processing at all is performed on the request,
					<b>incomingRequestPreProcessed</b> will be invoked. This can be useful
					if you wish to handle some requests completely outside of HAPI's processing
					mechanism. 
					<ul>
						<li>
							If this method returns <code>true</code>, processing continues to the 
							next interceptor, and ultimately to the next phase of processing.
						</li>
						<li>
							If this method returns <code>false</code>, processing stops immediately.
							This is useful if the interceptor wishes to supply its own response
							by directly calling methods on the <code>HttpServletResponse</code>
						</li>
						<li>
							If this method throws any subclass of
							<a href="./apidocs/ca/uhn/fhir/rest/server/exceptions/BaseServerResponseException.html">BaseServerResponseException</a>,
							processing is stopped immedicately and the corresponding status is returned to the client.
							This is useful if an interceptor wishes to abort the request (e.g. because
							it did not detect valid credentials)
						</li>
					</ul>
				</li>
				<li>
					Once the request is classified (meaning that the URL and request headers are 
					examined to determine exactly what kind of request is being made),
					<b>incomingRequestPostProcessed</b> will be invoked. This method has
					an additional parameter, the
					<a href="./apidocs/ca/uhn/fhir/rest/method/RequestDetails.html">RequestDetails</a>
					object which contains details about what operation is about to be
					called, and what request parameters were receievd with that request.
					<ul>
						<li>
							If this method returns <code>true</code>, processing continues to the 
							next interceptor, and ultimately to the next phase of processing.
						</li>
						<li>
							If this method returns <code>false</code>, processing stops immediately.
							This is useful if the interceptor wishes to supply its own response
							by directly calling methods on the <code>HttpServletResponse</code>
						</li>
						<li>
							If this method throws any subclass of
							<a href="./apidocs/ca/uhn/fhir/rest/server/exceptions/BaseServerResponseException.html">BaseServerResponseException</a>,
							processing is stopped immedicately and the corresponding status is returned to the client.
							This is useful if an interceptor wishes to abort the request (e.g. because
							it did not detect valid credentials)
						</li>
					</ul>
				</li>
				<li>
					Once the request is being handled,
					<b>incomingRequestPreHandled</b> will be invoked. This method is useful in that
					it provides details about the FHIR operation being invoked (e.g. is this a "read" or a "create"? what
					is the resource type and ID of the resource being accessed, etc.). This method can be 
					useful for adding finer grained access controls. Note that <code>incomingRequestPreHandled</code>
					is not able to directly supply a response, but it may throw a
					<a href="./apidocs/ca/uhn/fhir/rest/server/exceptions/BaseServerResponseException.html">BaseServerResponseException</a>
					to abort processing.
				</li>
				<li>
					After the operation is handled (by invoking the corresponding ResourceProvider or PlainProvider method),
					but before the actual response is returned to the client,
					the <b>outgoingResponse</b> method is invoked.
					This method also has details about the request in its parameters, but also
					receives a copy of the response that is about to be returned. Note that
					there are three implementations of <b>outgoingResponse</b>: The server
					will invoke the one which corresponds to the response type
					of the operation being invoked (resource, bundle, etc.)
				</li>
			</ul>

			<br clear="all"/>
			<subsection name="Exception Handling">
			
				<img src="svg/restful-server-interceptors-exception.svg" alt="Interceptors" align="right"/>
				
				<p>
					In the event of an exception being thrown within the server, the interceptor
					method 
					<code><a href="./apidocs/ca/uhn/fhir/rest/server/interceptor/IServerInterceptor.html#handleException(ca.uhn.fhir.rest.method.RequestDetails,%20java.lang.Throwable,%20javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse)">handleException</a></code>
					will be called. This applies both to HAPI-FHIR defined exceptions thrown within resource provider methods 
					you have created as well as unexpected exceptions such as NullPointerException thrown 
					at any point in the handling chain.
				</p>
				<p>
					In general, you will want to return <code>true</code> from the <code>handleException</code>
					method, which means that processing continues normally (RestfulServer will return an 
					HTTP 4xx or 5xx response automatically depending on the specific exception which was thrown). 
				</p>
				<p>
					However, you may override the server's built-in exception handling by returning
					<code>false</code>. In this case, you must provide your own response by
					interacting with the <code>HttpServletResponse</code> object which is
					passed in.
				</p>
			</subsection>
			
			<br clear="all"/>
			<subsection name="Registering Interceptors">
			
				<p>
					To register an interceptor to the server, simply call
					either <code>registerInterceptor</code> or <code>setInterceptors</code>
					on your RestfulServer instance.					
				</p>
				<p>
					Note that order is important: The server will invoke 
					<code>incomingRequestPreProcessed</code> and <code>incomingRequestPostProcessed</code>
					in the same order that they are registered to the server. The server will
					invoke <code>outgoingResponse</code> in the <b>reverse</b> order to the
					order in which the interceptors were registered. This means that interceptors
					can be thought of as "wrapping" the request.					
				</p>
				
			</subsection>
			
		</section>

		<section name="Built In Interceptors">
		
			<p>
				HAPI also provides built-in interceptors which may be useful. Links to the code for each interceptor
				is also provided, to give examples of how interceptors are written.
			</p>
			
			<a name="Logging"/>
			<subsection name="Logging Server Requests">
			
				<p>
					The 
					<a href="./apidocs/ca/uhn/fhir/rest/server/interceptor/LoggingInterceptor.html">LoggingInterceptor</a>
					(<a href="./xref/ca/uhn/fhir/rest/server/interceptor/LoggingInterceptor.html">code</a>)
					can be used to generate a new log line (via SLF4j) for each incoming request. LoggingInterceptor
					provides a flexible message format that can be used to provide a customized level
					of detail about each incoming request.
				</p>
				
				<p>
					The following example shows how to register a logging interceptor within
					a FHIR RESTful server.
				</p>					
				<macro name="snippet">
					<param name="id" value="loggingInterceptor" />
					<param name="file" value="examples/src/main/java/example/ServletExamples.java" />
				</macro>
				
				<p>
					This interceptor will then produce output similar to the following:
				</p>
				<source><![CDATA[2014-09-04 02:37:30.030 Source[127.0.0.1] Operation[vread Patient/1667/_history/1] UA[Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36] Params[?_format=json]
2014-09-04 03:30:00.443 Source[127.0.0.1] Operation[search-type Organization] UA[Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)] Params[]]]></source>
				
			</subsection>
			
			<a name="ExceptionHandlingInterceptor"/>
			<subsection name="Exception Handling">
			
				<p>
					The 
					<a href="./apidocs/ca/uhn/fhir/rest/server/interceptor/ExceptionHandlingInterceptor.html">ExceptionHandlingInterceptor</a>
					(<a href="./xref/ca/uhn/fhir/rest/server/interceptor/ExceptionHandlingInterceptor.html">code</a>)
					can be used to customize what is returned to the client and what is logged when the server throws an
					exception for any reason (including routine things like UnprocessableEntityExceptions thrown as a matter of
					normal processing in a create method, but also including unexpected NullPointerExceptions thrown by client code).
				</p>
				
				<p>
					The following example shows how to register an exception handling interceptor within
					a FHIR RESTful server.
				</p>					
				<macro name="snippet">
					<param name="id" value="exceptionInterceptor" />
					<param name="file" value="examples/src/main/java/example/ServletExamples.java" />
				</macro>
				
			</subsection>

			<subsection name="Response Syntax Highlighting">
			
				<p>
					The 
					<a href="./apidocs/ca/uhn/fhir/rest/server/interceptor/ResponseHighlighterInterceptor.html">ResponseHighlighterInterceptor</a>
					(<a href="./xref/ca/uhn/fhir/rest/server/interceptor/ResponseHighlighterInterceptor.html">code</a>)
					detects when a request is coming from a browser and returns HTML with syntax highlighted XML/JSON instead
					of just the raw text. In other words, if a user uses a browser to request "http://foo/Patient/1" by typing
					this address into their URL bar, they will get nice formatted HTML back with a human readable version
					of the content. This is helpful for testers.
				</p>
<p>
                                       To see an example of how this looks, see our demo server using the following example
                                       query:
                                       <a href="http://fhirtest.uhn.ca/baseDstu2/Patient/">http://fhirtest.uhn.ca/baseDstu2/Patient</a>
</p>				
				<p>
					The following example shows how to register this interceptor within
					a FHIR RESTful server.
				</p>					
				<macro name="snippet">
					<param name="id" value="responseHighlighterInterceptor" />
					<param name="file" value="examples/src/main/java/example/ServletExamples.java" />
				</macro>
				
			</subsection>

			<subsection name="Request/Response Validation">
			
				<p>
					The 
					<a href="./apidocs/ca/uhn/fhir/rest/server/interceptor/RequestValidatingInterceptor.html">RequestValidatingInterceptor</a>
					and
					<a href="./apidocs/ca/uhn/fhir/rest/server/interceptor/ResponseValidatingInterceptor.html">ResponseValidatingInterceptor</a>
					can be used to perform validation of resources on their way into and out of the server respectively.
				</p>
				<p>
					The RequestValidatingInterceptor looks at resources coming into the server (e.g. for create, 
					update, $operations, transactions, etc.) and validates them. The ResponseValidatingInterceptor
					looks at resources being returned by the server (e.g. for read, search, $operations, etc.) and
					validates them.
				</p>
				<p>
					These interceptors can be configured to add headers to the response, fail the response 
					(returning an HTTP 422 and throwing an exception in the process), or to add to the
					OperationOutcome returned by the server.
				</p>
				<p>
					See the <a href="./doc_validation.html">Validation Page</a> for information on
					available 
					<a href="./apidocs/ca/uhn/fhir/validation/IValidatorModule.html">IValidatorModule</a> 
					validation modules. Any of the <b>Resource Validators</b>
					listed on that page can be enabled in these interceptors (note that the <b>Parser Validators</b>
					can not).					
				</p>
				<p>
					The following example shows how to register this interceptor within
					a FHIR RESTful server.
				</p>					
				<macro name="snippet">
					<param name="id" value="validatingInterceptor" />
					<param name="file" value="examples/src/main/java/example/ServletExamples.java" />
				</macro>
				
			</subsection>

			<subsection name="Rejecting Unsupported HTTP Verbs">
			
				<p>
					Some security audit tools require that servers return an HTTP 405 if
					an unsupported HTTP verb is received (e.g. TRACE). The 
					<a href="./apidocs/ca/uhn/fhir/rest/server/interceptor/BanUnsupprtedHttpMethodsInterceptor.html">BanUnsupprtedHttpMethodsInterceptor</a>
					(<a href="./xref/ca/uhn/fhir/rest/server/interceptor/BanUnsupprtedHttpMethodsInterceptor.html">code</a>)
					can be used to accomplish this.
				</p>
				
			</subsection>

		</section>
				
		<section name="Creating Interceptors">
		
			<p>
				Creating your own interceptors is easy. HAPI-FHIR provides a class called
				<code>InterceptorAdapter</code> which you can extend and then override any
				methods you wish. The following example shows a simple request counter.
			</p>
			<macro name="snippet">
				<param name="id" value="interceptor" />
				<param name="file" value="examples/src/main/java/example/RequestCounterInterceptor.java" />
			</macro>
		
			<p>
				The following example shows an exception handling interceptor which
				overrides the built-in exception handling by providing a custom response.
			</p>
			<macro name="snippet">
				<param name="id" value="interceptor" />
				<param name="file" value="examples/src/main/java/example/RequestExceptionInterceptor.java" />
			</macro>
			
		</section>

		<section name="JPA Server Interceptors">
			
			<p>
				The HAPI <a href="./doc_jpa.html">JPA Server</a> is an added layer on top of the HAPI
				REST server framework. If you are using it, you may wish to also register interceptors
				against the <a href="./apidocs-jpaserver/ca/uhn/fhir/jpa/dao/DaoConfig.html">DaoConfig</a>
				bean that you create using Spring configuration. 
			</p>
		
			<p>
				By registering an interceptor against the DaoConfig, the server will invoke 
				interceptor methods for operations such as <b>create</b>, <b>update</b>, etc even
				when these operations are found nested within a transaction. This is useful
				if you are using interceptors to make access control decisions because
				it avoids clients using transactions as a means of bypassing these controls.
			</p>
			
			<p>
				You may also choose to create interceptors which implement the 
				more specialized
				<a href="./apidocs-jpaserver/ca/uhn/fhir/jpa/dao/IJpaServerInterceptor.html">IJpaServerInterceptor</a>
				interface, as this interceptor adds additional methods which are called during the JPA
				lifecycle. 
			</p>
		
		</section>
		
	</body>

</document>
