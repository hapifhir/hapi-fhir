<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>Server Security</title>
	</properties>

	<body>

		<!-- The body of the document contains a number of sections -->
		<section name="Server Security">

			<p>
				Security is a complex topic which goes far beyond the scope of HAPI FHIR.
				HAPI does provide mechanisms which can be used to implement security in
				your server however.
			</p>
			
			<p>
				Because HAPI FHIR's REST server is based on the Servlet API, you may use any
				security mechanism which works in that environment. Some serlvet containers
				may provide security layers you can plug into. The rest of this page
				does not explore that method, but rather looks at HAPI FHIR hooks that can
				be used to implement FHIR specific security.
			</p>
			
			<subsection name="Authentication vs Authorization">
			
				<p>
					Background reading: <a href="https://en.wikipedia.org/wiki/Authentication">Wikipedia - Authentication</a>
				</p>
				<p>
					Server security is divided into two topics:
				</p>
				<ul>
					<li>
						<b>Authentication (AuthN):</b> Is verifying that the user is who they say they 
						are. This is typically accomplished by testing a username/password in the request,
						or by checking a "bearer token" in the request.
					</li>
					<li>
						<b>Authorization (AuthZ):</b> Is verifying that the user is allowed to perform 
						the given action. For example, in a FHIR application you might use AuthN to test that
						the user making a request to the FHIR server is allowed to access the server, but
						that test might determine that the requesting user is not permitted to perform
						write operations and therefore block a FHIR <code>create</code> operation. This is
						AuthN and AuthZ in action.
					</li>
				</ul>
				
			</subsection>
			
		</section>
		
		<section name="Authentication Interceptors">
		
			<p>
				The <a href="./doc_rest_server_interceptor.html">Server Interceptor</a>
				framework can provide an easy way to test for credentials. The following
				example shows a simple interceptor which tests for HTTP Basic Auth.
			</p>
			
			<macro name="snippet">
				<param name="id" value="basicAuthInterceptor" />
				<param name="file" value="examples/src/main/java/example/SecurityInterceptors.java" />
			</macro>

			<subsection name="HTTP Basic Auth">
			
				<p>
					Note that if you are implementing HTTP Basic Auth, you may want to 
					return a <code>WWW-Authenticate</code> header with the response.
					The following snippet shows how to add such a header with a custom
					realm:
				</p>
				<macro name="snippet">
					<param name="id" value="basicAuthInterceptorRealm" />
					<param name="file" value="examples/src/main/java/example/SecurityInterceptors.java" />
				</macro>
				
			</subsection>
			
		</section>
		
		<section name="Authorization Interceptor">
			
			<p>
				HAPI FHIR 1.5 introduced a new interceptor, the
				<a href="./apidocs/ca/uhn/fhir/rest/server/interceptor/auth/AuthorizationInterceptor.html">AuthorizationInterceptor</a>.
			</p>
			<p>
				This interceptor can help with the complicated task of determining whether a user
				has the appropriate permission to perform a given task on a FHIR server. This is
				done by declaring a set of rules that can selectively allow (whitelist) and/or selectively
				block (blacklist) requests.
			</p>

			<p class="doc_info_bubble">
				AuthorizationInterceptor is a new feature in HAPI FHIR, and has not yet
				been heavily tested. Use with caution, and do lots of testing! We welcome
				feedback and suggestions on this feature. In addition, this documentation is 
				not yet complete. More examples and details will be added soon! Please get in
				touch if you'd like to help test, have suggestions, etc.
			</p>
			
			<p>
				The AuthorizationInterceptor works by allowing you to declare 
				permissions based on an individual request coming in. In other
				words, you could have code that examines an incoming request and
				determines that it is being made by a Patient with ID 123. You
				could then declare that the requesting user has access to read and
				write any resource in compartment "Patient/123", which corresponds
				to any Observation, MedicationOrder etc with a subject of 
				"<code>Patient/123</code>". On the other hand, another request
				might be detemrined to belong to an administrator user, and
				could be declared to be allowed to do anything.
			</p>
			
			<p>
				The AuthorizationInterceptor is used by subclassing it and then registering your
				subclass with the <code>RestfulServer</code>. The following example shows a subclassed
				interceptor implementing some basic rules:
			</p>
			
			<macro name="snippet">
				<param name="id" value="patientAndAdmin" />
				<param name="file" value="examples/src/main/java/example/AuthorizationInterceptors.java" />
			</macro>
			
			<subsection name="Using AuthorizationInterceptor in a REST Server">
				
				<p>
					The AuthorizationInterceptor works by examining the client request
					in order to determine whether "write" operations are legal, and looks at
					the response from the server in order to determine whether "read" operations
					are legal.
				</p>

			</subsection>
			
			<subsection name="Authorizing Read Operations">			
					
				<p>
					When authorizing a read operation, the AuthorizationInterceptor 
					always allows client code to execute and generate a response. 
					It then examines the response that would be returned before
					actually returning it to the client, and if rules do not permit
					that data to be shown to the client the interceptor aborts the 
					request.
				</p>

				<p>
					Note that there are performance implications to this mechanism,
					since an unauthorized user can still cause the server to fetch data
					even if they won't get to see it. This mechanism should be comprehensive
					however, since it will prevent clients from using various features
					in FHIR (e.g. <code>_include</code> or <code>_revinclude</code>) to
					"trick" the server into showing them date they shouldn't be allowed to
					see.					
				</p>

				<p>
					See the following diagram for an example of how this works.
				</p>
				
				<img src="./images/hapi_authorizationinterceptor_read_normal.svg" alt="Write Authorization"/>
				
			</subsection>

			<subsection name="Authorizing Write Operations">
				
				<p>
					Write operations (create, update, etc.) are typically authorized
					by the interceptor by examining the parsed URL and making a decision
					about whether to authorize the operation before allowing Resource Provider
					code to proceed. This means that client code will not have a chance to execute
					and create resources that the client does not have permissions to create.   
				</p>
				
				<p>
					See the following diagram for an example of how this works.
				</p>
				
				<img src="./images/hapi_authorizationinterceptor_write_normal.svg" alt="Write Authorization"/>

			</subsection>

			<subsection name="Authorizing Sub-Operations">
			
				<p>
					There are a number of situations where the REST framework doesn't 
					actually know exactly what operation is going to be performed by
					the implementing server code. For example, if your server implements
					a <code>conditional update</code> operation, the server might not know 
					which resource is actually being updated until the server code
					is executed.
				</p>
				<p>
					Because client code is actually determining which resources are
					being modified, the server can not automatically apply security 
					rules against these modifications without being provided hints
					from client code. 
				</p>
				<p> 
					In this type of situation, it is important to manually
					notify the interceptor chain about the "sub-operation" being performed.
					The following snippet shows how to notify interceptors about
					a conditional create.
				</p>

				<macro name="snippet">
					<param name="id" value="conditionalUpdate" />
					<param name="file" value="examples/src/main/java/example/AuthorizationInterceptors.java" />
				</macro>
				
			</subsection>

			<subsection name="Authorizing Multitenant Servers">

				<p>
					The AuthorizationInterceptor has the ability to direct individual
					rules as only applying to a single tenant in a multitenant
					server. The following example shows such a rule.
				</p>
				<macro name="snippet">
					<param name="id" value="authorizeTenantAction" />
					<param name="file" value="examples/src/main/java/example/AuthorizationInterceptors.java" />
				</macro>

			</subsection>
			
		</section>
		
	</body>

</document>
