<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<!-- This content has been migrated -->

	<properties>
		<title>Profiles and Extensions</title>
		<author email="jamesagnew@gmail.com">James Agnew</author>
	</properties>

	<body>

		<section name="Undeclared Extensions">
			
			<p class="doc_info_bubble">
				Note on FHIR Versions: Because of the differences in the way the structures
				work between DSTU2 and DSTU3, we have provided two versions of many of the
				examples on this page. See the <a href="./download.html">download page</a>
				for more information on FHIR versions.
			</p>
			
			<p>
				Extensions are a key part of the FHIR specification, providing a standardized
				way of placing additional data in a resource. 
			</p>

			<p>
				The simplest way to interact with extensions (i.e. to add them to resources you are creating, or
				to read them from resources you are consuming) is to treat them as "undeclared extensions".
				Undeclared extensions can be added to any of the built in FHIR resource types that come with HAPI-FHIR.
			</p>
			
			<p>
				<b>DSTU2</b>
			</p>
			<macro name="snippet">
				<param name="id" value="resourceExtension" />
				<param name="file" value="examples/src/main/java/example/ExtensionsDstu2.java" />
			</macro>

			<p>
				<b>DSTU3</b>
			</p>
			<macro name="snippet">
				<param name="id" value="resourceExtension" />
				<param name="file" value="examples/src/main/java/example/ExtensionsDstu3.java" />
			</macro>
			
			<p>
				Undeclared extensions can also be added to datatypes (composite or primitive).
			</p>

			<p>
				<b>DSTU2</b>
			</p>
			<macro name="snippet">
				<param name="id" value="resourceStringExtension" />
				<param name="file" value="examples/src/main/java/example/ExtensionsDstu2.java" />
			</macro>
			
			<p>
				<b>DSTU3</b>
			</p>
			<macro name="snippet">
				<param name="id" value="resourceStringExtension" />
				<param name="file" value="examples/src/main/java/example/ExtensionsDstu3.java" />
			</macro>

			<subsection name="Sub-Extensions">

				<p>
					Extensions may also have child extensions as their content, instead
					of a datatype. This is done by adding a child undeclared extension to the
					parent extension.
				</p>

				<p>
					<b>DSTU2</b>
				</p>
				<macro name="snippet">
					<param name="id" value="subExtension" />
					<param name="file" value="examples/src/main/java/example/ExtensionsDstu2.java" />
				</macro>
			
				<p>
					<b>DSTU3</b>
				</p>
				<macro name="snippet">
					<param name="id" value="subExtension" />
					<param name="file" value="examples/src/main/java/example/ExtensionsDstu3.java" />
				</macro>

			</subsection>

			<subsection name="Retrieving Extension Values">

				<p>
					HAPI provides a few ways of accessing extension values in resources 
					which are received from other sources (i.e. downloaded by a client).
				</p>

				<p>
					<b>DSTU2</b>
				</p>
				<macro name="snippet">
					<param name="id" value="parseExtension" />
					<param name="file" value="examples/src/main/java/example/ExtensionsDstu2.java" />
				</macro>
			
				<p>
					<b>DSTU3</b>
				</p>
				<macro name="snippet">
					<param name="id" value="parseExtension" />
					<param name="file" value="examples/src/main/java/example/ExtensionsDstu3.java" />
				</macro>

			</subsection>
			
		</section>
		
		<section name="Custom Resource Types">
			
				<p>
					The most elegant way of adding extensions to a resource is through the
					use of custom fields. The following example shows a custom type which
					extends the FHIR Patient resource definition through two extensions.
				</p>
				
				<macro name="snippet">
					<param name="id" value="patientDef" />
					<param name="file" value="examples/src/main/java/example/MyPatient.java" />
				</macro>

				<p>
					Using this custom type is as simple as instantiating the type
					and working with the new fields.
				</p>
				
				<macro name="snippet">
					<param name="id" value="patientUse" />
					<param name="file" value="examples/src/main/java/example/MyPatientUse.java" />
				</macro>
			
				<p>
					This example produces the following output:
				</p>
				
				<source><![CDATA[<Patient xmlns="http://hl7.org/fhir">
   <modifierExtension url="http://example.com/dontuse#importantDates">
      <valueDateTime value="2010-01-02"/>
   </modifierExtension>
   <modifierExtension url="http://example.com/dontuse#importantDates">
      <valueDateTime value="2014-01-26T11:11:11"/>
   </modifierExtension>
   <extension url="http://example.com/dontuse#petname">
      <valueString value="Fido"/>
   </extension>
   <name>
      <family value="Smith"/>
      <given value="John"/>
      <given value="Quincy"/>
      <suffix value="Jr"/>
   </name>
</Patient>]]></source>
			
				<p>
					Parsing messages using your new custom type is equally simple.
					These types can also be used as method return types in clients
					and servers.
				</p>
			
				<macro name="snippet">
					<param name="id" value="patientParse" />
					<param name="file" value="examples/src/main/java/example/MyPatientUse.java" />
				</macro>

			<subsection name="Using Custom Types in a Client">
				
				<p>
					If you are using a client and wish to use a specific custom structure,
					you may simply use the custom structure as you would a build in
					HAPI type.
				</p>
				<macro name="snippet">
					<param name="id" value="customTypeClientSimple" />
					<param name="file" value="examples/src/main/java/example/ExtensionsDstu3.java" />
				</macro>
				
				<p>
					You may also explicitly use custom types in searches and other
					operations which return resources.
				</p>
				<macro name="snippet">
					<param name="id" value="customTypeClientSearch" />
					<param name="file" value="examples/src/main/java/example/ExtensionsDstu3.java" />
				</macro>

				<p>
					You can also explicitly declare a preferred response resource custom
					type. This is useful for some operations that do not otherwise
					declare their resource types in the method signature.
				</p>
				<macro name="snippet">
					<param name="id" value="customTypeClientSearch2" />
					<param name="file" value="examples/src/main/java/example/ExtensionsDstu3.java" />
				</macro>

			</subsection>
			
			<subsection name="Using Multiple Custom Types in a Client">
			
				<p>
					Sometimes you may not know in advance exactly which
					type you will be receiving. For example, there are Patient resources
					which conform to several different profiles on a server and you 
					aren't sure which profile you will get back for a specific read,
					you can declare the "primary" type for a given profile.
				</p>
				<p>
					This is declared at the FhirContext level, and will apply to any 
					clients created from this context (including clients created before
					the default was set).
				</p>
				<macro name="snippet">
					<param name="id" value="customTypeClientDeclared" />
					<param name="file" value="examples/src/main/java/example/ExtensionsDstu3.java" />
				</macro>
				
			</subsection>

			<subsection name="Using Custom Types in a Server">
				
				<p>
					If you are using a client and wish to use a specific custom structure,
					you may simply use the custom structure as you would a build in
					HAPI type.
				</p>
				<macro name="snippet">
					<param name="id" value="customTypeClientSimple" />
					<param name="file" value="examples/src/main/java/example/ExtensionsDstu3.java" />
				</macro>

			</subsection>

			<subsection name="Custom Type Examples: Composite Extensions">
			
				<p>
					The following example shows a resource containing a composite
					extension.
				</p>
			
				<macro name="snippet">
					<param name="id" value="resource" />
					<param name="file" value="examples/src/main/java/example/customtype/CustomCompositeExtension.java" />
				</macro>
			
				<p>
					This could be used to create a resource such as the
					following:
				</p>
				<source><![CDATA[<Patient xmlns="http://hl7.org/fhir">
   <id value="123"/>
   <extension url="http://acme.org/fooParent">
      <extension url="http://acme.org/fooChildA">
         <valueString value="ValueA"/>
      </extension>
      <extension url="http://acme.org/fooChildB">
         <valueString value="ValueB"/>
      </extension>
   </extension>
</Patient>]]></source>
			
			</subsection>
			
		</section>
			
	</body>

</document>
