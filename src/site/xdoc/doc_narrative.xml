<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<!-- This has been migrated -->

	<properties>
		<title>Narrative Generation</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>

	<body>

		<section name="Narrative Generation">
			
			<p>
				HAPI provides a several ways to add 
				<a href="http://hl7.org/implement/standards/fhir/narrative.html">Narrative Text</a>
				to your encoded messages.
			</p>

			<p>
				The simplest way is to simply place the narrative text directly in the resource
				via the 
				<a href="./apidocs/ca/uhn/fhir/model/api/IResource.html#getText()">getText()</a>
				method. 
			</p>

			<macro name="snippet">
				<param name="id" value="simple" />
				<param name="file" value="examples/src/main/java/example/Narrative.java" />
			</macro>

		</section>			

		<section name="Automatic Narrative Generartion">
		
			<p>
				HAPI also comes with a built-in mechanism for automatically generating
				narratives based on your resources.
			</p>
			
			<p>
				<b>Warning: </b> This built-in capability is a work in progress, and does not cover
				every type of resource or even every attribute in any resource. You should test it
				and configure it for your particular use cases.
			</p>
			
			<p>
				HAPI's built-in narrative generation uses the 
				<a href="http://www.thymeleaf.org/">Thymeleaf</a> library
				for templating narrative texts. Thymeleaf provides a simple
				XHTML-based syntax which is easy to use and 
				meshes well with the HAPI-FHIR model objects.
			</p>
			
			<subsection name="A Simple Example">
			
				<p>
					Activating HAPI's built-in narrative generator is as simple
					as calling 
					<a href="./apidocs/ca/uhn/fhir/context/FhirContext.html#setNarrativeGenerator(ca.uhn.fhir.narrative.INarrativeGenerator)">setNarrativeGenerator</a>.
				</p>

				<macro name="snippet">
					<param name="id" value="example1" />
					<param name="file" value="examples/src/main/java/example/Narrative.java" />
				</macro>
				
				<p>
				...which produces the following output:
				</p>
				
				<source><![CDATA[<Patient xmlns="http://hl7.org/fhir">
   <text>
      <status value="generated"/>
      <div xmlns="http://www.w3.org/1999/xhtml">
         <div class="hapiHeaderText"> John Edward <b>SMITH </b></div>
         <table class="hapiPropertyTable">
            <tbody>
               <tr><td>Identifier</td><td>7000135</td></tr>
               <tr><td>Address</td><td><span>742 Evergreen Terrace</span><br/><span>Springfield</span> <span>ZZ</span></td></tr>
            </tbody>
         </table>
      </div>
   </text>
   <!-- .... snip ..... -->
</Patient>]]></source>
			
			</subsection>
		
			<subsection name="Built-in Narrative Templates">
			
				<p>
					HAPI currently only comes with built-in support for
					a few resource types. Our intention is that people enhance these 
					templates and create new ones, and share these back with us so that
					we can continue to build out the library. To see the current
					template library, see the source repository 
					<a href="https://github.com/jamesagnew/hapi-fhir/tree/master/hapi-fhir-base/src/main/resources/ca/uhn/fhir/narrative">here</a>.
				</p>

				<p>
					Note that these templates expect a few specific CSS definitions
					to be present in your site's CSS file. See the 
					<a href="https://github.com/jamesagnew/hapi-fhir/blob/master/hapi-fhir-base/src/main/resources/ca/uhn/fhir/narrative/hapi-narrative.css">narrative CSS</a>
					to see these. 
				</p>
			
			</subsection>
			
		</section>
		
		<section name="Creating your own Templates">
		
			<p>
				To use your own templates for narrative generation,
				simply create one or more templates, using the Thymeleaf
				HTML based syntax. 
			</p>
		
			<macro name="snippet">
				<param name="file" value="hapi-fhir-structures-dstu/src/test/resources/narrative/Practitioner.html" />
			</macro>

			<p>
				Then create a properties file which describes your
				templates. In this properties file, each resource to 
				be defined has a pair or properties. 
			</p>
						
			<p>
				The first (name.class) defines the class name of the resource to define a 
				template for. The second (name.narrative) defines the path/classpath to the
				template file. The format of this path is <code>file:/path/foo.html</code> or  <code>classpath:/com/classpath/foo.html</code>
			</p>
			
			<source><![CDATA[# Two property lines in the file per template
practitioner.class=ca.uhn.fhir.model.dstu.resource.Practitioner
practitioner.narrative=file:src/test/resources/narrative/Practitioner.html

observation.class=ca.uhn.fhir.model.dstu.resource.Observation
observation.narrative=file:src/test/resources/narrative/Observation.html

# etc...]]></source>

			<p>
				You may also override/define behaviour for datatypes. These datatype narrative
				definitions will be used as content within <code>th:narrative</code> blocks
				in resource templates. See the example resource template above for an example.
			</p>
			  
			<source><![CDATA[# datatypes use the same format as resources
humanname.class=ca.uhn.fhir.model.dstu.composite.HumanNameDt
humanname.narrative=classpath:ca/uhn/fhir/narrative/HumanNameDt.html]]></source>
		
			<p>
				Finally, use the 
				<a href="./apidocs/ca/uhn/fhir/narrative/CustomThymeleafNarrativeGenerator.html">CustomThymeleafNarrativeGenerator</a> 
				and provide it
				to the FhirContext.
			</p>

			<macro name="snippet">
				<param name="id" value="gen" />
				<param name="file" value="examples/src/main/java/example/NarrativeGenerator.java" />
			</macro>
		
		</section>
		
	</body>

</document>
