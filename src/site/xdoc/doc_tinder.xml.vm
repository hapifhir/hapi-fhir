<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>Tinder</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>

	<!-- This content should not be migrated -->

	<body>

		<section name="Tinder">
			
			<macro name="toc">
			</macro>
			
			<p>
				According to the FHIR specification, any conformant server
				must be able to export a Conformance statement, which 
				indicates all of the resource types and potential operations
				that the server supports.				
			</p>

			<p>
				HAPI provides a Maven plugin called "Tinder" which is able to automatically
				generate a client based on that conformance statement.
			</p>

		</section>			
		
		<section name="Client Generation">
			
				<p>
					The following example shows a simple Maven plugin which
					builds a client for the Health Intersections reference
					server. 
				</p>
				
				<p>
					Note that as of HAPI 0.8, you need to add a dependency to the 
					plugin containing the version of FHIR you are building custom 
					structures against.
				</p>

				<source><![CDATA[<plugins>
   <plugin>
      <groupId>ca.uhn.hapi.fhir</groupId>
      <artifactId>hapi-tinder-plugin</artifactId>
      <version>${project.version}</version>
      <executions>
         <execution>
            <goals><goal>generate-structures</goal></goals>
            <configuration>
               <clientClassName>ca.uhn.hitest.HiTest</clientClassName>
               <serverBaseHref>http://fhir.healthintersections.com.au/open</serverBaseHref>
               <generateSearchForAllParams>true</generateSearchForAllParams>
            </configuration>
         </execution>
      </executions>
      <dependencies>
         <dependency>
            <groupId>ca.uhn.hapi.fhir</groupId>
            <artifactId>hapi-fhir-structures-dstu</artifactId>
            <version>${project.version}</version>
         </dependency>        
      </dependencies>
   </plugin>			
</plugins>]]></source>				
			
			<p>
				This example will create a class called
				<code>ca.uhn.hitest.HiTest</code> which has
				methods to invoke the various server operations.
			</p>
			
			<p>
				It is then possible to use this client as simply as:
			</p>
			
			<source><![CDATA[// Instantiate the client
FhirContext ctx = new FhirContext(Patient.class);
IRestfulClientFactory clientFactory = ctx.newRestfulClientFactory();
ClientClass client = clientFactory.newClient(ClientClass.class, "http://fhir.healthintersections.com.au/open");

// Invoke the client
Bundle bundle = client.searchPatientByGender(new StringDt("M"));

System.out.println(bundle.getEntries().size()); 
// Prints: 50

Patient patientOne = (Patient) bundle.getEntries().get(0).getResource();
System.out.println(patientOne.getName().get(0).getFamily().get(0).getValue());
// Prints: Chalmers]]></source>
			
		</section>

	</body>

</document>
