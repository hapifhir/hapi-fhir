<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<!-- This content has been migrated -->

	<properties>
		<title>Hacking HAPI FHIR</title>
	</properties>

	<body>

		<section name="Hacking HAPI FHIR">

			<p>
				This page contains useful information about how to get started in developing
				HAPI FHIR itself. 
			</p>

		</section>
		
		<section name="Understanding the HAPI FHIR Codebase">

			<p>
				The HAPI FHIR <a href="https://github.com/jamesagnew/hapi-fhir">Codebase</a>
				has a number of subprojects. You will typically need to interact with several
				of them in order to develop HAPI, but you generally don't need all of them.
			</p>
			
			<p>
				The following is a list of key subprojects you might open in your IDE:
			</p>
			<ul>
				<li>
					<a href="https://github.com/jamesagnew/hapi-fhir/tree/master/hapi-fhir-base"><b>hapi-fhir-base</b></a>: 
					This is the core library, containing the parsers, client/server frameworks, and many other features. Note
					that this module does not contain any model classes (e.g. the Patient model class) as these are found
					in "structures" projects below.  
				</li>
				<li>
					<b>hapi-fhir-structures-[version]</b>: 
					There are several structures projects (e.g. <code>hapi-fhir-structures-dstu2</code>), each of
					which contains model classes for a specific version of FHIR.It is generally a good idea
					to open all of these in your IDE.  
				</li>
				<li>
					<b>hapi-fhir-validation-resources-[version]</b>: 
					There are several validation resources projects (e.g. <code>hapi-fhir-validation-resources-dstu2</code>), each of
					which contains text resources for the given version. These resources are text resources produced
					as a part of the FHIR specification build (e.g. StructureDefinitions, ValueSets, etc.)  
				</li>
				<li>
					<b>hapi-fhir-jpaserver-base</b>: 
					This module contains the JPA server.  
				</li>
			</ul>

		</section>

		<section name="Getting the Sources">
			<p style="float:right;">
				<a href="https://travis-ci.org/jamesagnew/hapi-fhir"><img src="https://travis-ci.org/jamesagnew/hapi-fhir.svg?branch=master" alt="Build Status"/></a>
			</p>
			<p>
				The best way to grab our sources is with Git. Grab the repository URL
				from our <a href="https://github.com/jamesagnew/hapi-fhir">GitHub page</a>.
				We try our best to ensure that the sources are always left in a buildable state. Check
				Travis (see the image/link on the right) to see if the sources currently build.
			</p>
		</section>
		
		<section name="Building HAPI FHIR">
			<p>
				HAPI is built primary using 
				<a href="http://maven.apache.org/">Apache Maven</a>. Even if you are using an IDE,
				you should start by performing a command line build before trying to get
				everything working in an IDE. 
			</p>
			<p>
				Execute the build with the following command:<br/>
				<code>mvn install</code>
			</p>
			<p>
				Note that this complete build takes a long time because of all of the unit tests
				being executed. At the end you should expect to see a screen resembling:<br/>
				<pre>[]INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] HAPI-FHIR .......................................... SUCCESS [  4.456 s]
[INFO] HAPI FHIR - Deployable Artifact Parent POM ......... SUCCESS [  2.841 s]
[INFO] HAPI FHIR - Core Library ........................... SUCCESS [01:00 min]
[INFO] HAPI Tinder Plugin ................................. SUCCESS [ 19.259 s]
[INFO] HAPI FHIR Structures - DSTU1 (FHIR v0.80) .......... SUCCESS [01:40 min]
[INFO] HAPI FHIR Structures - DSTU2 (FHIR v1.0.0) ......... SUCCESS [01:14 min]
[INFO] HAPI FHIR Structures - DSTU3 ....................... SUCCESS [02:11 min]
.... some lines removed .....
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 20:45 min
[INFO] Finished at: 2016-02-27T15:05:35+00:00</pre> 
			</p>
			
			<subsection name="Troubleshooting">
				
				<p>
					If the build fails to execute successfully, try the following:
				</p>
				<ul>
					<li>
						The first thing to try is always a fresh clean build when things aren't working:<br/>
						<pre>mvn clean install</pre>
					</li>
					<li>
						<b>If you are trying to build a submodule</b> (e.g. <code>hapi-fhir-jpaserver-example</code>), 
						try building the root project first. Especially when building from the Git <code>master</code>,
						often times there will be dependencies that require a fresh complete build (note that this is
						not generally an issue when building from a release version)<br/>
						<pre><![CDATA[cd [workspace]/hapi-fhir
mvn install]]></pre>
					</li>
					<li>
						<b>If the build fails with memory issues (or mysteriously dies during unit tests)</b>,
						your build environment may be running out of memory. By default, the HAPI build executes
						unit tests in multiple parallel JVMs in order to save time. This can consume a lot of RAM
						and sometimes causes issues. Try executing with the following command to disable
						this behaviour:<br/>
						<pre>mvn -P ALLMODULES,NOPARALLEL install</pre>
					</li>
					<li>
						If you figure something else out, please <b>let us know</b> so that we can add it
						to this list!
					</li>
				</ul>
			
			</subsection>
			
		</section>
		
		<section name="Importing into Eclipse">
			<p>
				This section shows how to import HAPI into Eclipse. There is no requirement
				to use Eclipse (IntelliJ/IDEA and Netbeans are both fine!) so feel free to
				skip this section.
			</p>
			<p>
				<b>Maven Import</b><br/>
				Import the HAPI projects as Maven Modules by selecing
				<code>File -&gt; Import...</code> from the File menu. Then select
				<code>Existing Module Projects</code> as shown below.
			</p>
			<img src="./images/hacking_import.png"/><br/><br/>
			<p>
				<b>Select the Projects</b><br/>
				Next, browse to the directory where you checked out the HAPI FHIR sources. 
				You might want to select only the projects you are interested in editing,
				in order to keep Eclipse's memory use down. You can always come back and 
				import more later.
			</p>
			<img src="./images/hacking_import_step2.png"/>
			
			<subsection name="Troubleshooting">
			
				<p>
					When importing the HAPI projects into Eclipse, sometimes Eclipse 
					will fail to correctly import libraries. If you import a module
					into Eclipse and it fails to compile with many errors relating to
					packages other than HAPI's, the following steps will fix this:
				</p>
				<ul>
					<li>Delete the project from your Eclipse workspace</li>
					<li>
						On the local filesystem, delete the files <code>.project</code>
						and <code>.classpath</code>, and the directory <code>.settings</code>
						from each module you want to open.
					</li>
					<li>
						Import each module again using the instructions above
					</li>
				</ul>
				
			</subsection>
			
		</section>
	</body>

</document>
