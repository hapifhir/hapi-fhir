<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	 <!-- Content has been migrated -->

	<properties>
		<title>Client Configuration</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>

	<body>
		<section name="Configuring Client Behaviour">
			
			<p>
				This page outlines ways that the client can be configured
				for specific behaviour. 
			</p>
			
		</section>


		<a name="performance"/>
		<section name="Performance">
		
			<subsection name="Server Conformance Check">
				<p>
					By default, the client will query the server before the very first
					operation to download the server's conformance/metadata statement
					and verify that the server is appropriate for the given client.
					This check is only done once per server endpoint for a given
					FhirContext.
				</p>
				<p>
					This check is useful to prevent bugs or unexpected behaviour
					when talking to servers. It may introduce unneccesary overhead
					however in circumstances where the client and server are known
					to be compatible. The following example shows how to disable this
					check.
				</p>
				<macro name="snippet">
					<param name="id" value="dontValidate" />
					<param name="file" value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>
			</subsection>
			
			<subsection name="Deferred Model Scanning">
				
				<p>
					By default, HAPI will scan each model type it encounters
					as soon as it encounters it. This scan includes a check for
					all fields within the type, and makes use of reflection to do this.
				</p>
				<p>
					While this process is not particularly significant on reasonably 
					performant machines (one benchmark showed that this takes 
					roughly 0.6 seconds to scan all types on one developer workstation), on some devices
					(e.g. Android phones where every millisecond counts)
					it may be desirable to defer this scan. 
				</p>
				<p>
					When the scan is deferred, objects will only be scanned when they
					are actually accessed, meaning that only types that are
					actually used in an application get scanned. 
				</p>
				<p>
					The following example shows how to defer model scanning:
				</p>
				<macro name="snippet">
					<param name="id" value="deferModelScanning" />
					<param name="file" value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>
				
			</subsection>
			
		</section>

		<section name="Configuring the HTTP Client">
			
			<p>
				RESTful clients (both Generic and Annotation-Driven) use
				<a href="http://hc.apache.org/httpcomponents-client-ga/">Apache HTTP Client</a>
				as a provider by default (except on Android, where 
				<a href="http://square.github.io/okhttp/">OkHttp</a>
				is the default).
			</p>
			<p>
				The Apache HTTP Client is very powerful and extremely
				flexible,
				but can be confusing at first to configure, because of the low-level
				approach that
				the library uses.
			</p>

			<p>
				In many cases, the default configuration should suffice. HAPI FHIR 
				also encapsulates some of the more common configuration settings you
				might want to use (socket timesouts, proxy settings, etc.) so that these
				can be configured through HAPI's API without needing to understand the
				underlying HTTP Client library.
			</p>

			<p>
				This configuration is provided by accessing the
				<a href="./apidocs/ca/uhn/fhir/rest/client/IRestfulClientFactory.html">IRestfulClientFactory</a>
				class from the FhirContext.
			</p>

			<p>
				Note that individual requests and responses
				can be tweaked using
				<a href="./doc_rest_client_interceptor.html">Client Interceptors.</a>
				This approach is generally useful for configuration involving
				tweaking the HTTP request/response, such as adding authorization headers
				or logging.
			</p>

			<subsection name="Setting Socket Timeouts">
				<p>
					The following example shows how to configure low level
					socket timeouts for client operations.
				</p>
				<macro name="snippet">
					<param name="id" value="timeouts"/>
					<param name="file"
						value="examples/src/main/java/example/ClientExamples.java"/>
				</macro>
			</subsection>

			<subsection name="Configuring an HTTP Proxy">

				<p>
					The following example shows how to configure the use of an HTTP
					proxy in the client.
				</p>

				<macro name="snippet">
					<param name="id" value="proxy"/>
					<param name="file"
						value="examples/src/main/java/example/ClientExamples.java"/>
				</macro>

			</subsection>

			<subsection name="Using OkHttp instead of Apache HttpClient">

				<p>
					As of HAPI FHIR 2.0, an alternate client implementation
					is available. This client replaces the low-level
					Apache HttpClient implementation with the 
					Square
					<a href="http://square.github.io/okhttp/">OkHttp</a>
					library.
				</p>
				<p>
					Changing HTTP implementations should be mostly
					transparent (it has no effect on the actual FHIR
					semantics which are transmitted over the wire) but
					might be useful if you have an application that 
					uses OkHttp in other parts of the application and
					has specific configuration for that library.
				</p>
				<p>
					Note that as of HAPI FHIR 2.1, OkHttp is the default
					provider on Android, and will be used without any
					configuration being required. This is done because
					HttpClient is deprecated on Android and has caused
					problems in the past.
				</p>
				<p>
					To use OkHttp, first add the library as a dependency to your project POM:
				</p>
				<source><![CDATA[<dependency>
	<groupId>ca.uhn.hapi.fhir</groupId>
	<artifactId>hapi-fhir-client-okhttp</artifactId>
	<version>${hapi_stable_version}</version>		
</dependency>]]></source>

				<p>
					Then, set the client factory to use OkHttp. 
				</p>
				<macro name="snippet">
					<param name="id" value="okhttp"/>
					<param name="file"
						value="examples/src/main/java/example/ClientExamples.java"/>
				</macro>
			</subsection>
		</section>

	</body>

</document>
