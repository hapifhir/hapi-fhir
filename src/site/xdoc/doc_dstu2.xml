<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>FHIR DSTU3 Support</title>
		<author email="jamesagnew@gmail.com">James Agnew</author>
	</properties>

	<body>

		<section name="Working with DSTU3">

			<p>
				Although DSTU3 has not yet been balloted and finalized by HL7, 
				there are several proposed changes which have been incorporated
				into the current 
				<a href="http://hl7-fhir.github.io/">Continuous Integration Builds</a>
				of the FHIR specification itself and many of these changes are used
				as a part of testing scenarios in FHIR Connectathons.
			</p>
			<p>
				HAPI has support for DSTU3 definitions, based on the snapshot
				of the resource definitions available at the time that 
				a given version of HAPI is released. These structures are found
				in the <code>hapi-fhir-structures-dstu3-[version].jar</code>
				library, with the associated Schemas, ValueSets, and other
				textual resources being found in
				<code>hapi-fhir-validation-resources-dstu3-[version].jar</code>.
				For information on where to find these libraries, see the
				<a href="./downloads.html">Downloads</a> page.
			</p>
			<p>
				Migrating to DSTU3 does require some effort, as the resource
				definitions have been migrated to use the "Reference Implementation"
				structures. These are the resource definitions supplied by HL7,
				meaning that the process to merge these two libraries has now
				begun.
			</p>
			
			<subsection name="The RI Data Model">
				<p>
					Since the early days of the FHIR project, there have been two parallel
					Java implementations of the FHIR Specification: HAPI and the Reference
					Implementation (RI). The two libraries both had separate data models and parsers,
					but had little overlap in features other than that. HAPI has a server,
					database, and rich fluent client that the RI did not have. The RI had 
					profile validation, snapshot generation, and a set other of great utilities that
					HAPI did not have.
				</p>
				<p>
					Over the last year, we have been working to bring the two projects
					together, in order to reduce duplication of effort and let all
					Java users take advantage of the entire set of available tools.
				</p>
				<p>
					The biggest change to HAPI users coming from this merging is the adoption
					of the new RI data structure classes. For users of FHIR DSTU2, we provided
					a parallel set of structures so that users could choose which library to
					use (<code>hapi-fhir-structures-dstu2</code> for HAPI structures, 
					or <code>hapi-fhir-structures-hl7org-dstu2</code> for RI structures). For 
					DSTU3 we will be using the RI structures only, so users will need to migrate
					to use these.
				</p>
			</subsection>
			<subsection name="Using the new RI Structures">
				<p>
					The reference implementation (RI) structures have been added as a new 
					maven dependency library called <code>hapi-fhir-structures-dstu3</code>. 
					See
					the <a href="./download.html">download page</a> for information on the Maven
					dependencies for this version of the structures.
				</p>
				<p>
					A new interface has been added which serves as a master interface
					for all resource classes: <code>org.hl7.fhir.instance.model.api.IBaseResource</code>.
					All RI resource classes will be in the package <code>org.hl7.fhir.dstu3.model</code>,
					as shown below.
				</p>
				<img src="./images/hapi-1.1-structs-resource.svg" alt="Structures"/>
	
				<p>
					Datatypes will also be found inthe same package. Unlike HAPI datatype structures,
					which all end with "Dt", the RI primitive structure names end with "Type" and the
					RI composite structures have no suffix, as shown below.
				</p>
				<img src="./images/hapi-1.1-structs-datatypes.svg" alt="Structures"/>

			</subsection>
			
			<subsection name="Using the DSTU3 Structures in Your Application">
				
				<p>
					Using these structures is similar to using other structures:
				</p>
				
				<macro name="snippet">
					<param name="id" value="creatingContextHl7org" />
					<param name="file" value="examples/src/main/java/example/FhirContextIntro.java" />
				</macro>
				
			</subsection>
		
		</section>
		
		<section name="Upgrading Existing Applications to DSTU3 Draft">
		
			<p>
				If you have an existing application built using a version of previous 
				version of HAPI FHIR, there is one change that may affect you. As shown above,
				a new interface called <code>IBaseResource</code> has been introduced, and the
				<code>IResource</code> interface extends from it. Many methods in the API which 
				previously returned <code>IResource</code> now return <code>IBaseResource</code>.
			</p>
			<p>
				For these methods, you may cast the <code>IBaseResource</code> to
				<code>IResource</code> if you are using DSTU2 structures, or to
				<code>IAnyResource</code> if you are using DSTU3 structures. 
			</p>
			
			<p>
				Please post any problems you might encounter trying to upgrade on the
				<a href="https://groups.google.com/d/forum/hapi-fhir">Google Group</a>. Chances are
				if it's happening to you, it's happening to others. We're happy to help.
			</p>
			
			<subsection name="Code changes in DSTU3 Structrues">
			
				<p>
					The following is a list of things that have changed in the DSTU3
					structures which you will need to accomodate in your code as you
					upgrade: 
				</p>
				
				<h4>Package Structure</h4>
				<ul>
					<li>
						Structures are all found in the 
						<code>org.hl7.fhir.dstu3.model</code> package,
						instead of the <code>ca.uhn.fhir.model.dstu2.resource</code>,
						<code>ca.uhn.fhir.model.dstu2.composite</code>, and
						<code>ca.uhn.fhir.model.dstu2.valueset</code> packages.
					</li>
				</ul>
				
				<h4>Datatypes</h4>
				<ul>
					<li>
						<b>Primitive Types are renamed</b> from 
						<code>[foo]Dt</code> to <code>[foo]Type</code>,
						e.g. <code>StringType</code> and <code>DecimalType</code>
					</li>
					<li>
						<b>Composite Types are renamed</b> from 
						<code>[foo]Dt</code> to <code>[foo]</code>,
						e.g. <code>CodeableConcept</code> and <code>HumanName</code>
					</li>
					<li>
						<b>ResourceReferenceDt is renamed</b> to
						<code>Reference</code>
						<li>
							<b>Reference#getReference()</b> returns the reference text, where
							<code>Reference#getReferenceElement()</code> returns the <code>IdType</code>
							representing the reference.
						</li>
					</li>
				</ul>
				
				<h4>Setter Names</h4>
				<ul>
					<li>
						<b>Names for some component setters/mutators have changed</b>
						in the new structures. In the old structures if the field
						type was a primitive (e.g. a string) there would be two 
						setters: <code>setName(String)</code> and 
						<code>setName(StringDt)</code>. In the new structures, 
						the setters are called <code>setName(String)</code> and 
						<code>setNameElement(StringType)</code>. This is more 
						consistent with the way the getters are named.
					</li>
				</ul>

				<h4>Resource Metadata</h4>
				<ul>
					<li>
						<b>Resource#getId() returns the string ID</b> (e.g. <code>http://example.com/Patient/1</code>)
					</li>
					<li>
						<b>Resource#getIdElement() returns the IdType</b> previously returned by <code>Resource#getId()</code>
					</li>
					<li>
						<b>Resource metadata (e.g. last update time, tags, etc.) lives in a</b>
						<code>Meta</code> object accessed using <code>Resource#getMeta()</code> 
						instead of using the <code>#getResourceMetadata()</code> hashmap.
						<li><code>Resource#getMeta()#getLastUpdate()</code> returns the resource's last update time</li>
						<li><code>Resource#getMeta()#getTag()</code> returns the resource's tag list</li>
						<li><code>Resource#getMeta()#getProfile()</code> returns the resource's profile list</li>
					</li>
				</ul>
				
				<h4>Contained Resources</h4>
				<ul>
					<li><b>Resource#getContained() returns the list</b> of contained resources (previously it returned a useless ContainedDt object which held the list of contained resources)</li>
				</ul>
				
				<h4>Enums for ValueSets</h4>
				<ul>
					<li>Enums are named <code>[EnumName]</code> instead of <code>[EnumName]Enum</code>. For example, <code>ConditionVerificationStatusEnum</code> is now called <code>ConditionVerificationStatus</code></li>
				</ul>
				
				<h4>
					Resource/Datatype Components
				</h4>
				<ul>
					<li>
						The Java model classes representing sub-elements within a resource 
						now have a longer name reflecting the containing element name and 
						ending in "Component". For example, the Java structure representing 
						the "Bundle.entry" component was called <code>Entry</code> in the HAPI structures 
						but is called <code>BundleEntryComponent</code> in the RI structures. 
  					</li>
				</ul>
				
			</subsection>
			
		</section>
		
	</body>

</document>
