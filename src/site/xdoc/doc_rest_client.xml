<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>RESTful Client</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>

	<body>

		<!-- The body of the document contains a number of sections -->
		<section name="Creating a RESTful Client">
			
			<!--
			<table class="pagenavlinks">
				<tr>
					<td>
						<a class="pagenavlinks" href="./docindex.html"><span class="fa fa-caret-square-o-up"></span> Documentation Index</a>
					</td>
				</tr>
			</table>
			-->
			
			<p>
				HAPI provides a built-in mechanism for connecting to FHIR RESTful
				servers.
				The HAPI RESTful client is designed to be easy to set up and
				to allow strong
				compile-time type checking wherever possible.
			</p>

			<p>
				There are two types of RESTful clients provided by HAPI: 
				The Fluent/Generic client (described below) and 
				the <a href="./doc_rest_client_annotation.html">Annotation</a> 
				client.
				The generic client is simpler to use
				and generally provides the faster way to get started. The annotation-driven
				client relies on static binding to specific operations to 
				give better	compile-time checking against servers with a specific set of capabilities
				exposed. This second model takes more effort to use, but can be useful 
				if the person defining the specific methods to invoke is not the same person
				who is using those methods.
			</p>

		</section>
		
		<section name="The Fluent/Generic Client">
		
			<p>
				Creating a generic client simply requires you to create an instance of
				<code>FhirContext</code> and use that to instantiate a client.
			</p>			
			<p>
				The following example shows how to create a client, and a few operations which
				can be performed.
			</p>
			
			<macro name="snippet">
				<param name="id" value="simple" />
				<param name="file"
					value="examples/src/main/java/example/GenericClientExample.java" />
			</macro>
			
			<p> 
				<b>Performance Tip: </b> Note that FhirContext is an expensive object to create,
				so you should try to keep an instance around for the lifetime of your application. It
				is thread-safe so it can be passed as needed. Client instances, on the other hand, 
				are very inexpensive to create so you can create a new one for each request if needed 
				(although there is no requirement to do so, clients are reusable and thread-safe as well).  
			</p>

			<subsection name="Fluent Calls">
				<p>
					The generic client supports queries using a fluent interface
					which is inspired by the fantastic 
					<a href="http://ewoutkramer.github.io/fhir-net-api/client-search.html">.NET FHIR API</a>.
					The fluent interface allows you to construct powerful queries by chaining
					method calls together, leading to highly readable code. It also allows
					you to take advantage of intellisense/code completion in your favourite
					IDE.
				</p>
				<p>
					Note that most fluent operations end with an <code>execute()</code>
					statement which actually performs the invocation. You may also invoke
					several configuration operations just prior to the execute() statement,
					such as <code>encodedJson()</code> or <code>encodedXml()</code>.
				</p>
			</subsection>
						
			<subsection name="Search/Query - Type">
				
				<p>
					Searching for resources is probably the most common initial scenario for
					client applications, so we'll start the demonstration there. The FHIR search
					operation generally uses a URL with a set of predefined search parameters,
					and returns a Bundle containing zero-or-more resources which matched the
					given search criteria. 
				</p>
				<p>
					Search is a very powerful mechanism, with advanced features such as paging,
					including linked resources, etc. See the FHIR 
					<a href="http://hl7.org/fhir/search.html">search specification</a>
					for more information.
				</p>
				
				<p class="doc_info_bubble">
					<b>Note on Bundle types: </b> As of DSTU2, FHIR defines Bundle as a resource
					instead of an Atom feed as it was in DSTU1. In code that was written for
					DSTU1 you would typically use the <code>ca.uhn.fhir.model.api.Bundle</code>
					class to represent a bundle, and that is that default return type for search
					methods. If you are implemeting a DSTU2+ server, is recommended to use a
					Bundle resource class instead (e.g. <code>ca.uhn.fhir.model.dstu2.resource.Bundle</code>
					or <code>org.hl7.fhir.dstu2.model.Bundle</code>). Many of the examples below include
					a chained invocation similar to 
					<code>.returnBundle(ca.uhn.fhir.model.dstu2.resource.Bundle.class)</code>, which 
					instructs the search method which bundle type should be returned.
				</p>
				
				<p>
					The following example shows how to query using the generic client:
				</p>
				<macro name="snippet">
					<param name="id" value="search" />
					<param name="file"
						value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>
				
				<h4>Search - Multi-valued Parameters (ANY/OR)</h4>
				<p>
					To search for a set of possible values where <b>ANY</b> should be matched, 
					you can provide multiple values to a parameter, as shown in the example below.
					This leads to a URL resembling <code>?family=Smith,Smyth</code> 
				</p>
				<macro name="snippet">
					<param name="id" value="searchOr" />
					<param name="file"
						value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>

				<h4>Search - Multi-valued Parameters (ALL/AND)</h4>
				<p>
					To search for a set of possible values where <b>ALL</b> should be matched,
					you can provide multiple instances of a parameter, as shown in the example below.
					This leads to a URL resembling <code>?address=Toronto&amp;address=Ontario&amp;address=Canada</code> 
				</p>
				<macro name="snippet">
					<param name="id" value="searchAnd" />
					<param name="file"
						value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>

				<h4>Search - Paging</h4>
				<p>
					If the server supports paging results, the client has a page method
					which can be used to load subsequent pages.
				</p>
				<macro name="snippet">
					<param name="id" value="searchPaging" />
					<param name="file"
						value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>
				
				<h4>Search - Composite Parameters</h4>
				<p>
					If a composite parameter is being searched on, the parameter
					takes a "left" and "right" operand, each of which is
					a parameter from the resource being seached. The following example shows the
					syntax.
				</p>
				<macro name="snippet">
					<param name="id" value="searchComposite" />
					<param name="file"
						value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>
				
				<h4>Search - By plain URL</h4>
				<p>
					You can also perform a search using a String URL, instead
					of using the fluent method calls to build the URL. This
					can be useful if you have a URL you retrieved from
					somewhere else that you want to use as a search.
				</p>
				<macro name="snippet">
					<param name="id" value="searchUrl" />
					<param name="file"
						value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>

				<h4>Search - Other Query Options</h4>
				<p>
					The fluent search also has methods for sorting, limiting, specifying
					JSON encoding, _include, _revinclude, _lastUpdated, _tag, etc.
				</p>
				<macro name="snippet">
					<param name="id" value="searchAdv" />
					<param name="file"
						value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>

				<h4>Search - Using HTTP POST</h4>
				<p>
					The FHIR specification allows the use of an HTTP POST to transmit a search to a server instead of
					using
					an HTTP GET. With this style of search, the search parameters are included in the request body
					instead
					of the request URL, which can be useful if you need to transmit a search with a large number
					of parameters.
				</p>
				<p>
					The <code>usingStyle()</code> method controls which style to use. By default, GET style is used
					unless the client detects that the request would result in a very long URL (over 8000 chars) in which
					case the client automatically switches to POST.
				</p>
				<p>
					An alternate form of the search URL (using a URL ending with<code>_search</code>) was also
					supported in FHIR DSTU1. This form is no longer valid in FHIR DSTU2, but HAPI retains support
					for using this form in order to interoperate with servers which use it.
				</p>
				<macro name="snippet">
					<param name="id" value="searchPost" />
					<param name="file"
						value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>

				<h4>Search - Compartments</h4>
				<p>
					To search a 
					<a href="http://www.hl7.org/implement/standards/fhir/extras.html#compartment">resource compartment</a>, 
					simply use the <code>withIdAndCompartment</code>
					method in your search. 
				</p>
				<macro name="snippet">
					<param name="id" value="searchCompartment" />
					<param name="file"
						value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>

				<h4>Search - Subsetting (_summary and _elements)</h4>
				<p>
					Sometimes you may want to only ask the server to include some parts of returned
					resources (instead of the whole resource). Typically this is for performance or
					optimization reasons, but there may also be privacy reasons for doing this.
				</p>
				<p>
					To request that the server return only "summary" elements (those elements
					defined in the specification with the "Î£" flag), you can use the
					<code>summaryMode(SummaryEnum)</code> qualifier: 
				</p>
				<macro name="snippet">
					<param name="id" value="searchSubsetSummary" />
					<param name="file"
						value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>
				<p>
					To request that the server return only elements from a custom list
					provided by the client, you can use the <code>elementsSubset(String...)</code>
					qualifier:
				</p>
				<macro name="snippet">
					<param name="id" value="searchSubsetElements" />
					<param name="file"
						value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>
				
			</subsection>			

			<subsection name="Create - Type">
				<p>
					The following example shows how to perform a create
					operation using the generic client:
				</p>
				<macro name="snippet">
					<param name="id" value="create" />
					<param name="file"
						value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>

				<h4>Conditional Creates</h4>
				<p>
					FHIR also specifies a type of update called "conditional create", where
					a set of search parameters are provided and a new resource is only
					created if no existing resource matches those parameters. See the
					FHIR specification for more information on conditional creation.
				</p>
				<macro name="snippet">
					<param name="id" value="createConditional"/>
					<param name="file"
						   value="examples/src/main/java/example/GenericClientExample.java"/>
				</macro>
			</subsection>			

			<subsection name="Read/VRead - Instance">
				<p>
					Given a resource name and ID, it is simple to retrieve
					the latest version of that resource (a 'read')
				</p>
				<macro name="snippet">
					<param name="id" value="read" />
					<param name="file"
						value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>
				<p>
					By adding a version string, it is also possible to retrieve a 
					specific version (a 'vread')
				</p>
				<macro name="snippet">
					<param name="id" value="vread" />
					<param name="file"
						value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>
				<p>
					It is also possible to retrieve a resource given its absolute
					URL (this will override the base URL set on the client) 
				</p>
				<macro name="snippet">
					<param name="id" value="readabsolute" />
					<param name="file"
						value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>
				
				<p>
					<b>See also</b> the page on 
					<a href="./doc_rest_etag.html#client_read">ETag Support</a> 
					for information on specifying a matching version in the
					client request.
				</p>
				
			</subsection>			

			<subsection name="Delete - Instance">
				<p>
					The following example shows how to perform a delete
					operation using the generic client:
				</p>
				<macro name="snippet">
					<param name="id" value="delete" />
					<param name="file"
						value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>
				<h4>Conditional Deletes</h4>
				<p>
					Conditional deletions are also possible, which is a form where
					instead of deleting a resource using its logical ID, you specify
					a set of search criteria and a single resource is deleted if
					it matches that criteria. Note that this is not a mechanism
					for bulk deletion; see the FHIR specification for information
					on conditional deletes and how they are used.
				</p>
				<macro name="snippet">
					<param name="id" value="deleteConditional"/>
					<param name="file"
						   value="examples/src/main/java/example/GenericClientExample.java"/>
				</macro>
			</subsection>

			<subsection name="Update - Instance">
				<p>
					Updating a resource is similar to creating one, except that
					an ID must be supplied since you are updating a previously
					existing resource instance.
				</p>
				<p>
					The following example shows how to perform an update
					operation using the generic client:
				</p>
				<macro name="snippet">
					<param name="id" value="update" />
					<param name="file"
						value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>

				<h4>Conditional Updates</h4>
				<p>
					FHIR also specifies a type of update called "conditional updates", where
					insetad of using the logical ID of a resource to update, a set of
					search parameters is provided. If a single resource matches that set of
					parameters, that resource is updated. See the FHIR specification for
					information on how conditional updates work.
				</p>
				<macro name="snippet">
					<param name="id" value="updateConditional"/>
					<param name="file"
						   value="examples/src/main/java/example/GenericClientExample.java"/>
				</macro>

				<h4>ETags and Resource Contention</h4>
				<p>
					<b>See also</b> the page on 
					<a href="./doc_rest_etag.html#client_update">ETag Support</a> 
					for information on specifying a matching version in the
					client request.
				</p>
				
			</subsection>			

			<subsection name="History - Server/Type/Instance">
				<p>
					To retrieve the version history of all resources, or all resources of a given type, or
					of a specific instance of a resource, you call the <code>history()</code>
					method.
				</p>
				<macro name="snippet">
					<param name="id" value="historyDstu1" />
					<param name="file"
						value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>
				
				<p>
					If you are using a DSTU2 compliant server, you should instead use the
					Bundle resource which is found in the DSTU2 structures JAR, as shown
					in the syntax below. Note that in both cases, the class name is <code>Bundle</code>,
					but the DSTU2 bundle is found in the <code>.resources.</code> package.
				</p>
				<macro name="snippet">
					<param name="id" value="historyDstu2" />
					<param name="file"
						value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>
				
				<p>
					You can also optionally request that only resource versions
					later than a given date, and/or only up to a given count (number)
					of resource versions be returned.
				</p>
				<macro name="snippet">
					<param name="id" value="historyFeatures" />
					<param name="file"
						value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>
			</subsection>
			
			<subsection name="Transaction - Server">
				<p>
					The following example shows how to execute a transaction using the generic client:
				</p>
				<macro name="snippet">
					<param name="id" value="transaction" />
					<param name="file"
						value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>
			</subsection>

			<subsection name="Conformance - Server">
				<p>
					To retrieve the server's conformance statement, simply call the <code>conformance()</code>
					method as shown below.
				</p>
				<macro name="snippet">
					<param name="id" value="conformance" />
					<param name="file"
						value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>
			</subsection>			
		</section>
		
		<section name="Extended Operations">
			<p>
				In the FHIR DSTU2 version, operations (referred to as "extended operations")
				were added. These operations are an RPC style of invocation, with a set of
				named input parameters passed to the server and a set of named output
				parameters returned back. 
			</p>
			<p>
				To invoke an operation using the client, you simply need to create the 
				input
				<a href="./apidocs-dstu2/ca/uhn/fhir/model/dstu2/resource/Parameters.html">Parameters</a>
				resource, then pass that to the <code>operation()</code> fluent method.
			</p>
			<p>
				The example below shows a simple operation call.
			</p>
			<macro name="snippet">
				<param name="id" value="operation" />
				<param name="file" value="examples/src/main/java/example/GenericClientExample.java" />
			</macro>
			
			<p>
				Note that if the operation does not require any input parameters,
				you may also invoke the operation using the following form. Note that
				the <code>withNoParameters</code> still requires you to provide the
				type of the Parameters resource so that it can return the correct type in 
				the response.
			</p>
			<macro name="snippet">
				<param name="id" value="operationNoIn" />
				<param name="file" value="examples/src/main/java/example/GenericClientExample.java" />
			</macro>
			
			<subsection name="Using the HTTP GET Form">
				<p>
					By default, the client will invoke operations using the HTTP POST form.
					The FHIR specification also allows requests to use the HTTP GET verb 
					if the operation is idempotent and has no composite/resource parameters.
					Use the following form to invoke operation with HTTP GET.
				</p>
				<macro name="snippet">
					<param name="id" value="operationHttpGet" />
					<param name="file" value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>
			</subsection>
			
			<subsection name="Built-In Operations - Validate">
				<p>
					The $validate operation asks the server to test a given resource
					to see if it would be acceptable as a create/update on that server.
					The client has built-in support for this operation.  
				</p>
				<p class="doc_info_bubble">
					If the client is in DSTU1 mode, the method below will invoke the 
					DSTU1 validation style instead.
				</p>
				<macro name="snippet">
					<param name="id" value="validate" />
					<param name="file" value="examples/src/main/java/example/GenericClientExample.java" />
				</macro>
				
				
			</subsection>
			
			<subsection name="Built-In Operations - Process-Message">
				<p>
					The <code>$process-message</code> operation asks the server to accept a fhir
					message bundle for processing.
				</p>
				<macro name="snippet">
					<param name="id" value="processMessage" />
					<param name="file" value="examples/src/main/java/example/ClientExamples.java" />
				</macro>
				
				
			</subsection>
			
		</section>

		<section name="Additional Properties">

			<p>
				This section contains ways of customizing the request sent by the client
			</p>

			<subsection name="Cache-Control">

				<p>
					The <code>Cache-Control</code> header can be used by the client in a request
					to signal to the server (or any cache in front of it) that the client wants specific
					behaviour from the cache, or wants the cache to not act on the request altogether.
					Naturally, not all servers will honour this header.
				</p>

				<p>
					To add a cache control directive in a request:
				</p>

				<macro name="snippet">
					<param name="id" value="cacheControl" />
					<param name="file" value="examples/src/main/java/example/ClientExamples.java" />
				</macro>

			</subsection>

		</section>

	</body>

</document>
