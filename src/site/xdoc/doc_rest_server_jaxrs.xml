<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">


	<!-- This content has been migrated -->
	<properties>
		<title>JAX-RS Server</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>

	<body>

		<section name="JAX-RS Server">
			<p>
				The standard server is implemented using Servlet technology. A <a href="https://github.com/jamesagnew/hapi-fhir/tree/master/hapi-fhir-jaxrsserver-base">module</a>
				exists which implements the server using <a href="https://jax-rs-spec.java.net/nonav/2.0/apidocs/index.html">JAX-RS</a> technology. 
				This enables the usage of existing Java EE interceptors and annotations. This module does not provide the full set of features. 
				
				The server currently supports
				<a href="./doc_rest_server.html#ConformanceMetadata_Statement">Conformance Statements</a>,
				<a href="./apidocs/ca/uhn/fhir/rest/annotation/Read.html">@Read</a>,
				<a href="./apidocs/ca/uhn/fhir/rest/annotation/Search.html">@Search</a>,
				<a href="./apidocs/ca/uhn/fhir/rest/annotation/Create.html">@Create</a>,
				<a href="./apidocs/ca/uhn/fhir/rest/annotation/Update.html">@Update</a>,
				<a href="./apidocs/ca/uhn/fhir/rest/annotation/Delete.html">@Delete</a> and 
				<a href="./apidocs/ca/uhn/fhir/rest/annotation/Operation.html">@Operation</a>.
			</p>
			<p>
				The primary intention for this project is to ensure that other web technologies (JAX-RS in this case) can be used together with the base-server functionality. 
				An example server can be found in the Git repo <a href="https://github.com/jamesagnew/hapi-fhir/tree/master/hapi-fhir-jaxrsserver-example">here</a>.
			</p>
			
			<subsection name="JAX-RS Implementation specifics">
			<p>
				The set-up of a JAX-RS server goes beyond the scope of this documentation. The implementation of the server follows the same pattern as the standard server. It is required
				to put the correct <a href="./doc_rest_operations.html">annotation</a> on the methods in the <a href="#Defining_Resource_Providers">Resource Providers</a> in order to be able to call them. 
			</p>
			
			<p>
				Implementing a JAX-RS Resource Provider requires some JAX-RS annotations. The <code><a href="https://docs.oracle.com/javaee/6/api/javax/ws/rs/Path.html">@Path</a></code> 
				annotation needs to define the resource path. The <code><a href="https://docs.oracle.com/javaee/6/api/javax/ws/rs/Produces.html">@Produces</a></code> annotation
				needs to declare the produced formats. The constructor needs to pass the class of the object explicitely in order to avoid  problems with proxy classes in a Java EE environment.
				It is necessary to extend the abstract class 
				<code><a href="http://jamesagnew.github.io/hapi-fhir/apidocs/ca/uhn/fhir/jaxrs/server/AbstractJaxRsResourceProvider.html">AbstractJaxRsResourceProvider</a></code>.
				<macro name="snippet">
					<param name="id" value="jax-rs-provider-construction" />
					<param name="file" value="examples/src/main/java/example/JaxRsPatientRestProvider.java" />
				</macro>
			</p>
			
			<p>
				
				<a href="./doc_rest_operations.html#Extended_Operations">Extended Operations</a> require the correct JAX-RS (
				<code><a href="https://docs.oracle.com/javaee/6/api/javax/ws/rs/Path.html">@Path</a></code>, 
				<code><a href="https://docs.oracle.com/javaee/6/api/javax/ws/rs/GET.html">@GET</a></code> or 
				<code><a href="https://docs.oracle.com/javaee/6/api/javax/ws/rs/POST.html">@POST</a></code>) annotations. The body of the method needs to call the 
				method <code><a href="http://jamesagnew.github.io/hapi-fhir/apidocs/ca/uhn/fhir/jaxrs/server/AbstractJaxRsResourceProvider.html#customOperation-java.lang.String-ca.uhn.fhir.rest.api.RequestTypeEnum-java.lang.String-java.lang.String-ca.uhn.fhir.rest.api.RestOperationTypeEnum">AbstractJaxRsResourceProvider#customOperation</a></code> 
				with the correct parameters. The server will then call the method with corresponding name.
				<macro name="snippet">
					<param name="id" value="jax-rs-provider-operation" />
					<param name="file" value="examples/src/main/java/example/JaxRsPatientRestProvider.java" />
				</macro>
			</p>
			
			<p>
				In order to create the conformance profile, a conformance provider class needs to be deployed which exports the provider's conformance statements. 
				These providers need to be returned  as the result of 
				the method <code><a href="http://jamesagnew.github.io/hapi-fhir/apidocs/ca/uhn/fhir/jaxrs/server/AbstractJaxRsResourceProvider.html#getProviders">AbstractJaxRsResourceProvider#getProviders</a></code>.
				This method is called once, during <code><a href="https://docs.oracle.com/javaee/6/api/javax/annotation/PostConstruct.html">PostConstruct</a></code>.
				<macro name="snippet">
					<param name="id" value="jax-rs-conformance" />
					<param name="file" value="examples/src/main/java/example/JaxRsConformanceProvider.java" />
				</macro>
			</p>
			</subsection>
			
		</section>

		<section name="A Complete Example">
		
			<p>
				A complete example showing how to implement a JAX-RS RESTful server can
				be found in our Git repo here:
				<a href="https://github.com/jamesagnew/hapi-fhir/tree/master/hapi-fhir-jaxrsserver-example">https://github.com/jamesagnew/hapi-fhir/tree/master/hapi-fhir-jaxrsserver-example</a>
			</p>
			
		</section>
		
	</body>

</document>
