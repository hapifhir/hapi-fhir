<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>RESTful Server</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>

	<body>

		<!-- The body of the document contains a number of sections -->
		<section name="Creating a RESTful Server">
			
			<p>
				HAPI provides a built-in mechanism for adding FHIR's RESTful Server
				capabilities to your applications. The HAPI RESTful Server is Servlet
				based, so it should be easy to deploy to any of the many compliant
				containers that exist.					
			</p>

			<p>
				Setup is mostly done using simple annotations, which means that it should
				be possible to create a FHIR compliant server quickly and easily.
			</p>
			
			<a name="resource_providers"/>
			<subsection name="Defining Resource Providers">
			
				<p>
					The first step in creating a FHIR RESTful Server is to define one or
					more resource providers. A resource provider is a class which is 
					able to supply exactly one type of resource to be served up.
				</p>
				
				<p>
					For example, if you wish to allow your server to serve up Patient, 
					Observation and Location resources, you will need three resource
					providers.
				</p>
				
				<p>
					A Resource provider class must implement the 
					<a href="./apidocs/ca/uhn/fhir/rest/server/IResourceProvider.html">IResourceProvider</a> interface,
					and will contain one or more methods which have been
					annotated with special annotations indicating which RESTful operation
					that method supports. Below is a simple example of a resource provider
					which supports the
					<a href="http://hl7.org/fhir/http.html#read">read</a>
					operation (i.e. retrieve a single resource by ID) as well as the
					<a href="http://hl7.org/fhir/http.html#search">search</a>
					operation (i.e. find any resources matching a given criteria) for a specific
					search criteria.
				</p>
				
				<macro name="snippet">
					<param name="id" value="provider" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProvider.java" />
				</macro>

			</subsection>
			<subsection name="Adding more Methods (Search, History, Create, etc.)">

				<p>
					You will probably wish to add more methods
					to your resource provider. See
					<a href="./doc_rest_operations.html">RESTful Operations</a> for
					lots more examples of how to add methods for various operations.
				</p>
				<p>
					For now, we will move on to the next step though, which is creating
					the actual server to hold your resource providers and deploying that.
					Once you have this working, you might want to come back and
					start adding other operations.
				</p>

			</subsection>

			<subsection name="Create a Server">
			
				<p>
					Once your resource providers are created, your next step is to
					define a server class. 
				</p>
				
				<p>
					HAPI provides a class called
					<a href="./apidocs/ca/uhn/fhir/rest/server/RestfulServer.html">RestfulServer</a>, which
					is a specialized Java Servlet. To create a server, you simply create a class
					which extends RestfulServer as shown in the example below.
				</p>
				
				<macro name="snippet">
					<param name="id" value="servlet" />
					<param name="file" value="examples/src/main/java/example/ExampleRestfulServlet.java" />
				</macro>

				<a name="plain_providers"/>
			</subsection>	
			
			<!-- NB there is an anchor for this section above -->
			<subsection name="Plain Providers (non-resource specific)">
			
				<p>
					Defining one provider per resource is a good strategy to keep 
					code readable and maintainable, but it is also possible to put
					methods for multiple resource types in a provider class. Providers
					which do not implement the 
					<a href="./apidocs/ca/uhn/fhir/rest/server/IResourceProvider.html">IResourceProvider</a> 
					(and therefore are not bound to one specific resource type) are known as
					<b>Plain Providers</b>.
				</p>
				<p>
					A plain provider may implement any 
					<a href="./doc_rest_operations.html">RESTful operation</a>, but will generally
					need to explicitly state what type of resource it applies to. If the method directly
					returns a resource or a collection of resources (as in an 
					<a href="./doc_rest_operations.html#instance_read">instance read</a> or
					<a href="./doc_rest_operations.html#type_search">type search</a> operation)
					the resource type will be inferred automatically. If the method returns a
					<a href="./apidocs/ca/uhn/fhir/model/api/Bundle.html">Bundle</a>
					resource, it is necessary to explicitly specify the resource type
					in the method annotation. The following example shows this:
				</p>
				<macro name="snippet">
					<param name="id" value="plainProvider" />
					<param name="file" value="examples/src/main/java/example/ExampleProviders.java" />
				</macro>
			
				<p>
					In addition, some methods are not resource specific. For example, the 
					<a href="./doc_rest_operations.html#history">system history</a> operation
					returns historical versions of <b>all resource types</b> on a server,
					so it needs to be defined in a plain provider.
				</p>
							
				<p>
					Once you have defined your plain providers, they are passed to the 
					server in a similar way to the resource providers.
				</p>
				<macro name="snippet">
					<param name="id" value="plainProviderServer" />
					<param name="file" value="examples/src/main/java/example/ExampleProviders.java" />
				</macro>
			
			</subsection>

			<subsection name="Configure the Server's Identity/Web Address">
				<p>
					The server will return data in a number of places that includes the
					complete "identity" of a resource. Identity in this case refers to the
					web address that a user can use to access the resource.
				</p>
				<p>
					For instance, if your server is hosted at
					<code>http://foo.com/fhir</code>
					and your resource provider returns a Patient resource with the ID "123",
					the server should translate that ID to "http://foo.com/fhir/Patient/123".
				</p>
				<p>
					The server will attempt to determine what the base URL should be based on
					what the request it receives looks like, but if it is not getting
					the right address you may wish to use a different "address strategy".
				</p>
				<p>
					The simplest way to do this is to configure the server to use a hardcoded
					base URL, which means that the server won't try to figure out the
					"http://foo.com/fhir" part of the URL but will instead just use a fixed
					value you supply. This is shown in the following example:
				</p>
				<macro name="snippet">
					<param name="id" value="addressStrategy"/>
					<param name="file" value="examples/src/main/java/example/ExampleProviders.java"/>
				</macro>
				
				<h4>Other Strategies</h4>
				<p>
					See the 
					<a href="./apidocs/ca/uhn/fhir/rest/server/IServerAddressStrategy.html">IServerAddressStrategy</a>
					JavaDoc (specifically the list of "All Known Implementing Classes") to see
					other strategies that are available.
				</p>
				
			</subsection>

			<subsection name="Deploy">
				
				<p>
					Once you have created your resource providers and your restful server class,
					you can bundle these into a WAR file and you are ready to deploy to 
					any JEE container (Tomcat, Websphere, Glassfish, etc).
				</p>

				<p>
					Bundling a servlet into a WAR file and deploying it to an application server
					is beyond the scope of this page, but there are many good tutorials on how
					to do this.
				</p>
			
			</subsection>
					
		</section>

		<section name="Conformance/Metadata Statement">
		
			<p>
				The HAPI FHIR RESTful Server will automatically export a 
				<a href="http://hl7.org/implement/standards/fhir/capabilitystatement.html">capability statement</a> (or a
				<a href="https://www.hl7.org/fhir/DSTU2/conformance.html">conformance statement</a> for DSTU2 and prior), 
				as required by the
				<a href="http://hl7.org/implement/standards/fhir/http.html#conformance">FHIR Specification</a>.
			</p>
			<p>
				This statement is automatically generated based on the various annotated methods which are 
				provided to	the server. This behaviour may be modified by creating a new class
				containing a method annotated with a
				<a href="doc_rest_operations.html#system_conformance">@Metadata Operation</a> 
				and then passing an instance of that class to the
				<a href="./apidocs/ca/uhn/fhir/rest/server/RestfulServer.html#setServerConformanceProvider(java.lang.Object)">setServerConformanceProvider</a> method
				on your server.
			</p>
			
			<subsection name="Enhancing the Generated Conformance Statement">
			
				<p>
					If you have a need to add your own content (special extensions, etc.) to your
					server's conformance statement, but still want to take advantage of HAPI's automatic
					conformance generation, you may wish to extend 
					<a href="http://jamesagnew.github.io/hapi-fhir/apidocs/ca/uhn/fhir/rest/server/provider/ServerConformanceProvider.html">ServerConformanceProvider</a>.
				</p>

				<p>
					In your own class extending this class, you can override the <code>getServerConformance()</code> method
					to provide your own implementation. In this method, call 
					<code>super.getServerConformance()</code> to obtain the built-in conformance statement and then
					add your own information to it.
				</p>
							
				<p>
					Note that if you are adding items during each invocation you should be aware that by default the
					same instance is cached by ServerConformanceProvider. This can result in an ever-growing
					conformance statement. You must call <code>setCache(false);</code> in
					the constructor of your new conformance provider to avoid this behaviour.
				</p>
				
			</subsection>
			
		</section>

		<section name="Paging Responses">
			
			<p>
				The <b>Search</b> and <b>History</b> operations both return a bundle
				which contain zero or more resources. FHIR RESTful servers may optionaly
				support paging responses, meaning that (for example) if a search returns 500
				resources, the server can return a bundle containing only the first 20 and a link
				which will return the next 20, etc. 
			</p>
			
			<p>
				By default, RESTful servers will not page, but will rather return all resources
				immediately in a single bundle. There are two complimentary parts to the paging support: paging
				prividers, and bundle providers. 
			</p>

			<subsection name="Paging Providers">
			
				<p>
					To support paging, a server must have an <code>IPagingProvider</code>
					implementation set. The paging provider is used to store resource
					return lists between incoming calls by clients.
				</p>
				
				<p>
					A paging provider provides two key methods:
				</p>
				<ul>
					<li>
						<code>storeResultList</code>, which takes a bundle provider (see below)
						and stores it for later retrieval. This might be by simply keeping it
						in memory, but it might also store it on disk, in a database, etc. This
						method must return a textual ID which can be used to retrieve this
						list later.
					</li>
					<li>
						<code>retrieveResultList</code>, which takes an ID obtained by a 
						previous call to <code>storeResultList</code> and returns the corresponding
						result list.
					</li>
				</ul> 
				
				<p>
					Note that the IPagingProvider is intended to be simple and implementable and
					you are encouraged to provide your own implementations.
				</p>				

				<p>
					The following example shows a server implementation with paging
					support.
				</p>
				
				<macro name="snippet">
					<param name="id" value="provider" />
					<param name="file" value="examples/src/main/java/example/PagingServer.java" />
				</macro>
			
			</subsection>			
			
			<subsection name="Bundle Providers">

				<p>
					If a server supports a paging provider, a further optimization is to
					also use a bundle provider. A bundle provider simply takes the place of
					the <code>List&lt;IResource&gt;</code> return type in your provider methods.				
				</p>
				
				<p>
					When using a bundle provider however, the server will only request small sublists
					of resources as they are actually being returned. This allows servers to optimize
					by not loading all resources into memory until they are actually needed.
				</p>
				
				<p>
					One implementation of a bundle provider is shown below. This provider example works
					by only keeping the resource IDs in memory, but there are other possible implementation
					strategies that would work as well.
				</p>
				
				<p>
					Note that the IBundleProvider is intended to be simple and implementable and
					you are encouraged to provide your own implementations.
				</p>
				
				<macro name="snippet">
					<param name="id" value="provider" />
					<param name="file" value="examples/src/main/java/example/PagingPatientProvider.java" />
				</macro>
			
			</subsection>
			
		</section>
			

		<section name="Common Method Parameters">
		
			<p>
				Different RESTful methods will have different requirements
				in terms of the method parameters they require, as described
				in the <a href="./doc_rest_operations.html">RESTful Operations</a>
				page.
			</p>
		
			<p>
				In addition, there are several parameters you may add
				in order to meet specific needs of your application.
			</p>
			
			<subsection name="Accessing the underlying Servlet Request/Response">
			
				<p>
					In some cases, it may be useful to have access to the 
					underlying HttpServletRequest and/or HttpServletResponse
					objects. These may be added by simply adding one or both
					of these objects as method parameters.
				</p>
			
				<macro name="snippet">
					<param name="id" value="underlyingReq" />
					<param name="file" value="examples/src/main/java/example/RestfulPatientResourceProviderMore.java" />
				</macro>
			
			</subsection>
		
			<subsection name="Subsetting: _summary and _elements parameters">
			
				<p>
					FHIR allows for the a number of special behaviours where only certain
					portions of resources are returned, instead of the entire resource body.
					These behaviours are automatically supported in HAPI (as of HAPI 1.2)
					and no additional effort needs to be taken.
				</p>
			
				<p>
					The following behaviours are automatically supported by the HAPI server:
				</p>
				
				<table>
					<thead>
						<tr>
							<td><b>Parameter</b></td>
							<td><b>Description</b></td>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td>_summary=true</td>
							<td>
								Resources will be returned with any elements not marked as summary elements
								omitted.
							</td>
						</tr>
						<tr>
							<td>_summary=text</td>
							<td>
								Only the narrative portion of returned resources will be returned. For a read/vread 
								operation, the narrative will be served with a content type of <code>text/html</code>.
								for other operations, a Bundle will be returned but resources will only include
								the text element.
							</td>
						</tr>
						<tr>
							<td>_summary=data</td>
							<td>
								The narrative (text) portion of the resource will be omitted.
							</td>
						</tr>
						<tr>
							<td>_summary=count</td>
							<td>
								For a search, only Bundle.count will be returned.
							</td>
						</tr>
						<tr>
							<td>_elements=[element names]</td>
							<td>
								Only the given top level elements of returned resources will be returned, e.g for 
								a Patient search: <code>_elements=name,contact</code>
							</td>
						</tr>
					</tbody>
				</table>
			</subsection>
			
		</section>

		<!--
		<section name="Security">
			
			<p>
				Naturally, security is a prime concern
			</p>
		
		</section>
		-->

		<section name="Exception/Error Handling">
		
			<p>
				Within your RESTful operations, you will generally be returning
				resources or bundles of resources under normal operation. During
				execution you may also need to propagate errors back to the client
				for a variety of reasons.  
			</p>
			
			<subsection name="Automatic Exception Handling">
				<p>
					By default, HAPI generates appropriate error responses for a several
					built-in conditions. For example, if the user makes a request for
					a resource type that does not exist, or tries to perform a search
					using an invalid parameter, HAPI will automatically generate
					an <code>HTTP 400 Invalid Request</code>, and provide an 
					OperationOutcome resource as response containing details about
					the error.
				</p>
				
				<p>
					Similarly, if your method implementation throws any exceptions 
					(checked or unchecked) instead
					of returning normally, the server will usually* automatically
					generate an <code>HTTP 500 Internal Error</code> and generate
					an OperationOutcome with details about the exception.
				</p>
				
				<p>
					<i>* Note that certain exception types will generate other response
					codes, as explained below.</i> 
				</p>
			</subsection>
			
			<subsection name="Generating Specific HTTP Error Responses">
				<p>
					In many cases, you will want to respond to client requests
					with a specific HTTP error code (and possibly your own error message
					too). Sometimes this is a requirement of the FHIR specification
					(e.g. the "validate" operation requires a response of 
					<code>HTTP 422 Unprocessable Entity</code> if the validation fails).
					Sometimes this is simply a requirement of your specific application 
					(e.g. you want to provide application specific HTTP status codes for
					certain types of errors)
				</p>
				
				<p>
					To customize the error that is returned by HAPI's server methods, you 
					must throw an exception which extends HAPI's 
					<a href="http://jamesagnew.github.io/hapi-fhir/apidocs/ca/uhn/fhir/rest/server/exceptions/BaseServerResponseException.html">BaseServerResponseException</a>
					class. Various exceptions which extend this class will generate
					a different HTTP status code. 
				</p>
				<p>
					For example, the 
					<a href="http://jamesagnew.github.io/hapi-fhir/apidocs/ca/uhn/fhir/rest/server/exceptions/ResourceNotFoundException.html">ResourceNotFoundException</a>
					causes HAPI to return an <code>HTTP 404 Resource Not Found</code>. A complete list
					of available exceptions is available
					<a href="http://jamesagnew.github.io/hapi-fhir/apidocs/ca/uhn/fhir/rest/server/exceptions/package-summary.html">here</a>.
				</p>
				<p>
					If you wish to return an HTTP status code for which there is no
					pre-defined exception, you may throw the
					<a href="http://jamesagnew.github.io/hapi-fhir/apidocs/ca/uhn/fhir/rest/server/exceptions/UnclassifiedServerFailureException.html">UnclassifiedServerFailureException</a>,
					which allows you to return any status code you wish.
				</p>
			</subsection>
			<subsection name="Returning an OperationOutcome for Errors">
				<p>
					By default, HAPI will automatically generate an OperationOutcome
					which contains details about the exception that was thrown. You may 
					wish to provide your own OperationOutcome instead. In this
					case, you may pass one into the constructor of the
					exception you are throwing.
				</p>
				<macro name="snippet">
					<param name="id" value="returnOO" />
					<param name="file" value="examples/src/main/java/example/ServerExceptionsExample.java" />
				</macro>				
			</subsection>
		</section>

		<section name="Using the Server">
		
			<p>
				Your RESTful server should now support the methods you have declared. Here are a
				few helpful tricks for interacting with the server:
			</p>
			
			<p>
				<b>Pretty Printing:</b> The HAPI RESTful server supports a called
				<code>_pretty</code>, which can be used to request that responses be pretty-printed (indented for
				easy reading by humans) by setting the value to <code>true</code>. This can be useful in testing. An example URL for this might be:<br/>
				<code>http://example.com/fhir/Patient/_search?name=TESTING&amp;_pretty=true</code>  
			</p>
		
		</section>
		
		<section name="Populating Resource Metadata">
		
			<p>
				Server operations will often return a resource or a bundle of resources. These
				types will contain one or more resource instances, but also specify a set of 
				metadata describing that resource.   
			</p>
			
			<p>
				For example, resources have a "published" and "updated" date, referring to 
				the date/time the resource was originally created and the date/time the 
				resource was last updated respectively. For operations which return a single
				resource, these values are returned via HTTP headers. For operations which
				return a bundle, these values are returned via elements within the 
				bundle's "entry" tag. 	
			</p>
			
			<p>
				Bundles may also contain a set of links, such as an "alternate" link to
				a resource, or a "search" link.
			</p>
			
			<p>
				Populating these metadata elements is done via the
				<code><a href="http://jamesagnew.github.io/hapi-fhir/apidocs/ca/uhn/fhir/model/api/IResource.html#getResourceMetadata()">IResource#getResourceMetadata()</a></code>
				method. The following example shows how to set various metadata elements on 
				a resource being returned.
			</p>
			<macro name="snippet">
				<param name="id" value="serverMethod" />
				<param name="file" value="examples/src/main/java/example/ServerMetadataExamples.java" />
			</macro>

		</section>

		<section name="Server Lifecycle Methods">

			<p>
				Resource providers may optionally want to be notified when the server they are registered
				with is being destroyed, so that they can perform cleanup. In this case, a method
				annotated with the 
				<code>@Destroy</code> annotation can be added (this method should be public, return <code>void</code>,
				and take no parameters).
			</p>
			<p>
				This method will be invoked once by the RestfulServer when it is shutting down.
			</p>		
			
		</section>

		<section name="A Complete Example">
		
			<p>
				A complete example showing how to implement a RESTful server can
				be found in our Git repo here:
				<a href="https://github.com/jamesagnew/hapi-fhir/tree/master/restful-server-example">https://github.com/jamesagnew/hapi-fhir/tree/master/restful-server-example</a>
			</p>
			
			<p>
				Hopefully this will be available as a separate download soon, but currently it may
				be used to demonstrate a fully working server project.
			</p>
			
		</section>
		
		<!-- 
		<section name="Deploying to Containers">
		    <Connector port="28081" protocol="HTTP/1.1"
               connectionTimeout="20000" URIEncoding="UTF-8"
               redirectPort="8443" maxHttpHeaderSize="32000" />
		</section>
		-->

		<section id="Multitenancy">

			<p>
				If you wish to allow a single endpoint to support multiple
				tenants, you may supply the server with a multitenancy provider.
			</p>
			<p>
				This means that additional logic will be performed during request
				parsing to determine a tenant ID, which will be supplied to
				resource providers. This can be useful in servers that have
				multiple distinct logical pools of resources hosted on the
				same infrastructure.
			</p>

			<subsection name="URL Base Multitenancy">
				<p>
					Using URL Base Multitenancy means that an additional element
					is added to the path of each resource between the server base
					URL and the resource name. For example, if your restful server
					is deployed to <code>http://acme.org:8080/baseDstu3</code>
					and user wished to access Patient 123 for Tenant "FOO", the
					resource ID (and URL to fetch that resource) would be
					<code>http://acme.org:8080/FOO/Patient/123</code>.
				</p>

				<p>
					To enable this mode on your server, simply provide the
					<code>UrlBaseTenantIdentificationStrategy</code> to the
					server as shown below:
				</p>

				<macro name="snippet">
					<param name="id" value="enableUrlBaseTenantIdentificationStrategy" />
					<param name="file" value="examples/src/main/java/example/Multitenancy.java" />
				</macro>

				<p>
					Your resource providers can then use a RequestDetails parameter to
					determine the tenant ID:
				</p>
				<macro name="snippet">
					<param name="id" value="resourceProvider" />
					<param name="file" value="examples/src/main/java/example/Multitenancy.java" />
				</macro>

			</subsection>

		</section>
		
	</body>

</document>
