<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<!-- This content has been migrated -->

	<properties>
		<title>Annotation Client</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>

	<body>

		<section name="The Annotation-Driven Client">

			<p>
				HAPI also provides a second style of client, called the <b>annotation-driven</b> client.
				If you are using the 
				<a href="./doc_rest_client.html">Fluent/Generic Client</a>
				do not need to read this page.
			</p>

			<p>
				The design of the annotation-driven client
				is intended to be similar to that of
				JAX-WS, so users of that
				specification should be comfortable with
				this one. It uses a user-defined interface containing special
				annotated methods which HAPI binds to calls against a server.
			</p>

			<p>
				The annotation-driven client is particularly useful if you have a server that
				exposes a set of specific operations (search parameter combinations, named queries, etc.)
				and you want to let developers have a stongly/statically typed interface to that
				server.
			</p>
			<p>
				There is no difference in terms of capability between the two styles of 
				client. There is simply a difference in programming style and complexity. It
				is probably safe to say that the generic client is easier to use and leads to
				more readable code, at the expense of not giving any visibility into the 
				specific capabilities of the server you are interacting with.  
			</p>
			
			<subsection name="Defining A Restful Client Interface">

				<p>
					The first step in creating an annotation-driven client is to define a
					restful client interface.
				</p>

				<p>
					A restful client interface class must extend the
					<a href="./apidocs/ca/uhn/fhir/rest/client/api/IRestfulClient.html">IRestfulClient</a>
					interface,
					and will contain one or more methods which have been
					annotated with special annotations indicating which RESTful
					operation
					that method supports. Below is a simple example of a
					resource provider
					which supports the
					<a href="http://hl7.org/implement/standards/fhir/http.html#read">read</a>
					operation (i.e. retrieve a single resource by ID) as well as the
					<a href="http://hl7.org/implement/standards/fhir/http.html#search">search</a>
					operation (i.e. find any resources matching a given criteria) for a
					specific
					search criteria.
				</p>

				<p>
					You may notice that this interface looks a lot like the Resource
					Provider
					which is defined for use by the RESTful server. In fact, it
					supports all
					of the same annotations and is essentially identical,
					other than the
					fact that for a client you must use an interface but for a server you
					must use a concrete class with method implementations.
				</p>

				<macro name="snippet">
					<param name="id" value="provider" />
					<param name="file"
						value="examples/src/main/java/example/IRestfulClient.java" />
				</macro>

				<p>
					You will probably want to add more methods
					to your client interface.
					See
					<a href="./doc_rest_operations.html">RESTful Operations</a>
					for
					lots more examples of how to add methods for various operations.
				</p>

			</subsection>

			<subsection name="Instantiate the Client">

				<p>
					Once your client interface is created, all that is left is to
					create a FhirContext and instantiate the client and you are
					ready to
					start using it.
				</p>

				<macro name="snippet">
					<param name="id" value="client" />
					<param name="file"
						value="examples/src/main/java/example/ExampleRestfulClient.java" />
				</macro>

			</subsection>

			<subsection name="Configuring Encoding (JSON/XML)">

				<p>
					Restful client interfaces that you create will also extend
					the interface 
					<a href="./apidocs/ca/uhn/fhir/rest/client/api/IRestfulClient.html">IRestfulClient</a>,
					which comes with some helpful methods for configuring the way that
					the client will interact with the server.
				</p>
				<p>
					The following snippet shows how to configure the cliet to explicitly 
					request JSON or XML responses, and how to request "pretty printed" responses
					on servers that support this (HAPI based servers currently).				
				</p>
				
				<macro name="snippet">
					<param name="id" value="clientConfig" />
					<param name="file" value="examples/src/main/java/example/ClientExamples.java" />
				</macro>

			</subsection>
						
			<subsection name="A Complete Example">
	
				<p>
					The following is a complete example showing a RESTful client
					using
					HAPI FHIR.
				</p>
	
				<macro name="snippet">
					<param name="id" value="client" />
					<param name="file"
						value="examples/src/main/java/example/CompleteExampleClient.java" />
				</macro>
				
			</subsection>
			
		</section>

	</body>

</document>
