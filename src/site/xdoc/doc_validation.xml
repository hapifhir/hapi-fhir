<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>Validation</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>

	<body>
		<section name="Validation">

			<p>
				HAPI supportes two types of validation, both of which are described in the
				sections below.
			</p>
			<ul>
				<li>
					<b>Parser Validation</b>
					is validation at runtime during the parsing
					of a resource. It can be used to catch input data that is impossible to
					fit into the HAPI data model. For
					example, it can be used to throw exceptions
					or display error messages if a resource being parsed contains elements for which
					there are no appropriate fields in a HAPI data structure. This is useful in order to ensure
					that no data is being lost during parsing, but is less comprehensive than resource validation
					against raw text data.
				</li>
				<li>
					<b>Resource Validation</b>
					is validation of the raw or parsed resource against
					the official FHIR validation rules (e.g. Schema/Schematron/Profile/StructureDefinition/ValueSet)
					as well as against custom profiles which have been developed. 
				</li>
			</ul>

		</section>

		<!-- Parser Validation -->
		<section name="Parser Validation">

			<p>
				Parser validation is controlled by calling
				<code>setParserErrorHandler(IParserErrorHandler)</code>
				on
				either the FhirContext or on individual parser instances. This method
				takes an
				<code>IParserErrorHandler</code>
				, which is a callback that
				will be invoked any time a parse issue is detected.
			</p>
			<p>
				There are two implementations of
				<code>IParserErrorHandler</code>
				worth
				mentioning. You can also supply your own implementation if you want.
			</p>
			<ul>
				<li>
					<a href="./apidocs/ca/uhn/fhir/parser/LenientErrorHandler.html">LenientErrorHandler</a>
					logs any errors but does not abort parsing. By default this handler is used, and it
					logs errors at "warning" level. It can also be configured to silently
					ignore issues.
				</li>
				<li>
					<a href="./apidocs/ca/uhn/fhir/parser/StrictErrorHandler.html">StrictErrorHandler</a>
					throws a
					<code>DataFormatException</code>
					if any errors are detected.
				</li>
			</ul>

			<p>
				The following example shows how to configure a parser to use strict validation.
			</p>
			<macro name="snippet">
				<param name="id" value="parserValidation" />
				<param name="file" value="examples/src/main/java/example/ValidatorExamples.java" />
			</macro>

			<p>
				You can also configure the error handler at the FhirContext level, which is useful
				for clients.
			</p>
			<macro name="snippet">
				<param name="id" value="clientValidation" />
				<param name="file" value="examples/src/main/java/example/ValidatorExamples.java" />
			</macro>

			<p>
				FhirContext level validators can also be useful on servers.
			</p>
			<macro name="snippet">
				<param name="id" value="serverValidation" />
				<param name="file" value="examples/src/main/java/example/ValidatorExamples.java" />
			</macro>

		</section>

		<!-- RESOURCE VALIDATION -->

		<section name="Resource Validation">

			<p>
				HAPI provides a built-in and configurable mechanism for validating resources.
				This mechanism is called the
				<i>Resource Validator.</i>
			</p>
			<p>
				The resource validator is an extendible and modular system, and you 
				can configure it in a number of ways in order to get the specific
				type of validation you want to achieve. 
			</p>

			<p>
				The validator can be manually invoked at any time by creating a
				validator and configuring it with one or more 
				<a href="./apidocs/ca/uhn/fhir/validation/IValidatorModule.html">IValidatorModule</a> 
				instances.
			</p>

			<macro name="snippet">
				<param name="id" value="validationIntro" />
				<param name="file" value="examples/src/main/java/example/ValidatorExamples.java" />
			</macro>

		</section>

		<section name="Resource Validation (Profile/StructureDefinition)">

			<p>
				HAPI also supports validation against StructureDefinition
				resources. This functionality uses the HL7 "InstanceValidator", which is able
				to check a resource for conformance to FHIR profiles
				(StructureDefinitions, ValueSets, and CodeSystems),
				including validating fields, extensions, and codes for conformance to their given ValueSets.
			</p>
			<p>
				StructureDefinition validation can be used to validate a resource against the
				official structure definitions (produced by HL7) as well as against custom
				definitions provided either by HL7 or by the user.
			</p>

			<p class="doc_info_bubble">
				The instance validator is experimental in the DSTU2 mode, but has become very stable
				and full-featured in DSTU3+ mode. Use with caution when validating DSTU2 resources using
				instance validator.
			</p>

			<subsection name="Running the Validator">

				<p>
					To execute the validator, you simply create an instance of
					<a href="./apidocs-dstu3/org/hl7/fhir/dstu3/hapi/validation/FhirInstanceValidator.html">FhirInstanceValidator</a>
					and register it to new validator, as shown in the example below.
				</p>

				<p>
					Note that the example below uses the official FHIR StructureDefintions and ValueSets
					to validate the resource. It will not work unless you include the
					<code>hapi-fhir-validation-resources-[version].jar</code> to your classpath.
				</p>

				<macro name="snippet">
					<param name="id" value="instanceValidator" />
					<param name="file" value="examples/src/main/java/example/ValidatorExamples.java" />
				</macro>

			</subsection>

			<subsection name="Supplying your own StructureDefinitions">

				<p>
					The FhirInstanceValidator relies on the
					<a href="./apidocs-hl7org-dstu2/ca/uhn/fhir/validation/IValidationSupport.html">IValidationSupport</a>
					interface to load StructureDefinitions, and validate codes.
				</p>
				<p>
					By default, the
					<a href="./apidocs-hl7org-dstu2/ca/uhn/fhir/validation/DefaultProfileValidationSupport.html">DefaultProfileValidationSupport</a>
					implementation is used. This implementation loads the FHIR profiles from the
					validator resources JAR. If you want to use your own profiles, you may wish to
					supply your own implementation.
				</p>

				<macro name="snippet">
					<param name="id" value="instanceValidatorCustom" />
					<param name="file" value="examples/src/main/java/example/ValidatorExamples.java" />
				</macro>

			</subsection>

		</section>

		<section name="Resource Validation Module: Schema/Schematron">

			<p>
				FHIR resource definitions are distributed with a set of XML schema files (XSD)
				as well as a set of XML Schematron (SCH) files. These two sets of files are
				complimentary to each other, meaning that in order to claim compliance to the
				FHIR specification, your resources must validate against both sets.
			</p>
			<p>
				The two sets of files are included with HAPI, and it uses them to perform
				validation.
			</p>

			<subsection name="Preparation">

				<p>
					In order to use HAPI's Schematron support, a libaray called
					<a href="https://github.com/phax/ph-schematron">Ph-Schematron</a>
					is used, so this library must be added to your classpath (or Maven POM file, Gradle
					file, etc.)
					Note that this library is specified as an optional dependency
					by HAPI FHIR
					so you need to explicitly include it if you want to use this
					functionality.
				</p>
				<p>
					See
					<a href="./download.html">Downloads</a>
					for more information on how
					to add it.
				</p>
			</subsection>

			<subsection name="Validating a Resource">

				<p>
					To validate a resource instance, a new validator instance is requested
					from the FHIR Context. This validator is then applied against
					a specific resource
					instance, as shown in the example below.
				</p>
				<macro name="snippet">
					<param name="id" value="basicValidation" />
					<param name="file" value="examples/src/main/java/example/ValidatorExamples.java" />
				</macro>

			</subsection>

			<subsection name="Validating a Set of Files">

				<p>
					The following example shows how to load a set of resources from files
					on disk and validate each one.
				</p>
				<macro name="snippet">
					<param name="id" value="validateFiles" />
					<param name="file" value="examples/src/main/java/example/ValidatorExamples.java" />
				</macro>

			</subsection>

			<a name="structure_definition_validation" />
		</section>

	</body>

</document>
