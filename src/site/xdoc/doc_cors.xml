<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>CORS</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>

	<body>

		<section name="CORS">

			<p>
				If you are intending to support JavaScript clients in your server application,
				you will need to enable Cross Origin Resource Sharing (CORS). There are 
				a number of ways of supporting this, but the easiest is to use a servlet filter. 
			</p>
				
			<p>
				The recommended filter for this purpose is the 
				eBay Open Sourced 
				<a href="https://github.com/ebay/cors-filter">CORS Filter</a> (Licensed under
				the Apache Software License 2.0). 
			</p>
			
			<p>
				To add CORS support using this library, there are two simple steps:
			</p>
			
			<subsection name="Include cors-filter JAR">
			
				<p>
					In your server WAR file, you must include the <b>cors-filter-X.X.X.JAR</b>
					dependency. This dependency is included in the HAPI distribution.
				</p>
			
				<p>
					If you are using Maven, you will need to
					explicitly include it in your project pom.xml using the following dependency:
				</p>
				<source><![CDATA[<dependency>
	<groupId>org.ebaysf.web</groupId>
	<artifactId>cors-filter</artifactId>
	<version>1.0.1</version>
	<optional>true</optional>
</dependency>]]></source>
			
			</subsection>			

			<subsection name="Add the filter to your web.xml">
			
				<p>
					In your web.xml file (within the WEB-INF directory in your WAR file),
					the following filter definition adds the CORS filter, including support
					for the X-FHIR-Starter header defined by SMART Platforms.
				</p>
			
				<source><![CDATA[<filter>
	<filter-name>CORS Filter</filter-name>
	<filter-class>org.ebaysf.web.cors.CORSFilter</filter-class>
	<init-param>
		<description>A comma separated list of allowed origins. Note: An '*' cannot be used for an allowed origin when using credentials.</description>
		<param-name>cors.allowed.origins</param-name>
		<param-value>*</param-value>
	</init-param>
	<init-param>
		<description>A comma separated list of HTTP verbs, using which a CORS request can be made.</description>
		<param-name>cors.allowed.methods</param-name>
		<param-value>GET,POST,PUT,DELETE,OPTIONS</param-value>
	</init-param>
	<init-param>
		<description>A comma separated list of allowed headers when making a non simple CORS request.</description>
		<param-name>cors.allowed.headers</param-name>
		<param-value>X-FHIR-Starter,Origin,Accept,X-Requested-With,Content-Type,Access-Control-Request-Method,Access-Control-Request-Headers,Authorization</param-value>
	</init-param>
	<init-param>
		<description>A comma separated list non-standard response headers that will be exposed to XHR2 object.</description>
		<param-name>cors.exposed.headers</param-name>
		<param-value>Location,Content-Location</param-value>
	</init-param>
	<init-param>
		<description>A flag that suggests if CORS is supported with cookies</description>
		<param-name>cors.support.credentials</param-name>
		<param-value>true</param-value>
	</init-param>
	<init-param>
		<description>A flag to control logging</description>
		<param-name>cors.logging.enabled</param-name>
		<param-value>true</param-value>
	</init-param>
	<init-param>
		<description>Indicates how long (in seconds) the results of a preflight request can be cached in a preflight result cache.</description>
		<param-name>cors.preflight.maxage</param-name>
		<param-value>300</param-value>
	</init-param>
</filter>
<filter-mapping>
	<filter-name>CORS Filter</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>]]></source>
	
			</subsection>			
			
		</section>
		
	</body>

</document>
