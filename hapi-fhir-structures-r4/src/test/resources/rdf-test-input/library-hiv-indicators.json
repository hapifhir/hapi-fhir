{
  "resourceType": "Library",
  "id": "hiv-indicators",
  "text": {
    "status": "generated",
    "div": "\u003cdiv xmlns\u003d\"http://www.w3.org/1999/xhtml\"\u003e\u003cp\u003e\u003cb\u003eGenerated Narrative with Details\u003c/b\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003eid\u003c/b\u003e: hiv-indicators\u003c/p\u003e\u003cp\u003e\u003cb\u003eurl\u003c/b\u003e: \u003cb\u003ehttp://ohie.org/Library/hiv-indicators\u003c/b\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003eidentifier\u003c/b\u003e: hiv-indicators\u003c/p\u003e\u003cp\u003e\u003cb\u003eversion\u003c/b\u003e: 0.0.0\u003c/p\u003e\u003cp\u003e\u003cb\u003etitle\u003c/b\u003e: HIV Indicators\u003c/p\u003e\u003cp\u003e\u003cb\u003estatus\u003c/b\u003e: draft\u003c/p\u003e\u003cp\u003e\u003cb\u003eexperimental\u003c/b\u003e: true\u003c/p\u003e\u003cp\u003e\u003cb\u003etype\u003c/b\u003e: Logic Library \u003cspan\u003e(Details : {http://terminology.hl7.org/CodeSystem/library-type code \u0027logic-library\u0027 \u003d \u0027Logic Library\u0027, given as \u0027Logic Library\u0027})\u003c/span\u003e\u003c/p\u003e\u003cp\u003e\u003cb\u003edate\u003c/b\u003e: 03/08/2018\u003c/p\u003e\u003cp\u003e\u003cb\u003edescription\u003c/b\u003e: HIV Indicators Reporting Example\u003c/p\u003e\u003cp\u003e\u003cb\u003erelatedArtifact\u003c/b\u003e: \u003c/p\u003e\u003cp\u003e\u003cb\u003econtent\u003c/b\u003e: \u003c/p\u003e\u003c/div\u003e"
  },
  "url": "http://ohie.org/Library/hiv-indicators",
  "identifier": [
    {
      "system": "http://ohie.org/Library/",
      "value": "hiv-indicators"
    }
  ],
  "version": "0.0.0",
  "title": "HIV Indicators",
  "status": "draft",
  "experimental": true,
  "type": {
    "coding": [
      {
        "system": "http://terminology.hl7.org/CodeSystem/library-type",
        "code": "logic-library",
        "display": "Logic Library"
      }
    ]
  },
  "date": "2018-08-03",
  "description": "HIV Indicators Reporting Example",
  "relatedArtifact": [
    {
      "type": "derived-from",
      "url": "http://wiki.ihe.net/index.php/Aggregate_Data_Exchange_-_HIV"
    }
  ],
  "content": [
    {
      "contentType": "text/cql",
      "data": "\u003d\u003d",
      "url": "library-hiv-indicators-content.cql"
    }
  ]
}