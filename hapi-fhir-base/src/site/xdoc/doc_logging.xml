<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>Logging - HAPI FHIR</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>

	<body>

		<section name="Logging">

			<macro name="toc">
			</macro>
			
			<p>
				Java has an abundance of logging frameworks, none of which are perfect. Many libraries
				depend on one or more of these frameworks but also have dependencies who depend on a
				different one. These dependencies can cause conflicts and be very irritating to solve.
			</p>

			<p>
				Unfortunately HAPI is not immune to this issue.
			</p>

			<subsection name="Configuring HAPI's Logging - SLF4j">
				
				<img src="svg/hapi-fhir-logging.svg"  width="723" height="273" alt="Logging arch diagram" align="right"/>
			
				<p>
					HAPI uses 
					<a href="http://www.slf4j.org/">SLF4j</a> 
					for all internal logging. SLF4j is a &quot;logging facade&quot; framework, meaning
					that it doesn't actually handle log output (i.e. it isn't actually writing log lines
					to disk) but rather it is able to delegate that task to any of a number of 
					underlying frameworks (e.g. log4j, logback, JDK logging, etc.)  
				</p>
				
				<p>
					This means that in order to successfully log anything, you will need to 
					add two (or three) dependency JARs to your application:
				</p>
				<ul>
					<li><b>slf4j-api-vXX.jar</b>: This is the SLF4j API and is neccesary for HAPI to function</li>
					<li>
						An actual logging implementation, as well as its SLF4j binding. For example:
						<ul>
							<li>
								The recommended logging framework to use is Logback. Logback is absolutely
								not neccesary for HAPI to function correctly, but it has a number of nice features
								and is a good default choice. To use logback, you would include 
								<code><b>logback-vXX.jar</b></code>.
							</li>
							<li>
								If you wanted to use log4j you would include <code><b>log4j-vXX.jar</b></code> 
								as well as <code><b>slf4j-log4j-vXX.jar</b></code>. Log4j is a mature
								framework that is very widely used.
							</li>
							<li>
								If you wanted to use JDK logging (aka java.util.Logging) you would include 
								<code><b>slf4j-jdk14-vXX.jar</b></code>. JDK logging is included with
								Java but is not particularly full featured compared to many other frameworks.
							</li>
						</ul> 
					</li>
				</ul>
								
			</subsection>

			<subsection name="Commons-Logging">
				
				<img src="svg/hapi-fhir-logging-complete.svg" width="614" height="153" alt="Logging arch diagram" align="right"/>
			
				<p>
					Note that HAPI's client uses Apache HttpComponents Client internally, and that 
					library uses Apache Commons Logging as a logging facade. The recommended approach to
					using HAPI is to not include any commons-logging JAR in your application, but rather to
					include a copy of jcl-over-slf4j-vXX.jar. This JAR will simulate commons-logging,
					but will redirect its logging statements to the same target as SLF4j has been
					configured to.   
				</p>
				
				<p>
					The diagram at the right shows the chain of command for logging under this scheme.
				</p>
				
				<p>
					Note that some popular libraries (e.g. Spring Framework) also use commons-logging
					for logging. As such they may include a commons-logging JAR automatically as 
					a transitive dependency in Maven. If you are using jcl-over-slf4j and it isn't
					working correctly, it is often worth checking the list of JARs included in your
					application to see whether commons-logging has also been added. It can then be specifically
					excluded in Maven. 
				</p>
			
				<br clear="all"/>
			
			</subsection>

		</section>			

		<section name="Client Payload Logging">
			
			<p>
				To enable detailed logging of client requests and responses (what URL is being requested, what headers and payload
				are being received, etc.), an interceptor may be added to the client which logs each transaction. See
				<a href="./doc_rest_client_interceptor.html#req_resp_logging">Logging Requests and Responses</a> for more information.
			</p>
		
		</section>
		
	</body>

</document>
