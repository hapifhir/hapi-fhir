<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>Resource References - HAPI FHIR</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>

	<body>

		<!-- The body of the document contains a number of sections -->
		<section name="Resource References">
			
			<macro name="toc">
			</macro>
			
			<p>
				Resource references are a key part of the HAPI FHIR model, 
				since almost any resource will have references to other resources
				within it.
			</p>			
			
			<p>
				The <a href="http://jamesagnew.github.io/hapi-fhir/apidocs/ca/uhn/fhir/model/dstu/composite/ResourceReferenceDt.html">ResourceReferenceDt</a>
				type is the datatype for references. This datatype has a number of properties which help 
				make working with FHIR simple.
			</p>
		
			<p>
				The <code>getReference()</code> method returns an IdDt instance which contains the identity of the
				resource being referenced. This is the item which is most commonly populated when
				interacting with FHIR. For example, consider the following Patient resource, which 
				contains a reference to an Organization resource: 
			</p>
			<source><![CDATA[<Patient xmlns="http://hl7.org/fhir">
   <identifier>
      <system value="urn:mrns"/>
      <value value="253345"/>
   </identifier>
   <managingOrganization>
      <reference value="Organization/112"/>
   </managingOrganization>
</Patient>]]></source>
			
			<p>
				Given a Patient resource obtained by invoking a client operation, a call to 
				<code>IdDt ref = patient.getManagingOrganization().getReference();</code>
				returns an instance of IdDt which contains the "Organization/112" reference.
			</p>
			
			<p>
				ResourceReferenceDt also has a field for storing actual resource instances however,
				and this can be very useful.
			</p>
			

		</section>

		<section name="References in Client Code">
		
			<p>
				In client code, if a resource reference refers to a resource which was received as a
				part of the same response, <code>getResource()</code> will be populated with the 
				actual resource. This can happen because either the resource was received as a 
				contained resource, or the resource was received as a separate resource in a bundle.
			</p>
			
		</section>

		<section name="References in Server Code">
		
			<p>
				In server code, you will often want to return a resource which contains
				a link to another resource. Generally these "linked" resources are
				not actually included in the response, but rather a link to the
				resource is included and the client may request that resource directly
				(by ID) if it is needed.  
			</p>
			
			<p>
				The following example shows a Patient resource being created which will have a
				link to its managing organization when encoded from a server:
			</p>
			<source><![CDATA[Patient patient = new Patient();
patient.setId("Patient/1333");
patient.addIdentifier("urn:mrns", "253345");
patient.getManagingOrganization().setReference("Organization/124362");]]></source>
			
			<subsection name="Handling Includes (_include) in a Bundle">
				
				<p>
					Your server code may also wish to add additional resource to a bundle
					being returned (e.g. because of an _include directive in the client's request).
				</p>
				
				<p>
					To do this, you can implement your server method to simply return 
					<code>List&lt;IResource&gt;</code> and then simply add your extra resources to
					the list. Another technique however, is to populate the reference as shown
					in the example above, but ensure that the referenced resource has an ID set.
				</p>
			
				<p>
					In the following example, the Organization resource has an ID set, so it will not
					be contained but will rather appear as a distinct entry in any returned
					bundles.
				</p>
				<source><![CDATA[Organization org = new Organization();
org.setId("Organization/65546");
org.getName().setValue("Contained Test Organization");

Patient patient = new Patient();
patient.setId("Patient/1333");
patient.addIdentifier("urn:mrns", "253345");
patient.getManagingOrganization().setResource(patient);]]></source>

				<p>
					On the other hand, if the linked resource
					does not have an ID set, the linked resource will
					be included in the returned bundle as a "contained" resource. In this
					case, HAPI itself will define a local reference ID (e.g. "#001").
				</p>
				<source><![CDATA[Organization org = new Organization();
// org.setId("Organization/65546");
org.getName().setValue("Normal (not contained) Test Organization");

Patient patient = new Patient();
patient.setId("Patient/1333");
patient.addIdentifier("urn:mrns", "253345");
patient.getManagingOrganization().setResource(patient);]]></source>
				
			</subsection>
			
		</section>
		
		
	</body>

</document>
