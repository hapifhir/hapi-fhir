<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>Server Interceptors - HAPI FHIR</title>
		<author email="jamesagnew@users.sourceforge.net">James Agnew</author>
	</properties>

	<body>

		<!-- The body of the document contains a number of sections -->
		<section name="Server Interceptors">
			
			<macro name="toc">
			</macro>
			
			<img src="svg/restful-server-interceptors.svg" alt="Interceptors" align="right"/>
			
			<p>
				The RESTful server provides a powerful mechanism for adding cross-cutting behaviour
				to each incoming request that it processes. This mechanism consists of defining one or
				more <b>interceptors</b> that will be invoked at defined points in the processing of 
				each incoming request.
			</p>
			
			<p>
				Interceptors will intercept the incoming request, and can take action such as 
				logging or auditing it, or examining/injecting headers. They can optionally choose 
				to handle the request themself and the cancel any subsequent processing. Interceptors
				may also be notified of responses prior to those responses being served to a client, 
				and may audit or even cancel response. The diagram on the right shows the 
				lifecycle of a normal (non failing) request which is subject to an interceptor.  
			</p>
			
			<p>
				Interceptors must implement the 
				<a href="./apidocs/ca/uhn/fhir/rest/server/interceptor/IServerInterceptor.html">IServerInterceptor</a>
				interface (or extend the convenience 
				<a href="./apidocs/ca/uhn/fhir/rest/server/interceptor/InterceptorAdapter.html">InterceptorAdapter</a> 
				class provided). The RESTful server will normally invoke the interceptor at three 
				points in the execution of the client request. 
			</p>
			
			<ul>
				<li>
					Before any processing at all is performed on the request,
					<b>incomingRequestPreProcessed</b> will be invoked. This can be useful
					if you wish to handle some requests completely outside of HAPI's processing
					mechanism. If you are handling a request in your interceptor, you may
					return <code>false</code> from your implementation method to signal to
					HAPI that processing of the request should stop immediately.
				</li>
				<li>
					Once the request is parsed (but before it is handled),
					<b>incomingRequestPostProcessed</b> will be invoked. This method has
					an additional parameter, the
					<a href="./apidocs/ca/uhn/fhir/rest/method/RequestDetails.html">RequestDetails</a>
					object which contains details about what operation is about to be
					called, and what request parameters were receievd with that request.
				</li>
				<li>
					After the operation is handled (by invoking the corresponding ResourceProvider or PlainProvider method),
					but before the actual response is returned to the client,
					the <b>outgoingResponse</b> method is invoked.
					This method also has details about the request in its parameters, but also
					receives a copy of the response that is about to be returned. Note that
					there are three implementations of <b>outgoingResponse</b>: The server
					will invoke the one which corresponds to the response type
					of the operation being invoked (resource, bundle, etc.)
				</li>
			</ul>
			
			<br clear="all"/>
			<subsection name="Registering Interceptors">
			
				<p>
					To register an interceptor to the server, simply call
					either <code>registerInterceptor</code> or <code>setInterceptors</code>
					on your RestfulServer instance.					
				</p>
				<p>
					Note that order is important: The server will invoke 
					<code>incomingRequestPreProcessed</code> and <code>incomingRequestPostProcessed</code>
					in the same order that they are registered to the server. The server will
					invoke <code>outgoingResponse</code> in the <b>reverse</b> order to the
					order in which the interceptors were registered. This means that interceptors
					can be thought of as "wrapping" the request.					
				</p>
				
			</subsection>
			
		</section>

		<section name="Built In Interceptors">
		
			<p>
				HAPI also provides built-in interceptors which may be useful. Links to the code for each interceptor
				is also provided, to give examples of how interceptors are written.
			</p>
			
			<a name="Logging"/>
			<subsection name="Logging Server Requests">
			
				<p>
					The 
					<a href="./apidocs/ca/uhn/fhir/rest/server/interceptor/LoggingInterceptor.html">LoggingInterceptor</a>
					(<a href="./xref/ca/uhn/fhir/rest/server/interceptor/LoggingInterceptor.html">code</a>)
					can be used to generate a new log line (via SLF4j) for each incoming request. LoggingInterceptor
					provides a flexible message format that can be used to provide a customized level
					of detail about each incoming request.
				</p>
				
			</subsection>
			
		</section>
		
	</body>

</document>
