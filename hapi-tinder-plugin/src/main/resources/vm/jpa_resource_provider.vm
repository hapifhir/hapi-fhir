
package ${packageBase};

import java.util.*;

import org.apache.commons.lang3.StringUtils;

import ca.uhn.fhir.jpa.provider${package_suffix}.*;
import ca.uhn.fhir.jpa.dao.SearchParameterMap;
import ca.uhn.fhir.model.api.Include;
import ca.uhn.fhir.model.api.annotation.*;
#if ( $isRi )
import org.hl7.fhir.${version}.model.*;
#else
import ca.uhn.fhir.model.${version}.composite.*;
import ca.uhn.fhir.model.${version}.resource.*; //
#end
import ca.uhn.fhir.rest.annotation.*;
import ca.uhn.fhir.rest.param.*;
import ca.uhn.fhir.rest.api.SortSpec;

public class ${className}ResourceProvider extends 
## We have specialized base classes for RPs that handle certain resource types. These
## RPs implement type specific operations 
#if ( $version != 'dstu' && (${className} == 'Encounter' || ${className} == 'Patient' || ${className} == 'ValueSet' || ${className} == 'QuestionnaireAnswers' || ${className} == 'CodeSystem' || ($version != 'dstu2' && ${className} == 'ConceptMap')))
	BaseJpaResourceProvider${className}${versionCapitalized}
#else
	JpaResourceProvider${versionCapitalized}<${className}>
#end 
	{

	@Override
	public Class<${className}> getResourceType() {
		return ${className}.class;
	}

	@Search(allowUnknownParams=true)
	public ca.uhn.fhir.rest.api.server.IBundleProvider search(
			javax.servlet.http.HttpServletRequest theServletRequest,
			javax.servlet.http.HttpServletResponse theServletResponse,

			ca.uhn.fhir.rest.api.server.RequestDetails theRequestDetails,
			
			@Description(shortDefinition="Search the contents of the resource's data using a fulltext search")
			@OptionalParam(name=ca.uhn.fhir.rest.api.Constants.PARAM_CONTENT)
			StringAndListParam theFtContent, 

			@Description(shortDefinition="Search the contents of the resource's narrative using a fulltext search")
			@OptionalParam(name=ca.uhn.fhir.rest.api.Constants.PARAM_TEXT)
			StringAndListParam theFtText, 

			@Description(shortDefinition="Search for resources which have the given tag")
			@OptionalParam(name=ca.uhn.fhir.rest.api.Constants.PARAM_TAG)
			TokenAndListParam theSearchForTag, 

			@Description(shortDefinition="Search for resources which have the given security labels")
			@OptionalParam(name=ca.uhn.fhir.rest.api.Constants.PARAM_SECURITY)
			TokenAndListParam theSearchForSecurity, 
  
			@Description(shortDefinition="Search for resources which have the given profile")
			@OptionalParam(name=ca.uhn.fhir.rest.api.Constants.PARAM_PROFILE)
			UriAndListParam theSearchForProfile, 

			@Description(shortDefinition="Return resources linked to by the given target")
			@OptionalParam(name="_has")
			HasAndListParam theHas, 

#foreach ( $param in $searchParams ) #{if}(true) #{end} 

			@Description(shortDefinition="${param.description}")
#if (${param.type} == 'string' )
			@OptionalParam(name="${param.name}")
			StringAndListParam the${param.nameCapitalized}, 
#elseif (${param.type} == 'token' )
			@OptionalParam(name="${param.name}")
			TokenAndListParam the${param.nameCapitalized}, 
#elseif (${param.type} == 'date' )
			@OptionalParam(name="${param.name}")
			DateRangeParam the${param.nameCapitalized}, 
#elseif (${param.type} == 'uri' )
			@OptionalParam(name="${param.name}")
			UriAndListParam the${param.nameCapitalized}, 
#elseif (${param.type} == 'quantity' )
			@OptionalParam(name="${param.name}")
			QuantityAndListParam the${param.nameCapitalized}, 
#elseif (${param.type} == 'number' )
			@OptionalParam(name="${param.name}")
			NumberAndListParam the${param.nameCapitalized}, 
#elseif (${param.type} == 'reference' )
			@OptionalParam(name="${param.name}", targetTypes={ #{foreach}($nextType in ${param.targetTypes}) ${nextType}.class #{if}($foreach.hasNext), #{end} #{end} } )
			ReferenceAndListParam the${param.nameCapitalized}, 
#elseif (${param.type} == 'composite' )
			@OptionalParam(name="${param.name}", compositeTypes= { ${param.compositeTypes[0]}Param.class, ${param.compositeTypes[1]}Param.class })
			CompositeAndListParam<${param.compositeTypes[0]}Param, ${param.compositeTypes[1]}Param> the${param.nameCapitalized},
#end
#end	

			@RawParam
			Map<String, List<String>> theAdditionalRawParams,

#if ( $version != 'dstu' )
			@IncludeParam(reverse=true)
			Set<Include> theRevIncludes,
			@Description(shortDefinition="Only return resources which were last updated as specified by the given range")
			@OptionalParam(name="_lastUpdated")
			DateRangeParam theLastUpdated, 
#end

			@IncludeParam(allow= {
#foreach ( $param in $searchParamsReference )
#set ( $haveMore = $foreach.hasNext )
#if ( $version == 'dstu' )
	#foreach ( $include in $param.paths )
				"${include.path}" #{if}($foreach.hasNext || $haveMore), #{end}
	#end
#else
	#foreach ( $include in $includes )
				"${include.path}" #{if}($foreach.hasNext || $haveMore), #{end}
	#end
#end				 
#end
				#{if}($searchParamsReference.empty == false), #{end}"*"
			}) 
			Set<Include> theIncludes,
			
			@Sort 
			SortSpec theSort,
			
			@ca.uhn.fhir.rest.annotation.Count
			Integer theCount
	) {
		startRequest(theServletRequest);
		try {
			SearchParameterMap paramMap = new SearchParameterMap();
			paramMap.add(ca.uhn.fhir.rest.api.Constants.PARAM_CONTENT, theFtContent);
			paramMap.add(ca.uhn.fhir.rest.api.Constants.PARAM_TEXT, theFtText);
			paramMap.add(ca.uhn.fhir.rest.api.Constants.PARAM_TAG, theSearchForTag);
			paramMap.add(ca.uhn.fhir.rest.api.Constants.PARAM_SECURITY, theSearchForSecurity);
			paramMap.add(ca.uhn.fhir.rest.api.Constants.PARAM_PROFILE, theSearchForProfile);
			paramMap.add("_has", theHas);
#foreach ( $param in $searchParams ) 
			paramMap.add("${param.name}", the${param.nameCapitalized});
#end
#if ( $version != 'dstu' )
			paramMap.setRevIncludes(theRevIncludes);
			paramMap.setLastUpdated(theLastUpdated);
#end
			paramMap.setIncludes(theIncludes);
			paramMap.setSort(theSort);
			paramMap.setCount(theCount);

			getDao().translateRawParameters(theAdditionalRawParams, paramMap);

			ca.uhn.fhir.rest.api.server.IBundleProvider retVal = getDao().search(paramMap, theRequestDetails, theServletResponse);
			return retVal;
		} finally {
			endRequest(theServletRequest);
		}
	}

}
