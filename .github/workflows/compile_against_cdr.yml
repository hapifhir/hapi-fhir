name: Compile against CDR
on:
  pull_request:
    types: [ opened, reopened, synchronize ]
  workflow_dispatch:
    inputs:
      cdr_branch:
        description: 'CDR Branch to Compile Against'
        default: 'master'
        required: true
        type: string

jobs:
  compile-against-cdr:
    runs-on: ubuntu-latest
    steps:
      - name: Check if PR is from fork
        id: fork-check
        run: |
          if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            echo "PR is from a fork, skipping compilation check"
            echo "is_fork=true" >> $GITHUB_OUTPUT
          else
            echo "PR is from the same repository, proceeding with compilation check"
            echo "is_fork=false" >> $GITHUB_OUTPUT
          fi
      - name: Skip for forks
        if: steps.fork-check.outputs.is_fork == 'true'
        run: |
          echo "This PR is from a fork. Skipping compile against CDR check."
          exit 0
      - uses: actions/checkout@v3
        name: Checkout
        if: steps.fork-check.outputs.is_fork == 'false'
      - name: Install poetry
        if: steps.fork-check.outputs.is_fork == 'false'
        run: pipx install poetry
      - name: Setup Python
        if: steps.fork-check.outputs.is_fork == 'false'
        uses: actions/setup-python@v4.6.0
        with:
          python-version: '3.10'
      - run: poetry install
        name: Install Dependencies
        if: steps.fork-check.outputs.is_fork == 'false'
        working-directory: ./.github/workflows/cdr_check
      - run: poetry run python trigger_and_poll_gitlab.py
        name: Execute Poller
        if: steps.fork-check.outputs.is_fork == 'false'
        working-directory: ./.github/workflows/cdr_check
        env:
          READ_API_TOKEN: ${{ secrets.GITLAB_READ_API_TOKEN }}
          HAPI_BRANCH: ${{ github.head_ref || github.ref_name }}
          REQUESTING_USER: ${{ github.event.pull_request.user.login }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CDR_BRANCH: ${{ inputs.cdr_branch }}
