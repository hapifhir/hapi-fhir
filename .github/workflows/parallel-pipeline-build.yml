name: PR Pipeline Core

on:
  workflow_call:
    inputs:
      ignored_modules:
        required: true
        type: string
    secrets:
      CODECOV_TOKEN:
        required: true
      GIT_TOKEN:
        required: true

jobs:
  build-cache:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build the Maven cache
        id: cache-maven
        uses: ./.github/actions/build-cache
        with:
          java-version: '17'
          cache-path: $HOME/.m2/repository

  checkstyle:
    runs-on: ubuntu-latest
    needs: build-cache
    continue-on-error: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Build checkstyle module
        run: |
          echo "Building hapi-fhir-checkstyle module first as it's required for cross-module validation..."
          mvn clean install -pl hapi-fhir-checkstyle --batch-mode --no-transfer-progress

      - name: Run cross-module checkstyle validation
        run: |
          echo "Running cross-module checkstyle validation to detect duplicate error codes and other violations..."
          echo "This step ensures that HAPI FHIR error codes (Msg.code) are unique across all modules."
          echo "If this step fails, it means there are checkstyle violations that must be fixed before the build can proceed."
          echo ""
          mvn validate -P CHECKSTYLE --batch-mode --no-transfer-progress

  generate-module-list:
    name: Generate List of Modules to Build
    runs-on: ubuntu-latest
    needs: checkstyle
    if: always()
    outputs:
      modules_list: ${{ steps.format-modules.outputs.modules_list }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate Modules List
        id: generate_list
        uses: ./.github/actions/generate-module-list
        with:
          ignored_modules: ${{ inputs.ignored_modules }}

      - name: Format Modules List as JSON Array
        id: format-modules
        run: |
          echo "modules_list=$(jq -R -s -c 'split(",") | map(gsub("[\\n]"; ""))' <<< '${{ steps.generate_list.outputs.modules_list }}')" >> $GITHUB_OUTPUT

      - name: Print formatted modules as JSON
        run: |
          echo "Formatted JSON Array:"
          echo "${{ steps.format-modules.outputs.modules_list }}"

  test-module:
    runs-on: ubuntu-latest
    needs:
      - build-cache
      - generate-module-list

    strategy:
      matrix:
        module: ${{ fromJSON(needs.generate-module-list.outputs.modules_list) }}
      max-parallel: 256
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Tests and Archive Results
        uses: ./.github/actions/run-tests-and-archive-results
        with:
          java-version: '17'
          maven-cache-folder: $HOME/.m2/repository
          module-name: ${{ matrix.module }}

  assemble-test-reports:
    runs-on: ubuntu-latest
    needs:
      - generate-module-list
      - test-module

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Assemble Reports
        uses: ./.github/actions/assemble-test-reports
        with:
          github_token: ${{ secrets.GIT_TOKEN }}
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
          modules: ${{ needs.generate-module-list.outputs.modules_list }}

  final-result:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [ assemble-test-reports ]
    steps:
      - run: exit 1
        if: >-
          ${{
               contains(needs.*.result, 'failure')
            || contains(needs.*.result, 'cancelled')
            || contains(needs.*.result, 'skipped')
          }}
